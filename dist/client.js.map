{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,C,O,W,O,C,G,G,C,I,C,E,C,C,C,C,E,C,M,C,S,C,C,C,C,C,ECqDA,EAAA,gCACA,EAAA,oCACA,EAAA,kCACA,EAAA,+BACA,EAAA,iCACA,EAAA,4BACA,EAAA,qCACA,EAAA,+BACA,EAAA,8BACA,EAAA,iCAXA,AA/CA,SAAS,EAAY,CAAa,EAChC,KACE,CAAE,CAAA,aAAgB,OAAA,GAClB,CAAE,CAAA,aAAgB,gBAAA,GAClB,CAAE,CAAA,aAAgB,QAAA,GAMlB,oBAAoB,SAAS,CAAC,cAAc,CAAC,6BAS/C,IAAK,IAAM,KAJwB,MAAM,IAAI,CAC3C,EAAK,gBAAgB,CAAC,6BAG4C,CAClE,GAAI,CAAE,CAAA,aAAqC,mBAAA,EACzC,SAGF,IAAM,EAAO,EAA0B,YAAY,CAAC,kBAEpD,GAAI,CA7BC,CAAC,OAAQ,SAAS,CAAC,QAAQ,C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","sources":["<anon>","src/client/index.ts","src/client/elements/AutoSaveTextElement.ts","src/client/elements/BaseAutoSaveElement.ts","src/shared/getUniqueId.ts","node_modules/uuid/dist/esm-browser/index.js","node_modules/uuid/dist/esm-browser/v4.js","node_modules/uuid/dist/esm-browser/native.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/validate.js","node_modules/uuid/dist/esm-browser/regex.js","src/client/elements/UnloadHandlerElement.ts","src/client/elements/AutoSaveCheckboxElement.ts","src/client/elements/AutoSaveSearchElement.ts","node_modules/debounce/index.js","src/client/elements/ClearSearchElement.ts","src/client/elements/PostFormElement.ts","src/client/elements/SelectAllCheckboxElement.ts","src/client/elements/ModalDialogElement.ts","src/client/elements/FlyoutMenuElement.ts","src/client/elements/ViewContainerElement/index.ts","src/client/elements/ViewContainerElement/constants.ts","src/client/elements/ViewContainerElement/SelectionMixinBaseClass.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin.ts","src/client/elements/ViewContainerElement/DragSelectionMixin.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"gUvsp\":[function(require,module,exports) {\nvar _autoSaveTextElement = require(\"elements/AutoSaveTextElement\");\nvar _autoSaveCheckboxElement = require(\"elements/AutoSaveCheckboxElement\");\nvar _autoSaveSearchElement = require(\"elements/AutoSaveSearchElement\");\nvar _clearSearchElement = require(\"elements/ClearSearchElement\");\nvar _unloadHandlerElement = require(\"elements/UnloadHandlerElement\");\nvar _postFormElement = require(\"elements/PostFormElement\");\nvar _selectAllCheckboxElement = require(\"elements/SelectAllCheckboxElement\");\nvar _modalDialogElement = require(\"elements/ModalDialogElement\");\nvar _flyoutMenuElement = require(\"elements/FlyoutMenuElement\");\nvar _viewContainerElement = require(\"elements/ViewContainerElement\");\nfunction isShadowRootModeEnum(value) {\n    return [\n        \"open\",\n        \"closed\"\n    ].includes(value);\n}\nfunction dsdPolyfill(root) {\n    if (!(root instanceof Element) && !(root instanceof DocumentFragment) && !(root instanceof Document)) return;\n    if (HTMLTemplateElement.prototype.hasOwnProperty(\"shadowRootDelegatesFocus\")) return;\n    const shadowRootTemplateElements = Array.from(root.querySelectorAll(\"template[shadowrootmode]\"));\n    for (const shadowRootTemplateElement of shadowRootTemplateElements){\n        if (!(shadowRootTemplateElement instanceof HTMLTemplateElement)) continue;\n        const mode = shadowRootTemplateElement.getAttribute(\"shadowrootmode\");\n        if (!isShadowRootModeEnum(mode)) continue;\n        const delegatesFocus = shadowRootTemplateElement.hasAttribute(\"shadowrootdelegatesfocus\");\n        const parentNode = shadowRootTemplateElement.parentNode;\n        if (!(parentNode instanceof Element)) continue;\n        const shadowRoot = parentNode.attachShadow({\n            mode,\n            delegatesFocus\n        });\n        shadowRoot.appendChild(shadowRootTemplateElement.content);\n        shadowRootTemplateElement.remove();\n        dsdPolyfill(shadowRoot);\n    }\n}\ndsdPolyfill(document);\n\n},{\"elements/AutoSaveTextElement\":\"jpb0K\",\"elements/AutoSaveCheckboxElement\":\"3MJok\",\"elements/AutoSaveSearchElement\":\"8q7LM\",\"elements/ClearSearchElement\":\"foex1\",\"elements/UnloadHandlerElement\":\"bGTnF\",\"elements/PostFormElement\":\"cKAw4\",\"elements/SelectAllCheckboxElement\":\"enxk1\",\"elements/ModalDialogElement\":\"4HvQn\",\"elements/FlyoutMenuElement\":\"41FSx\",\"elements/ViewContainerElement\":\"cm1zG\"}],\"jpb0K\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"AutoSaveTextElement\", ()=>AutoSaveTextElement);\nvar _baseAutoSaveElement = require(\"elements/BaseAutoSaveElement\");\nclass AutoSaveTextElement extends (0, _baseAutoSaveElement.BaseAutoSaveElement) {\n    constructor(){\n        super(...arguments);\n        this.boundKeydownHandler = this.handleKeydown.bind(this);\n        this.boundClickHandler = this.handleClick.bind(this);\n        this.boundBlurHandler = this.handleBlur.bind(this);\n    }\n    connectedCallback() {\n        this.inputElement.addEventListener(\"change\", this.boundChangeHandler);\n        this.inputElement.addEventListener(\"keydown\", this.boundKeydownHandler);\n        this.inputElement.addEventListener(\"blur\", this.boundBlurHandler);\n        this.inputElement.addEventListener(\"pointerup\", this.boundClickHandler);\n    }\n    disconnectedCallback() {\n        this.inputElement.removeEventListener(\"change\", this.boundChangeHandler);\n        this.inputElement.removeEventListener(\"keydown\", this.boundKeydownHandler);\n        this.inputElement.removeEventListener(\"blur\", this.boundBlurHandler);\n        this.inputElement.removeEventListener(\"pointerup\", this.boundClickHandler);\n    }\n    enterEditMode() {\n        this.inputElement.removeAttribute(\"data-read-only\");\n    }\n    exitEditMode() {\n        this.inputElement.setAttribute(\"data-read-only\", \"\");\n        this.submitData().then(()=>{\n            this.markClean();\n        });\n    }\n    toggleEditMode() {\n        if (this.inputElement.dataset.readOnly === \"\") this.enterEditMode();\n        else this.exitEditMode();\n    }\n    handleClick() {\n        this.enterEditMode();\n    }\n    handleBlur() {\n        this.exitEditMode();\n    }\n    handleKeydown(event) {\n        if (!(event instanceof KeyboardEvent)) return;\n        if (event.key === \"Escape\") {\n            if (this.inputElement.dataset.readOnly !== \"\") this.exitEditMode();\n        }\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n            this.toggleEditMode();\n            if (this.inputElement.dataset.readOnly === \"\") {\n                this.dispatchEvent(new CustomEvent(\"auto-save-text:toggle-edit-mode\", {\n                    composed: true,\n                    bubbles: true\n                }));\n                this.submitData().then(()=>{\n                    this.dispatchEvent(new CustomEvent(\"auto-save-text:save\", {\n                        composed: true,\n                        bubbles: true\n                    }));\n                });\n            } else this.inputElement.selectionStart = this.inputElement.selectionEnd = this.inputElement.value.length;\n        }\n        if (event.key.length === 1 && /[a-zA-Z0-9-_ ]/.test(event.key)) {\n            if (this.inputElement.dataset.readOnly === \"\") {\n                this.toggleEditMode();\n                this.inputElement.value = \"\";\n                this.inputElement.selectionStart = this.inputElement.selectionEnd = this.inputElement.value.length;\n            }\n        }\n    }\n    async submitData() {\n        const value = this.inputElement.value;\n        const formElement = this.inputElement.form;\n        if (!formElement) {\n            this.markDirty();\n            return;\n        }\n        const formAction = formElement.getAttribute(\"action\");\n        if (!formAction) return;\n        const method = new FormData(formElement).get(\"_method\")?.toString() || \"\";\n        if ([\n            \"PUT\",\n            \"PATCH\"\n        ].includes(method)) return this.patch(formAction, value).then(()=>{\n            this.inputElement.setAttribute(\"value\", value);\n            this.markClean();\n        }).catch(()=>{\n            this.markDirty();\n        });\n        else this.markDirty();\n    }\n}\nwindow.customElements.define(\"auto-save-text\", AutoSaveTextElement);\n\n},{\"elements/BaseAutoSaveElement\":\"gOsXZ\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"gOsXZ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"BaseAutoSaveElement\", ()=>BaseAutoSaveElement);\nvar _getUniqueId = require(\"shared/getUniqueId\");\nvar _unloadHandlerElement = require(\"elements/UnloadHandlerElement\");\nclass BaseAutoSaveElement extends HTMLElement {\n    constructor(){\n        super();\n        if (!this.shadowRoot) throw new Error(\"Declarative shadow root not supported\");\n        const slotElement = this.shadowRoot.querySelector(\"slot\");\n        if (!(slotElement instanceof HTMLSlotElement)) throw new Error(\"No slot element provided\");\n        const assignedNodes = slotElement.assignedNodes();\n        if (!assignedNodes || !assignedNodes.length) throw new Error(\"No content provided\");\n        function guardIsHTMLInputElement(node) {\n            return node instanceof HTMLInputElement;\n        }\n        const inputElement = assignedNodes.find(guardIsHTMLInputElement);\n        if (!inputElement) throw new Error(\"No input element provided\");\n        const unloadHandlerElement = window.document.querySelector(\"unload-handler\");\n        if (!(unloadHandlerElement instanceof HTMLElement)) throw new Error(\"No unload handler element found\");\n        this.inputElement = inputElement;\n        this.inputId = inputElement.id || (0, _getUniqueId.getUniqueId)();\n        this.unloadHandlerElement = unloadHandlerElement;\n        this.boundChangeHandler = this.handleChange.bind(this);\n        this.boundInputHandler = this.handleInput.bind(this);\n    }\n    handleChange() {}\n    handleInput() {}\n    markDirty() {\n        const prev = this.unloadHandlerElement.getAttribute((0, _unloadHandlerElement.DIRTY_ELEMENTS_KEY)) || \"\";\n        const dirtyElementsArray = !prev ? [] : prev.split(\",\");\n        dirtyElementsArray.push(this.inputId);\n        const uniqueDirtyElementsArray = Array.from(new Set(dirtyElementsArray));\n        const dirtyElementsString = uniqueDirtyElementsArray.join(\",\");\n        this.unloadHandlerElement.setAttribute((0, _unloadHandlerElement.DIRTY_ELEMENTS_KEY), dirtyElementsString);\n        this.inputElement.setAttribute(\"data-dirty\", \"\");\n    }\n    markClean() {\n        const prev = this.unloadHandlerElement.getAttribute((0, _unloadHandlerElement.DIRTY_ELEMENTS_KEY)) || \"\";\n        const dirtyElementsArray = !prev ? [] : prev.split(\",\");\n        const dirtyElementsString = dirtyElementsArray.filter((id)=>id !== this.inputId).join(\",\");\n        this.unloadHandlerElement.setAttribute((0, _unloadHandlerElement.DIRTY_ELEMENTS_KEY), dirtyElementsString);\n        this.inputElement.removeAttribute(\"data-dirty\");\n    }\n    async patch(url, value) {\n        const formData = new FormData();\n        formData.append(\"_method\", \"PATCH\");\n        formData.append(this.inputElement.name, value);\n        return window.fetch(url, {\n            method: \"POST\",\n            body: formData\n        }).then((res)=>{\n            if (res.status === 404) throw new Error(\"Not found\");\n            return res;\n        });\n    }\n}\n\n},{\"shared/getUniqueId\":\"eClT9\",\"elements/UnloadHandlerElement\":\"bGTnF\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"eClT9\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"getUniqueId\", ()=>getUniqueId);\nvar _uuid = require(\"uuid\");\nfunction getUniqueId() {\n    return \"\".concat(Date.now(), \"-\").concat((0, _uuid.v4)());\n}\n\n},{\"uuid\":\"klst7\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"klst7\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"v1\", ()=>(0, _v1JsDefault.default));\nparcelHelpers.export(exports, \"v3\", ()=>(0, _v3JsDefault.default));\nparcelHelpers.export(exports, \"v4\", ()=>(0, _v4JsDefault.default));\nparcelHelpers.export(exports, \"v5\", ()=>(0, _v5JsDefault.default));\nparcelHelpers.export(exports, \"NIL\", ()=>(0, _nilJsDefault.default));\nparcelHelpers.export(exports, \"version\", ()=>(0, _versionJsDefault.default));\nparcelHelpers.export(exports, \"validate\", ()=>(0, _validateJsDefault.default));\nparcelHelpers.export(exports, \"stringify\", ()=>(0, _stringifyJsDefault.default));\nparcelHelpers.export(exports, \"parse\", ()=>(0, _parseJsDefault.default));\nvar _v1Js = require(\"./v1.js\");\nvar _v1JsDefault = parcelHelpers.interopDefault(_v1Js);\nvar _v3Js = require(\"./v3.js\");\nvar _v3JsDefault = parcelHelpers.interopDefault(_v3Js);\nvar _v4Js = require(\"./v4.js\");\nvar _v4JsDefault = parcelHelpers.interopDefault(_v4Js);\nvar _v5Js = require(\"./v5.js\");\nvar _v5JsDefault = parcelHelpers.interopDefault(_v5Js);\nvar _nilJs = require(\"./nil.js\");\nvar _nilJsDefault = parcelHelpers.interopDefault(_nilJs);\nvar _versionJs = require(\"./version.js\");\nvar _versionJsDefault = parcelHelpers.interopDefault(_versionJs);\nvar _validateJs = require(\"./validate.js\");\nvar _validateJsDefault = parcelHelpers.interopDefault(_validateJs);\nvar _stringifyJs = require(\"./stringify.js\");\nvar _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);\nvar _parseJs = require(\"./parse.js\");\nvar _parseJsDefault = parcelHelpers.interopDefault(_parseJs);\n\n},{\"./v1.js\":false,\"./v3.js\":false,\"./v4.js\":\"fpA4M\",\"./v5.js\":false,\"./nil.js\":false,\"./version.js\":false,\"./validate.js\":false,\"./stringify.js\":false,\"./parse.js\":false,\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"fpA4M\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _nativeJs = require(\"./native.js\");\nvar _nativeJsDefault = parcelHelpers.interopDefault(_nativeJs);\nvar _rngJs = require(\"./rng.js\");\nvar _rngJsDefault = parcelHelpers.interopDefault(_rngJs);\nvar _stringifyJs = require(\"./stringify.js\");\nfunction v4(options, buf, offset) {\n    if ((0, _nativeJsDefault.default).randomUUID && !buf && !options) return (0, _nativeJsDefault.default).randomUUID();\n    options = options || {};\n    const rnds = options.random || (options.rng || (0, _rngJsDefault.default))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n    if (buf) {\n        offset = offset || 0;\n        for(let i = 0; i < 16; ++i)buf[offset + i] = rnds[i];\n        return buf;\n    }\n    return (0, _stringifyJs.unsafeStringify)(rnds);\n}\nexports.default = v4;\n\n},{\"./native.js\":\"2mj2P\",\"./rng.js\":\"lpvWd\",\"./stringify.js\":\"fHrI1\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"2mj2P\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nconst randomUUID = typeof crypto !== \"undefined\" && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexports.default = {\n    randomUUID\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"k3151\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}],\"lpvWd\":[function(require,module,exports) {\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"default\", ()=>rng);\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nfunction rng() {\n    // lazy load so that environments that need to polyfill have a chance to do so\n    if (!getRandomValues) {\n        // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n        getRandomValues = typeof crypto !== \"undefined\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n        if (!getRandomValues) throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n    }\n    return getRandomValues(rnds8);\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"fHrI1\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"unsafeStringify\", ()=>unsafeStringify);\nvar _validateJs = require(\"./validate.js\");\nvar _validateJsDefault = parcelHelpers.interopDefault(_validateJs);\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */ const byteToHex = [];\nfor(let i = 0; i < 256; ++i)byteToHex.push((i + 0x100).toString(16).slice(1));\nfunction unsafeStringify(arr, offset = 0) {\n    // Note: Be careful editing this code!  It's been tuned for performance\n    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n    // of the following:\n    // - One or more input array values don't map to a hex octet (leading to\n    // \"undefined\" in the uuid)\n    // - Invalid input values for the RFC `version` or `variant` fields\n    if (!(0, _validateJsDefault.default)(uuid)) throw TypeError(\"Stringified UUID is invalid\");\n    return uuid;\n}\nexports.default = stringify;\n\n},{\"./validate.js\":\"d35r5\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"d35r5\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _regexJs = require(\"./regex.js\");\nvar _regexJsDefault = parcelHelpers.interopDefault(_regexJs);\nfunction validate(uuid) {\n    return typeof uuid === \"string\" && (0, _regexJsDefault.default).test(uuid);\n}\nexports.default = validate;\n\n},{\"./regex.js\":\"agidw\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"agidw\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nexports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bGTnF\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"DIRTY_ELEMENTS_KEY\", ()=>DIRTY_ELEMENTS_KEY);\nparcelHelpers.export(exports, \"UnloadHandlerElement\", ()=>UnloadHandlerElement);\nconst DIRTY_ELEMENTS_KEY = \"dirty-elements\";\nclass UnloadHandlerElement extends HTMLElement {\n    constructor(){\n        super();\n        this.boundBeforeUnloadHandler = this.handleBeforeUnload.bind(this);\n    }\n    static get observedAttributes() {\n        return [\n            \"dirty-elements\"\n        ];\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"dirty-elements\") {\n            if (newValue) this.triggerBeforeUnload();\n            else this.removeBeforeUnload();\n        }\n    }\n    triggerBeforeUnload() {\n        if (!window.onbeforeunload) window.onbeforeunload = this.boundBeforeUnloadHandler;\n    }\n    removeBeforeUnload() {\n        if (window.onbeforeunload) window.onbeforeunload = null;\n    }\n    handleBeforeUnload(event) {\n        event.preventDefault();\n        event.returnValue = \"\";\n    }\n}\nwindow.customElements.define(\"unload-handler\", UnloadHandlerElement);\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"3MJok\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"AutoSaveCheckboxElement\", ()=>AutoSaveCheckboxElement);\nvar _baseAutoSaveElement = require(\"elements/BaseAutoSaveElement\");\nclass AutoSaveCheckboxElement extends (0, _baseAutoSaveElement.BaseAutoSaveElement) {\n    constructor(){\n        super();\n        this.boundMarkClean = this.markClean.bind(this);\n        const formElement = this.inputElement.form;\n        if (!formElement) return;\n        this.formElement = formElement;\n    }\n    connectedCallback() {\n        this.inputElement.addEventListener(\"input\", this.boundInputHandler);\n        if (this.formElement) this.formElement.addEventListener(\"submit\", this.boundMarkClean);\n    }\n    disconnectedCallback() {\n        this.inputElement.removeEventListener(\"input\", this.boundInputHandler);\n        if (this.formElement) this.formElement.removeEventListener(\"submit\", this.boundMarkClean);\n    }\n    handleInput() {\n        const isChecked = this.inputElement.checked;\n        const value = isChecked ? this.inputElement.value : \"\";\n        const formElement = this.inputElement.form;\n        if (!formElement) {\n            this.markDirty();\n            return;\n        }\n        const formAction = formElement.getAttribute(\"action\");\n        if (!formAction) return;\n        const method = new FormData(formElement).get(\"_method\")?.toString() || \"\";\n        if ([\n            \"PUT\",\n            \"PATCH\"\n        ].includes(method)) this.patch(formAction, value).then(()=>{\n            window.location.reload();\n        }).catch(()=>{\n            this.markDirty();\n        });\n        else if (this.inputElement.checked !== this.inputElement.defaultChecked) this.markDirty();\n        else this.markClean();\n    }\n}\nwindow.customElements.define(\"auto-save-checkbox\", AutoSaveCheckboxElement);\n\n},{\"elements/BaseAutoSaveElement\":\"gOsXZ\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"8q7LM\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"AutoSaveSearchElement\", ()=>AutoSaveSearchElement);\nvar _debounce = require(\"debounce\");\nvar _debounceDefault = parcelHelpers.interopDefault(_debounce);\nvar _baseAutoSaveElement = require(\"elements/BaseAutoSaveElement\");\nclass AutoSaveSearchElement extends (0, _baseAutoSaveElement.BaseAutoSaveElement) {\n    constructor(){\n        super(...arguments);\n        this.debouncedInputHandler = (0, _debounceDefault.default)(this.boundInputHandler, 350);\n    }\n    connectedCallback() {\n        this.inputElement.addEventListener(\"input\", this.debouncedInputHandler);\n    }\n    disconnectedCallback() {\n        this.inputElement.removeEventListener(\"input\", this.debouncedInputHandler);\n    }\n    handleInput() {\n        const formElement = this.inputElement.form;\n        if (!formElement) return;\n        formElement.submit();\n    }\n}\nwindow.customElements.define(\"auto-save-search\", AutoSaveSearchElement);\n\n},{\"debounce\":\"7Bek2\",\"elements/BaseAutoSaveElement\":\"gOsXZ\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"7Bek2\":[function(require,module,exports) {\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */ function debounce(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n    if (null == wait) wait = 100;\n    function later() {\n        var last = Date.now() - timestamp;\n        if (last < wait && last >= 0) timeout = setTimeout(later, wait - last);\n        else {\n            timeout = null;\n            if (!immediate) {\n                result = func.apply(context, args);\n                context = args = null;\n            }\n        }\n    }\n    var debounced = function() {\n        context = this;\n        args = arguments;\n        timestamp = Date.now();\n        var callNow = immediate && !timeout;\n        if (!timeout) timeout = setTimeout(later, wait);\n        if (callNow) {\n            result = func.apply(context, args);\n            context = args = null;\n        }\n        return result;\n    };\n    debounced.clear = function() {\n        if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n        }\n    };\n    debounced.flush = function() {\n        if (timeout) {\n            result = func.apply(context, args);\n            context = args = null;\n            clearTimeout(timeout);\n            timeout = null;\n        }\n    };\n    return debounced;\n}\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\nmodule.exports = debounce;\n\n},{}],\"foex1\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"ClearSearchElement\", ()=>ClearSearchElement);\nclass ClearSearchElement extends HTMLElement {\n    constructor(){\n        super(...arguments);\n        this.boundClickHandler = this.handleClick.bind(this);\n    }\n    connectedCallback() {\n        const buttonElement = this.querySelector(\"button\");\n        if (!(buttonElement instanceof HTMLButtonElement)) throw new Error(\"No button element provided\");\n        const formElement = buttonElement.form;\n        if (!(formElement instanceof HTMLFormElement)) throw new Error(\"No form element provided\");\n        function guardIsHTMLSearchInputElement(node) {\n            return node instanceof HTMLInputElement && node.type === \"search\";\n        }\n        const searchInputElement = Array.from(formElement.elements).find(guardIsHTMLSearchInputElement);\n        if (!searchInputElement) throw new Error(\"No search input element provided\");\n        this.buttonElement = buttonElement;\n        this.formElement = formElement;\n        this.searchInputElement = searchInputElement;\n        this.buttonElement.addEventListener(\"click\", this.boundClickHandler);\n    }\n    disconnectedCallback() {\n        if (this.buttonElement) this.buttonElement.removeEventListener(\"click\", this.boundClickHandler);\n    }\n    handleClick() {\n        if (!this.searchInputElement) throw new Error(\"No search input element provided\");\n        if (!this.formElement) throw new Error(\"No form element provided\");\n        this.searchInputElement.removeAttribute(\"name\");\n        this.formElement.submit();\n    }\n}\nwindow.customElements.define(\"clear-search\", ClearSearchElement);\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"cKAw4\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"PostFormElement\", ()=>PostFormElement);\nvar _unloadHandlerElement = require(\"elements/UnloadHandlerElement\");\nclass PostFormElement extends HTMLElement {\n    constructor(){\n        super(...arguments);\n        this.boundSubmitHandler = this.handleFormSubmit.bind(this);\n    }\n    connectedCallback() {\n        const formElement = this.querySelector(\"form\");\n        if (!(formElement instanceof HTMLFormElement)) throw new Error(\"PostFormElement must contain a form element\");\n        this.formElement = formElement;\n        this.formElement.addEventListener(\"submit\", this.boundSubmitHandler);\n    }\n    disconnectedCallback() {\n        if (!this.formElement) return;\n        this.formElement.removeEventListener(\"submit\", this.boundSubmitHandler);\n    }\n    handleFormSubmit(event) {\n        event.preventDefault();\n        if (!this.formElement) return;\n        const unloadHandler = window.document.querySelector(\"unload-handler\");\n        if (!unloadHandler) return;\n        const prev = unloadHandler.getAttribute((0, _unloadHandlerElement.DIRTY_ELEMENTS_KEY)) || \"\";\n        const dirtyElementsArray = !prev ? [] : prev.split(\",\");\n        const formElements = Array.from(this.formElement.elements);\n        const dirtyElementsString = dirtyElementsArray.filter((id)=>{\n            const formElement = window.document.getElementById(id);\n            return formElement && !formElements.includes(formElement);\n        }).join(\",\");\n        unloadHandler.setAttribute((0, _unloadHandlerElement.DIRTY_ELEMENTS_KEY), dirtyElementsString);\n        this.formElement.submit();\n    }\n}\nwindow.customElements.define(\"post-form\", PostFormElement);\n\n},{\"elements/UnloadHandlerElement\":\"bGTnF\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"enxk1\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"SelectAllCheckboxElement\", ()=>SelectAllCheckboxElement);\nclass SelectAllCheckboxElement extends HTMLElement {\n    constructor(){\n        super();\n        this.boundChangeHandler = this.handleChange.bind(this);\n        this.boundControllableCheckboxChangeHandler = this.handleControllableCheckboxChange.bind(this);\n        if (!this.shadowRoot) throw new Error(\"Declarative shadow root not supported\");\n        const inputElement = this.querySelector(\"input\");\n        if (!(inputElement instanceof HTMLInputElement)) throw new Error(\"No input element provided\");\n        const formElement = inputElement.form;\n        if (!formElement) throw new Error(\"No form element provided\");\n        const inputName = inputElement.getAttribute(\"name\");\n        inputElement.removeAttribute(\"name\");\n        function isControllableCheckboxElement(element) {\n            return element instanceof HTMLInputElement && element.type === \"checkbox\" && element.name === inputName;\n        }\n        this.checkboxElements = Array.from(formElement.elements).filter(isControllableCheckboxElement);\n        this.inputElement = inputElement;\n        this.formElement = formElement;\n    }\n    connectedCallback() {\n        this.inputElement.addEventListener(\"change\", this.boundChangeHandler);\n        for (const checkboxFormElement of this.checkboxElements)checkboxFormElement.addEventListener(\"change\", this.boundControllableCheckboxChangeHandler);\n    }\n    disconnectedCallback() {\n        this.inputElement.removeEventListener(\"change\", this.boundChangeHandler);\n        for (const checkboxFormElement of this.checkboxElements)checkboxFormElement.removeEventListener(\"change\", this.boundControllableCheckboxChangeHandler);\n    }\n    handleChange() {\n        const isChecked = this.inputElement.checked;\n        for (const checkboxFormElement of this.checkboxElements)checkboxFormElement.checked = isChecked;\n    }\n    handleControllableCheckboxChange() {\n        const isAllChecked = this.checkboxElements.every((checkboxFormElement)=>checkboxFormElement.checked);\n        this.inputElement.checked = isAllChecked;\n    }\n}\nwindow.customElements.define(\"select-all-checkbox\", SelectAllCheckboxElement);\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"4HvQn\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"ModalDialogElement\", ()=>ModalDialogElement);\nclass ModalDialogElement extends HTMLElement {\n    constructor(){\n        super();\n        this.boundKeydownHandler = this.handleKeydown.bind(this);\n        const dialogElement = this.querySelector(\"dialog\");\n        if (!(dialogElement instanceof HTMLDialogElement)) throw new Error(\"Could not find dialog element\");\n        this.dialogElement = dialogElement;\n    }\n    connectedCallback() {\n        this.addEventListener(\"keydown\", this.boundKeydownHandler);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"keydown\", this.boundKeydownHandler);\n    }\n    handleKeydown(event) {\n        if (!(event instanceof KeyboardEvent)) return;\n        if (event.key === \"Escape\") {\n            const closeDialogFormElement = this.dialogElement.querySelector(\"form\");\n            if (!(closeDialogFormElement instanceof HTMLFormElement)) return;\n            closeDialogFormElement.submit();\n        }\n    }\n}\nwindow.customElements.define(\"modal-dialog\", ModalDialogElement);\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"41FSx\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"FlyoutMenuElement\", ()=>FlyoutMenuElement);\nclass FlyoutMenuElement extends HTMLElement {\n    constructor(){\n        super();\n        this.boundKeydownHandler = this.handleKeydown.bind(this);\n        this.boundToggleHandler = this.handleToggle.bind(this);\n        this.boundClickHandler = this.handleClick.bind(this);\n        const detailsElement = this.querySelector(\"details\");\n        if (!(detailsElement instanceof HTMLDetailsElement)) throw new Error(\"Could not find details element\");\n        this.detailsElement = detailsElement;\n        const summaryElement = this.querySelector(\"summary\");\n        if (!(summaryElement instanceof HTMLElement)) throw new Error(\"Could not find summary element\");\n        this.summaryElement = summaryElement;\n        const menuElement = this.querySelector('[role=\"menu\"]');\n        if (!(menuElement instanceof HTMLElement)) throw new Error(\"Could not find menu element\");\n        function isHtmlElement(element) {\n            return element instanceof HTMLElement;\n        }\n        const menuItemElements = Array.from(menuElement.querySelectorAll('[role=\"menuitem\"]')).filter(isHtmlElement);\n        this.menuItemElements = menuItemElements;\n    }\n    connectedCallback() {\n        this.addEventListener(\"keydown\", this.boundKeydownHandler);\n        this.summaryElement.addEventListener(\"click\", this.boundClickHandler);\n        this.detailsElement.addEventListener(\"toggle\", this.boundToggleHandler);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"keydown\", this.boundKeydownHandler);\n        this.summaryElement.removeEventListener(\"click\", this.boundClickHandler);\n        this.detailsElement.removeEventListener(\"toggle\", this.boundToggleHandler);\n    }\n    positionPopover() {\n        const { left, top, height, width } = this.summaryElement.getBoundingClientRect();\n        const translateX = left > window.innerWidth / 2 ? `calc(-100% - ${width}px)` : \"0px\";\n        const translateY = top > window.innerHeight / 2 ? `calc(-100% + ${height}px)` : \"0px\";\n        const transformValue = `translateX(${translateX}) translateY(${translateY})`;\n        this.style.setProperty(\"--popover-transform\", transformValue);\n        this.style.setProperty(\"--popover-left\", `${left + width}px`);\n        this.style.setProperty(\"--popover-top\", `${top}px`);\n    }\n    handleClick() {\n        this.positionPopover();\n    }\n    handleKeydown(event) {\n        if (!(event instanceof KeyboardEvent)) return;\n        if (!this.detailsElement.open) {\n            if ([\n                \" \",\n                \"Enter\"\n            ].includes(event.key)) this.positionPopover();\n            return;\n        }\n        if (event.key === \"Escape\") {\n            this.summaryElement.focus();\n            this.detailsElement.open = false;\n        }\n        const menuItemElement = event.composedPath().find((element)=>{\n            return element instanceof HTMLElement && element.matches('[role=\"menuitem\"]');\n        });\n        if (!(menuItemElement instanceof HTMLElement)) return;\n        const summaryElement = event.composedPath().find((element)=>{\n            return element instanceof HTMLElement && element.closest(\"summary\");\n        });\n        if (summaryElement) return;\n        if (event.key === \"ArrowUp\") {\n            event.preventDefault();\n            this.handleArrowUp(menuItemElement);\n        } else if (event.key === \"ArrowDown\") {\n            event.preventDefault();\n            this.handleArrowDown(menuItemElement);\n        }\n    }\n    handleArrowUp(menuItemElement) {\n        const menuItemElementIndex = this.menuItemElements.indexOf(menuItemElement);\n        if (menuItemElementIndex === -1) return;\n        const previousMenuItemElement = this.menuItemElements[menuItemElementIndex - 1] || this.menuItemElements[this.menuItemElements.length - 1];\n        if (!(previousMenuItemElement instanceof HTMLElement)) return;\n        previousMenuItemElement.focus();\n    }\n    handleArrowDown(menuItemElement) {\n        const menuItemElementIndex = this.menuItemElements.indexOf(menuItemElement);\n        const nextMenuItemElement = this.menuItemElements[menuItemElementIndex + 1] || this.menuItemElements[0];\n        if (!(nextMenuItemElement instanceof HTMLElement)) return;\n        nextMenuItemElement.focus();\n    }\n    handleToggle() {\n        if (this.detailsElement.open) {\n            const [firstMenuItem] = this.menuItemElements;\n            if (!(firstMenuItem instanceof HTMLElement)) return;\n            firstMenuItem.focus();\n        }\n    }\n}\nwindow.customElements.define(\"flyout-menu\", FlyoutMenuElement);\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"cm1zG\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"ViewContainerElement\", ()=>ViewContainerElement);\nvar _constants = require(\"./constants\");\nvar _selectionMixinBaseClass = require(\"./SelectionMixinBaseClass\");\nvar _dragSelectionMixin = require(\"./DragSelectionMixin\");\nvar _keyboardSelectionMixin = require(\"./KeyboardSelectionMixin\");\nvar __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ViewContainerElement = class ViewContainerElement extends (0, _selectionMixinBaseClass.SelectionMixinBaseClass) {\n    constructor(){\n        super(...arguments);\n        this.boundHandleAutoSaveTextSave = this.handleAutoSaveTextSave.bind(this);\n        this.boundClearCellsHandler = this.handleClearCells.bind(this);\n        this.boundHandleAutoSaveTextToggleEditMode = this.handleAutoSaveTextToggleEditMode.bind(this);\n    }\n    connectedCallback() {\n        this.addEventListener(\"view-container:clear-cells\", this.boundClearCellsHandler, {\n            capture: true\n        });\n        this.addEventListener(\"auto-save-text:save\", this.boundHandleAutoSaveTextSave);\n        this.addEventListener(\"auto-save-text:toggle-edit-mode\", this.boundHandleAutoSaveTextToggleEditMode);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"view-container:clear-cells\", this.boundClearCellsHandler, {\n            capture: true\n        });\n        this.removeEventListener(\"auto-save-text:save\", this.boundHandleAutoSaveTextSave);\n        this.removeEventListener(\"auto-save-text:toggle-edit-mode\", this.boundHandleAutoSaveTextToggleEditMode);\n    }\n    handleAutoSaveTextSave(event) {\n        if (!(event instanceof CustomEvent)) return;\n        const { target } = event;\n        if (!(target instanceof HTMLElement)) return;\n        const rowElement = target.closest('[role=\"row\"]');\n        if (!(rowElement instanceof HTMLElement)) return;\n        const gridRows = Array.from(this.gridElement.querySelectorAll('[role=\"row\"]'));\n        const rowIndex = gridRows.indexOf(rowElement);\n        if (Number(rowIndex) !== gridRows.length - 1) return;\n        const addRowButtonElement = this.querySelector(\"#add-new-row-button\");\n        if (!(addRowButtonElement instanceof HTMLButtonElement)) throw new Error(\"Could not find add new row button element\");\n        const addRowFormElement = addRowButtonElement.form;\n        if (!(addRowFormElement instanceof HTMLFormElement)) throw new Error(\"Could not find add new row form element\");\n        addRowFormElement.submit();\n    }\n    handleClearCells(event) {\n        if (!(event instanceof CustomEvent)) return;\n        if (!Array.isArray(event.detail)) return;\n        const cellElements = event.detail.filter((0, _constants.isHtmlElement));\n        for (const cellElement of cellElements){\n            const autoSaveTextElement = cellElement.querySelector((0, _constants.INPUT_SELECTOR));\n            if (!(autoSaveTextElement instanceof HTMLInputElement)) continue;\n            autoSaveTextElement.value = \"\";\n        }\n        const clearCellsButtonElement = this.querySelector(\"#clear-cells-button\");\n        if (!(clearCellsButtonElement instanceof HTMLButtonElement)) throw new Error(\"Could not find clear cells button element\");\n        const clearCellsFormElement = clearCellsButtonElement.form;\n        if (!(clearCellsFormElement instanceof HTMLFormElement)) throw new Error(\"Could not find add new row form element\");\n        const hiddenInputElement = clearCellsFormElement.querySelector('input[type=\"hidden\"][name=\"cell[]\"]');\n        if (!(hiddenInputElement instanceof HTMLInputElement)) throw new Error(\"Could not find hidden input element\");\n        const cellsValue = cellElements.map((cellElement)=>{\n            const rowId = cellElement.getAttribute(\"data-row-id\");\n            if (!rowId) throw new Error(\"Could not find id attribute\");\n            const propertyId = cellElement.getAttribute(\"data-property-id\");\n            if (!propertyId) throw new Error(\"Could not find id attribute\");\n            return rowId + \":\" + propertyId;\n        }).join(\",\");\n        hiddenInputElement.setAttribute(\"value\", cellsValue);\n        fetch(clearCellsFormElement.action, {\n            method: clearCellsFormElement.method,\n            body: new FormData(clearCellsFormElement)\n        });\n    }\n    handleAutoSaveTextToggleEditMode(event) {\n        if (!(event instanceof CustomEvent)) return;\n        if (!(event.target instanceof HTMLElement)) return;\n        const cellElement = event.target.closest((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR));\n        if (!(cellElement instanceof HTMLElement)) return;\n        const rowElement = cellElement.closest('[role=\"row\"]');\n        if (!(rowElement instanceof HTMLElement)) return;\n        const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\n        const nextRowElement = rowElement.nextElementSibling;\n        if (!(nextRowElement instanceof HTMLElement)) return;\n        const nextCellElement = nextRowElement.children[cellIndex];\n        if (!(nextCellElement instanceof HTMLElement)) return;\n        nextCellElement.focus();\n    }\n};\nViewContainerElement = __decorate([\n    (0, _dragSelectionMixin.DragSelectionMixin)(),\n    (0, _keyboardSelectionMixin.KeyboardSelectionMixin)()\n], ViewContainerElement);\nwindow.customElements.define(\"view-container\", ViewContainerElement);\n\n},{\"./constants\":\"9M7pK\",\"./SelectionMixinBaseClass\":\"vHVYf\",\"./KeyboardSelectionMixin\":\"cyxFc\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\",\"./DragSelectionMixin\":\"iUATk\"}],\"9M7pK\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"ANY_CELL_ELEMENT_SELECTOR\", ()=>ANY_CELL_ELEMENT_SELECTOR);\nparcelHelpers.export(exports, \"SELECTABLE_CELL_ELEMENT_SELECTOR\", ()=>SELECTABLE_CELL_ELEMENT_SELECTOR);\nparcelHelpers.export(exports, \"INPUT_SELECTOR\", ()=>INPUT_SELECTOR);\nparcelHelpers.export(exports, \"FLYOUT_MENU_SELECTOR\", ()=>FLYOUT_MENU_SELECTOR);\nparcelHelpers.export(exports, \"isInFlyoutMenu\", ()=>isInFlyoutMenu);\nparcelHelpers.export(exports, \"isHtmlElement\", ()=>isHtmlElement);\nconst ANY_CELL_ELEMENT_SELECTOR = '[role=\"gridcell\"], [role=\"columnheader\"], [role=\"rowheader\"]';\nconst SELECTABLE_CELL_ELEMENT_SELECTOR = `[data-selectable]:is(${ANY_CELL_ELEMENT_SELECTOR})`;\nconst INPUT_SELECTOR = ':is(:is(auto-save-search, auto-save-text) input, input[type=\"checkbox\"])';\nconst FLYOUT_MENU_SELECTOR = 'flyout-menu [role=\"menu\"]';\nfunction isInFlyoutMenu(element) {\n    if (!(element instanceof Element)) return false;\n    const flyoutMenuElement = element.closest(FLYOUT_MENU_SELECTOR);\n    return flyoutMenuElement instanceof HTMLElement;\n}\nfunction isHtmlElement(element) {\n    return element instanceof HTMLElement;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"vHVYf\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"SelectionMixinBaseClass\", ()=>SelectionMixinBaseClass);\nvar _constants = require(\"./constants\");\nclass SelectionMixinBaseClass extends HTMLElement {\n    constructor(){\n        super();\n        const gridElement = this.querySelector('[role=\"grid\"]');\n        if (!(gridElement instanceof HTMLElement)) throw new Error(\"Could not find grid element\");\n        this.gridElement = gridElement;\n    }\n    getClosestCellElementFromPoint(event) {\n        if (event instanceof PointerEvent) {\n            let closestCellElement = null;\n            const touchTarget = window.document.elementFromPoint(event.clientX, event.clientY);\n            if (touchTarget instanceof HTMLElement) closestCellElement = touchTarget.closest((0, _constants.ANY_CELL_ELEMENT_SELECTOR));\n            return closestCellElement;\n        } else return this.getClosestCellElementFromComposedPath(event);\n    }\n    getClosestCellElementFromComposedPath(event) {\n        const composedPath = event.composedPath();\n        const closestCellElement = composedPath.find((element)=>{\n            if (!(element instanceof HTMLElement)) return false;\n            return element.matches((0, _constants.ANY_CELL_ELEMENT_SELECTOR));\n        });\n        if (!(closestCellElement instanceof HTMLElement)) return null;\n        return closestCellElement;\n    }\n    updateHighlightElement(highlightElement, cellElement, draggedCellElement) {\n        if (!highlightElement) return;\n        const closestRowElement = cellElement.closest('[role=\"row\"]');\n        if (!(closestRowElement instanceof HTMLElement)) return;\n        const draggedRow = draggedCellElement.closest('[role=\"row\"]');\n        if (!(draggedRow instanceof HTMLElement)) return;\n        const closestCellColumnIndex = Array.from(closestRowElement.querySelectorAll((0, _constants.ANY_CELL_ELEMENT_SELECTOR))).indexOf(cellElement);\n        const draggedCellColumnIndex = Array.from(draggedRow.querySelectorAll((0, _constants.ANY_CELL_ELEMENT_SELECTOR))).indexOf(draggedCellElement);\n        const closestCellLeft = cellElement.getBoundingClientRect().left;\n        const closestCellRight = cellElement.getBoundingClientRect().right;\n        const draggedCellLeft = draggedCellElement.getBoundingClientRect().left;\n        const draggedCellRight = draggedCellElement.getBoundingClientRect().right;\n        const closestCellTop = cellElement.getBoundingClientRect().top;\n        const closestCellBottom = cellElement.getBoundingClientRect().bottom;\n        const draggedCellTop = draggedCellElement.getBoundingClientRect().top;\n        const draggedCellBottom = draggedCellElement.getBoundingClientRect().bottom;\n        const isSameCell = cellElement === draggedCellElement;\n        const isDraggedCellBeforeClosestCell = draggedCellColumnIndex < closestCellColumnIndex && !isSameCell;\n        const isDraggedCellAfterClosestCell = draggedCellColumnIndex > closestCellColumnIndex && !isSameCell;\n        const isDraggedCellAboveClosestCell = draggedCellTop < closestCellTop && !isSameCell;\n        const isDraggedCellBelowClosestCell = draggedCellBottom > closestCellBottom && !isSameCell;\n        const left = isSameCell ? draggedCellLeft : isDraggedCellBeforeClosestCell ? draggedCellLeft : closestCellLeft;\n        const right = isSameCell ? draggedCellRight : isDraggedCellAfterClosestCell ? draggedCellRight : closestCellRight;\n        const top = isSameCell ? draggedCellTop : isDraggedCellAboveClosestCell ? draggedCellTop : closestCellTop;\n        const bottom = isSameCell ? draggedCellBottom : isDraggedCellBelowClosestCell ? draggedCellBottom : closestCellBottom;\n        highlightElement.style.left = `${left}px`;\n        highlightElement.style.top = `${top}px`;\n        highlightElement.style.width = `${right - left}px`;\n        highlightElement.style.height = `${bottom - top}px`;\n        if (right - left === 0 || bottom - top === 0) console.log(\"zero width or height\", {\n            draggedCellElement,\n            cellElement\n        });\n        highlightElement.style.border = \"3px solid var(--swatch-interactive)\";\n    }\n    initializeHighlightElement(highlightElement, cellElement) {\n        if (highlightElement) return null;\n        highlightElement = window.document.createElement(\"div\");\n        highlightElement.classList.add(\"highlight\");\n        const { left, top } = cellElement.getBoundingClientRect();\n        highlightElement.style.top = `${top}px`;\n        highlightElement.style.left = `${left}px`;\n        this.appendChild(highlightElement);\n        return highlightElement;\n    }\n    updateSelectedCells(highlightElement, isInvertingSelection, isShiftKeyPressed) {\n        if (!highlightElement) return;\n        const { top, left, bottom, right } = highlightElement.getBoundingClientRect();\n        const allCellElements = Array.from(this.gridElement.querySelectorAll((0, _constants.ANY_CELL_ELEMENT_SELECTOR))).filter((0, _constants.isHtmlElement));\n        const markCellSelected = (cellElement)=>{\n            cellElement.setAttribute(\"aria-selected\", \"true\");\n        };\n        const markCellUnselected = (cellElement)=>{\n            cellElement.removeAttribute(\"aria-selected\");\n        };\n        for (const cellElement of allCellElements){\n            const cellBounds = cellElement.getBoundingClientRect();\n            const isTopWithinBounds = Math.ceil(cellBounds.top) >= Math.ceil(top);\n            const isBottomWithinBounds = Math.ceil(cellBounds.bottom) <= Math.ceil(bottom);\n            const isLeftWithinBounds = Math.ceil(cellBounds.left) >= Math.ceil(left);\n            const isRightWithinBounds = Math.ceil(cellBounds.right) <= Math.ceil(right);\n            const isWithinBounds = isTopWithinBounds && isBottomWithinBounds && isLeftWithinBounds && isRightWithinBounds;\n            if (isInvertingSelection) {\n                if (isWithinBounds) markCellUnselected(cellElement);\n                else if (cellElement.hasAttribute(\"data-selected\")) markCellSelected(cellElement);\n            } else if (isShiftKeyPressed) {\n                if (isWithinBounds || cellElement.hasAttribute(\"data-selected\")) markCellSelected(cellElement);\n                else markCellUnselected(cellElement);\n            } else if (isWithinBounds) markCellSelected(cellElement);\n            else markCellUnselected(cellElement);\n        }\n    }\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\",\"./constants\":\"9M7pK\"}],\"cyxFc\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"KeyboardSelectionMixin\", ()=>KeyboardSelectionMixin);\nvar _constants = require(\"./constants\");\nfunction KeyboardSelectionMixin() {\n    return function(constructor) {\n        return class extends constructor {\n            constructor(){\n                super(...arguments);\n                this.isKeyboardShiftKeyPressed = false;\n                this.isInvertingKeyboardSelection = false;\n                this.boundKeydownHandler = this.handleKeydown.bind(this);\n                this.boundKeyupHandler = this.handleKeyup.bind(this);\n                this.keyboardOriginCellElement = null;\n                this.keyboardHighlightElement = null;\n            }\n            connectedCallback() {\n                if (constructor.prototype.connectedCallback) constructor.prototype.connectedCallback.call(this);\n                this.addEventListener(\"keydown\", this.boundKeydownHandler, {\n                    capture: true\n                });\n                this.addEventListener(\"keyup\", this.boundKeyupHandler);\n            }\n            disconnectedCallback() {\n                if (constructor.prototype.disconnectedCallback) constructor.prototype.disconnectedCallback.call(this);\n                this.removeEventListener(\"keydown\", this.boundKeydownHandler, {\n                    capture: true\n                });\n                this.removeEventListener(\"keyup\", this.boundKeyupHandler);\n            }\n            handleHome(cellElement) {\n                const gridElement = cellElement.closest('[role=\"grid\"]');\n                if (!(gridElement instanceof HTMLElement)) return;\n                const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\n                const targetRowElement = rowElements[0];\n                if (!(targetRowElement instanceof HTMLElement)) return;\n                const targetRowElementCells = Array.from(targetRowElement.children);\n                const targetCellElement = targetRowElementCells[0];\n                if (!(targetCellElement instanceof HTMLElement)) return;\n                this.focusElement(targetCellElement);\n            }\n            handleEnd(cellElement) {\n                const gridElement = cellElement.closest('[role=\"grid\"]');\n                if (!(gridElement instanceof HTMLElement)) return;\n                const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\n                const targetRowElement = rowElements[rowElements.length - 1];\n                if (!(targetRowElement instanceof HTMLElement)) return;\n                const targetRowElementCells = Array.from(targetRowElement.children);\n                const targetCellElement = targetRowElementCells[targetRowElementCells.length - 1];\n                if (!(targetCellElement instanceof HTMLElement)) return;\n                this.focusElement(targetCellElement);\n            }\n            handleArrowUp(cellElement) {\n                const rowElement = cellElement.closest('[role=\"row\"]');\n                if (!rowElement) return;\n                const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\n                const gridElement = rowElement.closest('[role=\"grid\"]');\n                if (!(gridElement instanceof HTMLElement)) return;\n                const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\n                const rowIndex = rowElements.indexOf(rowElement);\n                const targetRowElement = rowElements[rowIndex - 1];\n                if (!(targetRowElement instanceof HTMLElement)) return;\n                const targetRowElementCells = Array.from(targetRowElement.children);\n                const targetCellElement = targetRowElementCells[Math.min(targetRowElementCells.length - 1, cellIndex)];\n                if (!(targetCellElement instanceof HTMLElement)) return;\n                if (this.isKeyboardShiftKeyPressed && !targetCellElement.matches((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR))) return;\n                this.focusElement(targetCellElement);\n                if (!cellElement.matches((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR))) return;\n                if (this.isKeyboardShiftKeyPressed) {\n                    if (!this.keyboardHighlightElement) {\n                        this.isInvertingKeyboardSelection = cellElement.hasAttribute(\"aria-selected\");\n                        this.keyboardHighlightElement = this.initializeHighlightElement(this.keyboardHighlightElement, cellElement);\n                        this.keyboardOriginCellElement = cellElement;\n                    }\n                    this.updateHighlightElement(this.keyboardHighlightElement, targetCellElement, this.keyboardOriginCellElement || cellElement);\n                    this.updateSelectedCells(this.keyboardHighlightElement, this.isInvertingKeyboardSelection, this.isKeyboardShiftKeyPressed);\n                }\n            }\n            handleArrowDown(cellElement) {\n                const rowElement = cellElement.closest('[role=\"row\"]');\n                if (!rowElement) return;\n                const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\n                const gridElement = rowElement.closest('[role=\"grid\"]');\n                if (!(gridElement instanceof HTMLElement)) return;\n                const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\n                const rowIndex = rowElements.indexOf(rowElement);\n                const targetRowElement = rowElements[rowIndex + 1];\n                if (!(targetRowElement instanceof HTMLElement)) return;\n                const targetRowElementCells = Array.from(targetRowElement.children);\n                const targetCellElement = targetRowElementCells[Math.min(targetRowElementCells.length - 1, cellIndex)];\n                if (!(targetCellElement instanceof HTMLElement)) return;\n                if (this.isKeyboardShiftKeyPressed && !targetCellElement.matches((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR))) return;\n                this.focusElement(targetCellElement);\n                if (!cellElement.matches((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR))) return;\n                if (this.isKeyboardShiftKeyPressed) {\n                    if (!this.keyboardHighlightElement) {\n                        this.isInvertingKeyboardSelection = cellElement.hasAttribute(\"aria-selected\");\n                        this.keyboardHighlightElement = this.initializeHighlightElement(this.keyboardHighlightElement, cellElement);\n                        this.keyboardOriginCellElement = cellElement;\n                    }\n                    this.updateHighlightElement(this.keyboardHighlightElement, targetCellElement, this.keyboardOriginCellElement || cellElement);\n                    this.updateSelectedCells(this.keyboardHighlightElement, this.isInvertingKeyboardSelection, this.isKeyboardShiftKeyPressed);\n                }\n            }\n            handleArrowLeft(cellElement) {\n                const previousCellElement = cellElement.previousElementSibling;\n                if (!(previousCellElement instanceof HTMLElement)) return;\n                if (this.isKeyboardShiftKeyPressed && !previousCellElement.matches((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR))) return;\n                this.focusElement(previousCellElement);\n                if (!cellElement.matches((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR))) return;\n                if (this.isKeyboardShiftKeyPressed) {\n                    if (!this.keyboardHighlightElement) {\n                        this.isInvertingKeyboardSelection = cellElement.hasAttribute(\"aria-selected\");\n                        this.keyboardHighlightElement = this.initializeHighlightElement(this.keyboardHighlightElement, cellElement);\n                        this.keyboardOriginCellElement = cellElement;\n                    }\n                    this.updateHighlightElement(this.keyboardHighlightElement, previousCellElement, this.keyboardOriginCellElement || cellElement);\n                    this.updateSelectedCells(this.keyboardHighlightElement, this.isInvertingKeyboardSelection, this.isKeyboardShiftKeyPressed);\n                }\n            }\n            handleArrowRight(cellElement) {\n                const nextCellElement = cellElement.nextElementSibling;\n                if (!(nextCellElement instanceof HTMLElement)) return;\n                if (this.isKeyboardShiftKeyPressed && !nextCellElement.matches((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR))) return;\n                this.focusElement(nextCellElement);\n                if (!cellElement.matches((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR))) return;\n                if (this.isKeyboardShiftKeyPressed) {\n                    if (!this.keyboardHighlightElement) {\n                        this.isInvertingKeyboardSelection = cellElement.hasAttribute(\"aria-selected\");\n                        this.keyboardHighlightElement = this.initializeHighlightElement(this.keyboardHighlightElement, cellElement);\n                        this.keyboardOriginCellElement = cellElement;\n                    }\n                    this.updateHighlightElement(this.keyboardHighlightElement, nextCellElement, this.keyboardOriginCellElement || cellElement);\n                    this.updateSelectedCells(this.keyboardHighlightElement, this.isInvertingKeyboardSelection, this.isKeyboardShiftKeyPressed);\n                }\n            }\n            focusElement(targetCellElement) {\n                targetCellElement.focus();\n            }\n            handleKeyup(event) {\n                if (!(event instanceof KeyboardEvent)) return;\n                this.isKeyboardShiftKeyPressed = event.shiftKey;\n                const allCells = Array.from(this.gridElement.querySelectorAll((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)));\n                if (!this.isKeyboardShiftKeyPressed) {\n                    if (this.keyboardHighlightElement) this.keyboardHighlightElement.remove();\n                    this.keyboardHighlightElement = null;\n                    this.keyboardOriginCellElement = null;\n                    const selectedCells = Array.from(this.gridElement.querySelectorAll(`[data-selected]:is(${(0, _constants.ANY_CELL_ELEMENT_SELECTOR)})`));\n                    for (const selectedCell of selectedCells)selectedCell.removeAttribute(\"data-selected\");\n                }\n            }\n            handleKeydown(event) {\n                if (!(event instanceof KeyboardEvent)) return;\n                if (!this.isKeyboardShiftKeyPressed) {\n                    this.isKeyboardShiftKeyPressed = event.key === \"Shift\" || event.shiftKey;\n                    if (this.isKeyboardShiftKeyPressed) {\n                        const allCells = Array.from(this.gridElement.querySelectorAll((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)));\n                        for (const cell of allCells)if (cell.hasAttribute(\"aria-selected\")) cell.setAttribute(\"data-selected\", \"\");\n                        else cell.removeAttribute(\"data-selected\");\n                    }\n                }\n                if (event.key === \"Escape\") {\n                    const selectedCells = Array.from(this.gridElement.querySelectorAll(`[aria-selected=\"true\"]:is(${(0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)})`));\n                    for (const selectedCell of selectedCells){\n                        selectedCell.removeAttribute(\"aria-selected\");\n                        selectedCell.removeAttribute(\"data-selected\");\n                    }\n                    if (this.keyboardHighlightElement) {\n                        this.keyboardHighlightElement.remove();\n                        this.keyboardHighlightElement = null;\n                    }\n                }\n                const cellElement = event.composedPath().find((element)=>{\n                    return element instanceof HTMLElement && element.matches((0, _constants.ANY_CELL_ELEMENT_SELECTOR));\n                });\n                if (!(cellElement instanceof HTMLElement)) return;\n                const editableAutoSaveTextInputElement = cellElement.querySelector('auto-save-text input[type=\"text\"]:not([data-read-only])');\n                if (editableAutoSaveTextInputElement) return;\n                const flyoutMenuElement = event.composedPath().find((0, _constants.isInFlyoutMenu));\n                if (flyoutMenuElement) return;\n                switch(event.key){\n                    case \"ArrowUp\":\n                        event.preventDefault();\n                        this.handleArrowUp(cellElement);\n                        break;\n                    case \"ArrowDown\":\n                        event.preventDefault();\n                        this.handleArrowDown(cellElement);\n                        break;\n                    case \"ArrowLeft\":\n                        event.preventDefault();\n                        this.handleArrowLeft(cellElement);\n                        break;\n                    case \"ArrowRight\":\n                        event.preventDefault();\n                        this.handleArrowRight(cellElement);\n                        break;\n                    case \"Home\":\n                        event.preventDefault();\n                        this.handleHome(cellElement);\n                        break;\n                    case \"End\":\n                        event.preventDefault();\n                        this.handleEnd(cellElement);\n                        break;\n                    default:\n                        break;\n                }\n                const selectedCellElements = Array.from(this.querySelectorAll(`[aria-selected=\"true\"]:is(${(0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)})`));\n                if (event.key === \" \" && this.isKeyboardShiftKeyPressed) {\n                    const inputElement = cellElement.querySelector((0, _constants.INPUT_SELECTOR));\n                    if (!(inputElement instanceof HTMLInputElement)) return;\n                    if (!inputElement.hasAttribute(\"data-read-only\")) return;\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                    event.stopPropagation();\n                    const allCells = Array.from(this.gridElement.querySelectorAll((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)));\n                    for (const cell of allCells)if (cell.hasAttribute(\"aria-selected\")) cell.setAttribute(\"data-selected\", \"\");\n                    else cell.removeAttribute(\"data-selected\");\n                    this.isInvertingKeyboardSelection = cellElement.hasAttribute(\"aria-selected\");\n                    this.keyboardHighlightElement = this.initializeHighlightElement(this.keyboardHighlightElement, cellElement);\n                    this.keyboardOriginCellElement = cellElement;\n                    this.updateHighlightElement(this.keyboardHighlightElement, cellElement, cellElement);\n                    this.updateSelectedCells(this.keyboardHighlightElement, this.isInvertingKeyboardSelection, this.isKeyboardShiftKeyPressed);\n                    if (this.keyboardHighlightElement) this.keyboardHighlightElement.remove();\n                    this.keyboardHighlightElement = null;\n                    this.keyboardOriginCellElement = null;\n                }\n                if (selectedCellElements.length) {\n                    if ([\n                        \"Delete\",\n                        \"Backspace\"\n                    ].includes(event.key)) {\n                        event.preventDefault();\n                        event.stopImmediatePropagation();\n                        event.stopPropagation();\n                        this.dispatchEvent(new CustomEvent(\"view-container:clear-cells\", {\n                            bubbles: true,\n                            composed: true,\n                            detail: selectedCellElements\n                        }));\n                    }\n                }\n            }\n        };\n    };\n}\n\n},{\"./constants\":\"9M7pK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"iUATk\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"DragSelectionMixin\", ()=>DragSelectionMixin);\nvar _constants = require(\"./constants\");\nfunction DragSelectionMixin() {\n    return function(constructor) {\n        return class extends constructor {\n            constructor(){\n                super(...arguments);\n                this.isDragShiftKeyPressed = false;\n                this.isInvertingDragSelection = false;\n                this.isPointerDown = false;\n                this.isDragging = false;\n                this.lastSelectedCellElement = null;\n                this.dragOriginCellElement = null;\n                this.dragHighlightElement = null;\n                this.pointerId = 0;\n                this.boundPointerdownHandler = this.handlePointerdown.bind(this);\n                this.boundPointermoveHandler = this.handlePointermove.bind(this);\n                this.boundPointerupHandler = this.handlePointerup.bind(this);\n                this.boundDragKeydownHandler = this.handleDragKeydown.bind(this);\n                this.boundDragKeyupHandler = this.handleDragKeyup.bind(this);\n            }\n            handleDragKeydown(event) {\n                if (!(event instanceof KeyboardEvent)) return;\n                if (!this.isDragShiftKeyPressed) this.isDragShiftKeyPressed = event.key === \"Shift\" || event.shiftKey;\n            }\n            handleDragKeyup(event) {\n                if (!(event instanceof KeyboardEvent)) return;\n                this.isDragShiftKeyPressed = event.shiftKey;\n                const allCells = Array.from(this.gridElement.querySelectorAll((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)));\n                for (const cell of allCells)if (cell.hasAttribute(\"aria-selected\")) cell.setAttribute(\"data-selected\", \"\");\n                else cell.removeAttribute(\"data-selected\");\n                if (!this.isDragShiftKeyPressed) {\n                    if (this.dragHighlightElement) this.dragHighlightElement.remove();\n                    this.dragHighlightElement = null;\n                    this.dragOriginCellElement = null;\n                    this.isDragging = false;\n                    const selectedCells = Array.from(this.gridElement.querySelectorAll(`[data-selected]:is(${(0, _constants.ANY_CELL_ELEMENT_SELECTOR)})`));\n                    for (const selectedCell of selectedCells)selectedCell.removeAttribute(\"data-selected\");\n                }\n            }\n            connectedCallback() {\n                if (constructor.prototype.connectedCallback) constructor.prototype.connectedCallback.call(this);\n                this.addEventListener(\"pointerdown\", this.boundPointerdownHandler);\n                this.addEventListener(\"pointermove\", this.boundPointermoveHandler);\n                this.addEventListener(\"pointerup\", this.boundPointerupHandler, {\n                    capture: true\n                });\n                this.addEventListener(\"pointercancel\", this.boundPointerupHandler, {\n                    capture: true\n                });\n                this.addEventListener(\"keydown\", this.boundDragKeydownHandler);\n                this.addEventListener(\"keyup\", this.boundDragKeyupHandler);\n            }\n            disconnectedCallback() {\n                if (constructor.prototype.disconnectedCallback) constructor.prototype.disconnectedCallback.call(this);\n                this.removeEventListener(\"pointerdown\", this.boundPointerdownHandler);\n                this.removeEventListener(\"pointermove\", this.boundPointermoveHandler);\n                this.removeEventListener(\"pointerup\", this.boundPointerupHandler, {\n                    capture: true\n                });\n                this.removeEventListener(\"pointercancel\", this.boundPointerupHandler, {\n                    capture: true\n                });\n                this.removeEventListener(\"keydown\", this.boundDragKeydownHandler);\n                this.removeEventListener(\"keyup\", this.boundDragKeyupHandler);\n            }\n            handlePointerdown(event) {\n                if (!(event instanceof PointerEvent)) return;\n                const closestCellElement = this.getClosestCellElementFromComposedPath(event);\n                if (!closestCellElement) return;\n                this.isPointerDown = true;\n                const allCells = Array.from(this.gridElement.querySelectorAll((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)));\n                for (const cell of allCells)if (cell.hasAttribute(\"aria-selected\")) cell.setAttribute(\"data-selected\", \"\");\n                else cell.removeAttribute(\"data-selected\");\n                this.isInvertingDragSelection = this.isDragShiftKeyPressed && closestCellElement.hasAttribute(\"aria-selected\");\n                window.document.body.classList.add(\"prevent-scroll\");\n                this.dragHighlightElement = this.initializeHighlightElement(this.dragHighlightElement, closestCellElement);\n                this.dragOriginCellElement = closestCellElement;\n                if (!this.isDragShiftKeyPressed) return;\n                this.updateHighlightElement(this.dragHighlightElement, closestCellElement, closestCellElement);\n                this.lastSelectedCellElement = closestCellElement;\n                this.updateSelectedCells(this.dragHighlightElement, this.isInvertingDragSelection, this.isDragShiftKeyPressed);\n            }\n            handlePointermove(event) {\n                if (!(event instanceof PointerEvent)) return;\n                if (!(event.target instanceof Element)) return;\n                event.target.releasePointerCapture(event.pointerId);\n                if (!this.isPointerDown) return;\n                if (!this.dragOriginCellElement) return;\n                if (!this.dragHighlightElement) return;\n                const closestCellElement = this.getClosestCellElementFromPoint(event);\n                if (!closestCellElement || !closestCellElement.matches((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR))) {\n                    if (!(this.lastSelectedCellElement instanceof HTMLElement)) return;\n                    const lastSelectedRowElement = this.lastSelectedCellElement?.closest('[role=\"row\"]');\n                    if (!(lastSelectedRowElement instanceof HTMLElement)) return;\n                    const gridRect = this.gridElement.getBoundingClientRect();\n                    const isAboveGrid = event.clientY < gridRect.top;\n                    const isBelowGrid = event.clientY > gridRect.bottom;\n                    const isOutOfGridYBounds = isAboveGrid || isBelowGrid;\n                    const isLeftOfGrid = event.clientX < gridRect.left;\n                    const isRightOfGrid = event.clientX > gridRect.right;\n                    const isOutOfGridXBounds = isLeftOfGrid || isRightOfGrid;\n                    const lastSelectedCellRect = this.lastSelectedCellElement.getBoundingClientRect();\n                    const isAboveCell = event.clientY < lastSelectedCellRect.top;\n                    const isBelowCell = event.clientY > lastSelectedCellRect.bottom;\n                    const isOutOfCellYBounds = isAboveCell || isBelowCell;\n                    const isLeftOfCell = event.clientX < lastSelectedCellRect.left;\n                    const isRightOfCell = event.clientX > lastSelectedCellRect.right;\n                    const isOutOfCellXBounds = isLeftOfCell || isRightOfCell;\n                    const lastSelectedColumnIndex = Array.from(lastSelectedRowElement.querySelectorAll((0, _constants.ANY_CELL_ELEMENT_SELECTOR))).indexOf(this.lastSelectedCellElement);\n                    const rowElements = Array.from(this.gridElement.querySelectorAll(`[role=\"row\"]:has(${(0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)})`));\n                    const selectedCellRowElement = this.lastSelectedCellElement.closest('[role=\"row\"]');\n                    if (!(selectedCellRowElement instanceof HTMLElement)) return;\n                    const selectedCellRowIndex = rowElements.indexOf(selectedCellRowElement);\n                    const targetRowIndex = isOutOfGridXBounds ? isAboveGrid ? 0 : rowElements.length - 1 : selectedCellRowIndex;\n                    const targetRowElement = rowElements[targetRowIndex];\n                    const targetColumnIndex = isOutOfGridYBounds ? lastSelectedColumnIndex : isLeftOfGrid ? 0 : lastSelectedRowElement.querySelectorAll((0, _constants.ANY_CELL_ELEMENT_SELECTOR)).length - 1;\n                    const target = Array.from(targetRowElement.querySelectorAll((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)))[targetColumnIndex];\n                    if (!(target instanceof HTMLElement)) return;\n                    const targetCellElement = target;\n                    if (!(targetCellElement instanceof HTMLElement)) return;\n                    this.updateHighlightElement(this.dragHighlightElement, targetCellElement, this.dragOriginCellElement || this.lastSelectedCellElement);\n                    this.updateSelectedCells(this.dragHighlightElement, this.isInvertingDragSelection, this.isDragShiftKeyPressed);\n                    return;\n                }\n                this.isDragging = true;\n                this.updateHighlightElement(this.dragHighlightElement, closestCellElement, this.dragOriginCellElement);\n                this.lastSelectedCellElement = closestCellElement;\n                this.updateSelectedCells(this.dragHighlightElement, this.isInvertingDragSelection, this.isDragShiftKeyPressed);\n            }\n            handlePointerup(event) {\n                if (!(event instanceof PointerEvent)) return;\n                if (!this.dragHighlightElement) return;\n                window.document.body.classList.remove(\"prevent-scroll\");\n                this.isPointerDown = false;\n                const closestCellElement = this.getClosestCellElementFromPoint(event);\n                if (!(closestCellElement instanceof HTMLElement)) {\n                    event.stopImmediatePropagation();\n                    event.stopPropagation();\n                    this.dragHighlightElement.remove();\n                    this.dragHighlightElement = null;\n                    this.dragOriginCellElement = null;\n                    this.lastSelectedCellElement?.focus();\n                    this.lastSelectedCellElement = null;\n                    return;\n                }\n                const allCells = Array.from(this.gridElement.querySelectorAll((0, _constants.SELECTABLE_CELL_ELEMENT_SELECTOR)));\n                for (const cell of allCells)if (cell.hasAttribute(\"aria-selected\")) cell.setAttribute(\"data-selected\", \"\");\n                else cell.removeAttribute(\"data-selected\");\n                if (this.isDragShiftKeyPressed || this.isDragging && this.dragOriginCellElement !== closestCellElement) {\n                    event.stopImmediatePropagation();\n                    event.stopPropagation();\n                }\n                this.isDragging = false;\n                if (!this.dragOriginCellElement) return;\n                this.updateHighlightElement(this.dragHighlightElement, closestCellElement, this.dragOriginCellElement);\n                this.lastSelectedCellElement = closestCellElement;\n                this.updateSelectedCells(this.dragHighlightElement, this.isInvertingDragSelection, this.isDragShiftKeyPressed);\n                this.dragHighlightElement.remove();\n                this.dragHighlightElement = null;\n                this.dragOriginCellElement = null;\n                this.lastSelectedCellElement = null;\n                closestCellElement.focus();\n            }\n        };\n    };\n}\n\n},{\"./constants\":\"9M7pK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[\"gUvsp\"], \"gUvsp\", \"parcelRequireb585\")\n\n//# sourceMappingURL=client.js.map\n","function isShadowRootModeEnum(value: unknown): value is ShadowRootMode {\r\n  return ['open', 'closed'].includes(value as string);\r\n}\r\n\r\nfunction dsdPolyfill(root: unknown) {\r\n  if (\r\n    !(root instanceof Element) &&\r\n    !(root instanceof DocumentFragment) &&\r\n    !(root instanceof Document)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (\r\n    HTMLTemplateElement.prototype.hasOwnProperty('shadowRootDelegatesFocus')\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const shadowRootTemplateElements = Array.from(\r\n    root.querySelectorAll('template[shadowrootmode]'),\r\n  );\r\n\r\n  for (const shadowRootTemplateElement of shadowRootTemplateElements) {\r\n    if (!(shadowRootTemplateElement instanceof HTMLTemplateElement)) {\r\n      continue;\r\n    }\r\n\r\n    const mode = shadowRootTemplateElement.getAttribute('shadowrootmode');\r\n\r\n    if (!isShadowRootModeEnum(mode)) {\r\n      continue;\r\n    }\r\n\r\n    const delegatesFocus = shadowRootTemplateElement.hasAttribute(\r\n      'shadowrootdelegatesfocus',\r\n    );\r\n\r\n    const parentNode = shadowRootTemplateElement.parentNode;\r\n\r\n    if (!(parentNode instanceof Element)) {\r\n      continue;\r\n    }\r\n\r\n    const shadowRoot = parentNode.attachShadow({ mode, delegatesFocus });\r\n    shadowRoot.appendChild(shadowRootTemplateElement.content);\r\n    shadowRootTemplateElement.remove();\r\n    dsdPolyfill(shadowRoot);\r\n  }\r\n}\r\n\r\ndsdPolyfill(document);\r\n\r\nimport 'elements/AutoSaveTextElement';\r\nimport 'elements/AutoSaveCheckboxElement';\r\nimport 'elements/AutoSaveSearchElement';\r\nimport 'elements/ClearSearchElement';\r\nimport 'elements/UnloadHandlerElement';\r\nimport 'elements/PostFormElement';\r\nimport 'elements/SelectAllCheckboxElement';\r\nimport 'elements/ModalDialogElement';\r\nimport 'elements/FlyoutMenuElement';\r\nimport 'elements/ViewContainerElement';\r\n","import { BaseAutoSaveElement } from 'elements/BaseAutoSaveElement';\r\n\r\nexport class AutoSaveTextElement extends BaseAutoSaveElement {\r\n  private boundKeydownHandler = this.handleKeydown.bind(this);\r\n  private boundClickHandler = this.handleClick.bind(this);\r\n  private boundBlurHandler = this.handleBlur.bind(this);\r\n\r\n  connectedCallback() {\r\n    this.inputElement.addEventListener('change', this.boundChangeHandler);\r\n    this.inputElement.addEventListener('keydown', this.boundKeydownHandler);\r\n    this.inputElement.addEventListener('blur', this.boundBlurHandler);\r\n    this.inputElement.addEventListener('pointerup', this.boundClickHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.inputElement.removeEventListener('change', this.boundChangeHandler);\r\n    this.inputElement.removeEventListener('keydown', this.boundKeydownHandler);\r\n    this.inputElement.removeEventListener('blur', this.boundBlurHandler);\r\n    this.inputElement.removeEventListener('pointerup', this.boundClickHandler);\r\n  }\r\n\r\n  enterEditMode() {\r\n    this.inputElement.removeAttribute('data-read-only');\r\n  }\r\n\r\n  exitEditMode() {\r\n    this.inputElement.setAttribute('data-read-only', '');\r\n\r\n    this.submitData().then(() => {\r\n      this.markClean();\r\n    });\r\n  }\r\n\r\n  toggleEditMode() {\r\n    if (this.inputElement.dataset.readOnly === '') {\r\n      this.enterEditMode();\r\n    } else {\r\n      this.exitEditMode();\r\n    }\r\n  }\r\n\r\n  handleClick() {\r\n    this.enterEditMode();\r\n  }\r\n\r\n  handleBlur() {\r\n    this.exitEditMode();\r\n  }\r\n\r\n  handleKeydown(event: Event) {\r\n    if (!(event instanceof KeyboardEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (event.key === 'Escape') {\r\n      if (this.inputElement.dataset.readOnly !== '') {\r\n        this.exitEditMode();\r\n      }\r\n    }\r\n\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.toggleEditMode();\r\n\r\n      if (this.inputElement.dataset.readOnly === '') {\r\n        this.dispatchEvent(\r\n          new CustomEvent('auto-save-text:toggle-edit-mode', {\r\n            composed: true,\r\n            bubbles: true,\r\n          }),\r\n        );\r\n\r\n        this.submitData().then(() => {\r\n          this.dispatchEvent(\r\n            new CustomEvent('auto-save-text:save', {\r\n              composed: true,\r\n              bubbles: true,\r\n            }),\r\n          );\r\n        });\r\n      } else {\r\n        this.inputElement.selectionStart = this.inputElement.selectionEnd =\r\n          this.inputElement.value.length;\r\n      }\r\n    }\r\n\r\n    if (event.key.length === 1 && /[a-zA-Z0-9-_ ]/.test(event.key)) {\r\n      if (this.inputElement.dataset.readOnly === '') {\r\n        this.toggleEditMode();\r\n        this.inputElement.value = '';\r\n        this.inputElement.selectionStart = this.inputElement.selectionEnd =\r\n          this.inputElement.value.length;\r\n      }\r\n    }\r\n  }\r\n\r\n  async submitData() {\r\n    const value = this.inputElement.value;\r\n    const formElement = this.inputElement.form;\r\n\r\n    if (!formElement) {\r\n      this.markDirty();\r\n      return;\r\n    }\r\n\r\n    const formAction = formElement.getAttribute('action');\r\n\r\n    if (!formAction) {\r\n      return;\r\n    }\r\n\r\n    const method = new FormData(formElement).get('_method')?.toString() || '';\r\n\r\n    if (['PUT', 'PATCH'].includes(method)) {\r\n      return this.patch(formAction, value)\r\n        .then(() => {\r\n          this.inputElement.setAttribute('value', value);\r\n          this.markClean();\r\n        })\r\n        .catch(() => {\r\n          this.markDirty();\r\n        });\r\n    } else {\r\n      this.markDirty();\r\n    }\r\n  }\r\n}\r\n\r\nwindow.customElements.define('auto-save-text', AutoSaveTextElement);\r\n","import { getUniqueId } from 'shared/getUniqueId';\r\nimport { DIRTY_ELEMENTS_KEY } from 'elements/UnloadHandlerElement';\r\n\r\nexport class BaseAutoSaveElement extends HTMLElement {\r\n  protected inputElement: HTMLInputElement;\r\n  protected inputId: string;\r\n  protected unloadHandlerElement: HTMLElement;\r\n  protected boundChangeHandler: (event: Event) => void;\r\n  protected boundInputHandler: (event: Event) => void;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    if (!this.shadowRoot) {\r\n      throw new Error('Declarative shadow root not supported');\r\n    }\r\n\r\n    const slotElement = this.shadowRoot.querySelector('slot');\r\n\r\n    if (!(slotElement instanceof HTMLSlotElement)) {\r\n      throw new Error('No slot element provided');\r\n    }\r\n\r\n    const assignedNodes = slotElement.assignedNodes();\r\n\r\n    if (!assignedNodes || !assignedNodes.length) {\r\n      throw new Error('No content provided');\r\n    }\r\n\r\n    function guardIsHTMLInputElement(node: Node): node is HTMLInputElement {\r\n      return node instanceof HTMLInputElement;\r\n    }\r\n\r\n    const inputElement = assignedNodes.find(guardIsHTMLInputElement);\r\n\r\n    if (!inputElement) {\r\n      throw new Error('No input element provided');\r\n    }\r\n\r\n    const unloadHandlerElement =\r\n      window.document.querySelector('unload-handler');\r\n\r\n    if (!(unloadHandlerElement instanceof HTMLElement)) {\r\n      throw new Error('No unload handler element found');\r\n    }\r\n\r\n    this.inputElement = inputElement;\r\n    this.inputId = inputElement.id || getUniqueId();\r\n    this.unloadHandlerElement = unloadHandlerElement;\r\n    this.boundChangeHandler = this.handleChange.bind(this);\r\n    this.boundInputHandler = this.handleInput.bind(this);\r\n  }\r\n\r\n  protected handleChange() {}\r\n\r\n  protected handleInput() {}\r\n\r\n  protected markDirty() {\r\n    const prev =\r\n      this.unloadHandlerElement.getAttribute(DIRTY_ELEMENTS_KEY) || '';\r\n    const dirtyElementsArray = !prev ? [] : prev.split(',');\r\n    dirtyElementsArray.push(this.inputId);\r\n    const uniqueDirtyElementsArray = Array.from(new Set(dirtyElementsArray));\r\n    const dirtyElementsString = uniqueDirtyElementsArray.join(',');\r\n    this.unloadHandlerElement.setAttribute(\r\n      DIRTY_ELEMENTS_KEY,\r\n      dirtyElementsString,\r\n    );\r\n    this.inputElement.setAttribute('data-dirty', '');\r\n  }\r\n\r\n  protected markClean() {\r\n    const prev =\r\n      this.unloadHandlerElement.getAttribute(DIRTY_ELEMENTS_KEY) || '';\r\n    const dirtyElementsArray = !prev ? [] : prev.split(',');\r\n    const dirtyElementsString = dirtyElementsArray\r\n      .filter((id) => id !== this.inputId)\r\n      .join(',');\r\n    this.unloadHandlerElement.setAttribute(\r\n      DIRTY_ELEMENTS_KEY,\r\n      dirtyElementsString,\r\n    );\r\n    this.inputElement.removeAttribute('data-dirty');\r\n  }\r\n\r\n  protected async patch(url: string, value: string) {\r\n    const formData = new FormData();\r\n    formData.append('_method', 'PATCH');\r\n    formData.append(this.inputElement.name, value);\r\n\r\n    return window\r\n      .fetch(url, {\r\n        method: 'POST',\r\n        body: formData,\r\n      })\r\n      .then((res) => {\r\n        if (res.status === 404) {\r\n          throw new Error('Not found');\r\n        }\r\n\r\n        return res;\r\n      });\r\n  }\r\n}\r\n","import { v4 as uuid } from 'uuid';\n\nexport function getUniqueId() {\n  return `${Date.now()}-${uuid()}`;\n}\n","export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","export const DIRTY_ELEMENTS_KEY = 'dirty-elements';\n\nexport class UnloadHandlerElement extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n  static get observedAttributes() {\n    return ['dirty-elements'];\n  }\n\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (name === 'dirty-elements') {\n      if (newValue) {\n        this.triggerBeforeUnload();\n      } else {\n        this.removeBeforeUnload();\n      }\n    }\n  }\n\n  triggerBeforeUnload() {\n    if (!window.onbeforeunload) {\n      window.onbeforeunload = this.boundBeforeUnloadHandler;\n    }\n  }\n\n  removeBeforeUnload() {\n    if (window.onbeforeunload) {\n      window.onbeforeunload = null;\n    }\n  }\n\n  handleBeforeUnload(event: BeforeUnloadEvent) {\n    event.preventDefault();\n    event.returnValue = '';\n  }\n\n  private boundBeforeUnloadHandler = this.handleBeforeUnload.bind(this);\n}\n\nwindow.customElements.define('unload-handler', UnloadHandlerElement);\n","import escapeStringRegexp from 'escape-string-regexp';\nimport { BaseAutoSaveElement } from 'elements/BaseAutoSaveElement';\n\nexport class AutoSaveCheckboxElement extends BaseAutoSaveElement {\n  private formElement: HTMLFormElement | undefined;\n  private boundMarkClean = this.markClean.bind(this);\n\n  constructor() {\n    super();\n\n    const formElement = this.inputElement.form;\n\n    if (!formElement) {\n      return;\n    }\n\n    this.formElement = formElement;\n  }\n\n  connectedCallback() {\n    this.inputElement.addEventListener('input', this.boundInputHandler);\n\n    if (this.formElement) {\n      this.formElement.addEventListener('submit', this.boundMarkClean);\n    }\n  }\n\n  disconnectedCallback() {\n    this.inputElement.removeEventListener('input', this.boundInputHandler);\n\n    if (this.formElement) {\n      this.formElement.removeEventListener('submit', this.boundMarkClean);\n    }\n  }\n\n  override handleInput() {\n    const isChecked = this.inputElement.checked;\n    const value = isChecked ? this.inputElement.value : '';\n    const formElement = this.inputElement.form;\n\n    if (!formElement) {\n      this.markDirty();\n      return;\n    }\n\n    const formAction = formElement.getAttribute('action');\n\n    if (!formAction) {\n      return;\n    }\n\n    const method = new FormData(formElement).get('_method')?.toString() || '';\n\n    if (['PUT', 'PATCH'].includes(method)) {\n      this.patch(formAction, value)\n        .then(() => {\n          window.location.reload();\n        })\n        .catch(() => {\n          this.markDirty();\n        });\n    } else {\n      if (this.inputElement.checked !== this.inputElement.defaultChecked) {\n        this.markDirty();\n      } else {\n        this.markClean();\n      }\n    }\n  }\n}\n\nwindow.customElements.define('auto-save-checkbox', AutoSaveCheckboxElement);\n","import debounce from 'debounce';\r\nimport { BaseAutoSaveElement } from 'elements/BaseAutoSaveElement';\r\n\r\nexport class AutoSaveSearchElement extends BaseAutoSaveElement {\r\n  private debouncedInputHandler = debounce(this.boundInputHandler, 350);\r\n\r\n  connectedCallback() {\r\n    this.inputElement.addEventListener('input', this.debouncedInputHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.inputElement.removeEventListener('input', this.debouncedInputHandler);\r\n  }\r\n\r\n  override handleInput() {\r\n    const formElement = this.inputElement.form;\r\n\r\n    if (!formElement) {\r\n      return;\r\n    }\r\n\r\n    formElement.submit();\r\n  }\r\n}\r\n\r\nwindow.customElements.define('auto-save-search', AutoSaveSearchElement);\r\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","export class ClearSearchElement extends HTMLElement {\r\n  private buttonElement?: HTMLButtonElement;\r\n  private formElement?: HTMLFormElement;\r\n  private searchInputElement?: HTMLInputElement & {\r\n    type: 'search';\r\n  };\r\n  private boundClickHandler = this.handleClick.bind(this);\r\n\r\n  connectedCallback() {\r\n    const buttonElement = this.querySelector('button');\r\n\r\n    if (!(buttonElement instanceof HTMLButtonElement)) {\r\n      throw new Error('No button element provided');\r\n    }\r\n\r\n    const formElement = buttonElement.form;\r\n\r\n    if (!(formElement instanceof HTMLFormElement)) {\r\n      throw new Error('No form element provided');\r\n    }\r\n\r\n    function guardIsHTMLSearchInputElement(\r\n      node: Node,\r\n    ): node is HTMLInputElement & {\r\n      type: 'search';\r\n    } {\r\n      return node instanceof HTMLInputElement && node.type === 'search';\r\n    }\r\n\r\n    const searchInputElement = Array.from(formElement.elements).find(\r\n      guardIsHTMLSearchInputElement,\r\n    );\r\n\r\n    if (!searchInputElement) {\r\n      throw new Error('No search input element provided');\r\n    }\r\n\r\n    this.buttonElement = buttonElement;\r\n    this.formElement = formElement;\r\n    this.searchInputElement = searchInputElement;\r\n\r\n    this.buttonElement.addEventListener('click', this.boundClickHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.buttonElement) {\r\n      this.buttonElement.removeEventListener('click', this.boundClickHandler);\r\n    }\r\n  }\r\n\r\n  handleClick() {\r\n    if (!this.searchInputElement) {\r\n      throw new Error('No search input element provided');\r\n    }\r\n\r\n    if (!this.formElement) {\r\n      throw new Error('No form element provided');\r\n    }\r\n\r\n    this.searchInputElement.removeAttribute('name');\r\n    this.formElement.submit();\r\n  }\r\n}\r\n\r\nwindow.customElements.define('clear-search', ClearSearchElement);\r\n","import { DIRTY_ELEMENTS_KEY } from 'elements/UnloadHandlerElement';\n\nexport class PostFormElement extends HTMLElement {\n  private formElement?: HTMLFormElement;\n  private boundSubmitHandler = this.handleFormSubmit.bind(this);\n\n  connectedCallback() {\n    const formElement = this.querySelector('form');\n\n    if (!(formElement instanceof HTMLFormElement)) {\n      throw new Error('PostFormElement must contain a form element');\n    }\n\n    this.formElement = formElement;\n    this.formElement.addEventListener('submit', this.boundSubmitHandler);\n  }\n\n  disconnectedCallback() {\n    if (!this.formElement) {\n      return;\n    }\n\n    this.formElement.removeEventListener('submit', this.boundSubmitHandler);\n  }\n\n  handleFormSubmit(event: Event) {\n    event.preventDefault();\n\n    if (!this.formElement) {\n      return;\n    }\n\n    const unloadHandler = window.document.querySelector('unload-handler');\n\n    if (!unloadHandler) {\n      return;\n    }\n\n    const prev = unloadHandler.getAttribute(DIRTY_ELEMENTS_KEY) || '';\n    const dirtyElementsArray = !prev ? [] : prev.split(',');\n\n    const formElements = Array.from(this.formElement.elements);\n\n    const dirtyElementsString = dirtyElementsArray\n      .filter((id) => {\n        const formElement = window.document.getElementById(id);\n        return formElement && !formElements.includes(formElement);\n      })\n      .join(',');\n\n    unloadHandler.setAttribute(DIRTY_ELEMENTS_KEY, dirtyElementsString);\n\n    this.formElement.submit();\n  }\n}\n\nwindow.customElements.define('post-form', PostFormElement);\n","export class SelectAllCheckboxElement extends HTMLElement {\r\n  private inputElement: HTMLInputElement;\r\n  private formElement: HTMLFormElement;\r\n  private checkboxElements: HTMLInputElement[];\r\n  private boundChangeHandler = this.handleChange.bind(this);\r\n  private boundControllableCheckboxChangeHandler =\r\n    this.handleControllableCheckboxChange.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    if (!this.shadowRoot) {\r\n      throw new Error('Declarative shadow root not supported');\r\n    }\r\n\r\n    const inputElement = this.querySelector('input');\r\n\r\n    if (!(inputElement instanceof HTMLInputElement)) {\r\n      throw new Error('No input element provided');\r\n    }\r\n\r\n    const formElement = inputElement.form;\r\n\r\n    if (!formElement) {\r\n      throw new Error('No form element provided');\r\n    }\r\n\r\n    const inputName = inputElement.getAttribute('name');\r\n    inputElement.removeAttribute('name');\r\n\r\n    function isControllableCheckboxElement(\r\n      element: unknown,\r\n    ): element is HTMLInputElement {\r\n      return (\r\n        element instanceof HTMLInputElement &&\r\n        element.type === 'checkbox' &&\r\n        element.name === inputName\r\n      );\r\n    }\r\n\r\n    this.checkboxElements = Array.from(formElement.elements).filter(\r\n      isControllableCheckboxElement,\r\n    );\r\n\r\n    this.inputElement = inputElement;\r\n    this.formElement = formElement;\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.inputElement.addEventListener('change', this.boundChangeHandler);\r\n\r\n    for (const checkboxFormElement of this.checkboxElements) {\r\n      checkboxFormElement.addEventListener(\r\n        'change',\r\n        this.boundControllableCheckboxChangeHandler,\r\n      );\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.inputElement.removeEventListener('change', this.boundChangeHandler);\r\n\r\n    for (const checkboxFormElement of this.checkboxElements) {\r\n      checkboxFormElement.removeEventListener(\r\n        'change',\r\n        this.boundControllableCheckboxChangeHandler,\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange() {\r\n    const isChecked = this.inputElement.checked;\r\n\r\n    for (const checkboxFormElement of this.checkboxElements) {\r\n      checkboxFormElement.checked = isChecked;\r\n    }\r\n  }\r\n\r\n  handleControllableCheckboxChange() {\r\n    const isAllChecked = this.checkboxElements.every(\r\n      (checkboxFormElement) => checkboxFormElement.checked,\r\n    );\r\n\r\n    this.inputElement.checked = isAllChecked;\r\n  }\r\n}\r\n\r\nwindow.customElements.define('select-all-checkbox', SelectAllCheckboxElement);\r\n","export class ModalDialogElement extends HTMLElement {\r\n  private boundKeydownHandler = this.handleKeydown.bind(this);\r\n  private dialogElement: HTMLDialogElement;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const dialogElement = this.querySelector('dialog');\r\n\r\n    if (!(dialogElement instanceof HTMLDialogElement)) {\r\n      throw new Error('Could not find dialog element');\r\n    }\r\n\r\n    this.dialogElement = dialogElement;\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener('keydown', this.boundKeydownHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.removeEventListener('keydown', this.boundKeydownHandler);\r\n  }\r\n\r\n  handleKeydown(event: Event) {\r\n    if (!(event instanceof KeyboardEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (event.key === 'Escape') {\r\n      const closeDialogFormElement = this.dialogElement.querySelector('form');\r\n\r\n      if (!(closeDialogFormElement instanceof HTMLFormElement)) {\r\n        return;\r\n      }\r\n\r\n      closeDialogFormElement.submit();\r\n    }\r\n  }\r\n}\r\n\r\nwindow.customElements.define('modal-dialog', ModalDialogElement);\r\n","export class FlyoutMenuElement extends HTMLElement {\r\n  private detailsElement: HTMLDetailsElement;\r\n  private summaryElement: HTMLElement;\r\n  private menuItemElements: HTMLElement[];\r\n  private boundKeydownHandler = this.handleKeydown.bind(this);\r\n  private boundToggleHandler = this.handleToggle.bind(this);\r\n  private boundClickHandler = this.handleClick.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const detailsElement = this.querySelector('details');\r\n\r\n    if (!(detailsElement instanceof HTMLDetailsElement)) {\r\n      throw new Error('Could not find details element');\r\n    }\r\n\r\n    this.detailsElement = detailsElement;\r\n\r\n    const summaryElement = this.querySelector('summary');\r\n\r\n    if (!(summaryElement instanceof HTMLElement)) {\r\n      throw new Error('Could not find summary element');\r\n    }\r\n\r\n    this.summaryElement = summaryElement;\r\n\r\n    const menuElement = this.querySelector('[role=\"menu\"]');\r\n\r\n    if (!(menuElement instanceof HTMLElement)) {\r\n      throw new Error('Could not find menu element');\r\n    }\r\n\r\n    function isHtmlElement(\r\n      element: Element | HTMLElement,\r\n    ): element is HTMLElement {\r\n      return element instanceof HTMLElement;\r\n    }\r\n\r\n    const menuItemElements = Array.from(\r\n      menuElement.querySelectorAll('[role=\"menuitem\"]'),\r\n    ).filter(isHtmlElement);\r\n\r\n    this.menuItemElements = menuItemElements;\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener('keydown', this.boundKeydownHandler);\r\n    this.summaryElement.addEventListener('click', this.boundClickHandler);\r\n    this.detailsElement.addEventListener('toggle', this.boundToggleHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.removeEventListener('keydown', this.boundKeydownHandler);\r\n    this.summaryElement.removeEventListener('click', this.boundClickHandler);\r\n    this.detailsElement.removeEventListener('toggle', this.boundToggleHandler);\r\n  }\r\n\r\n  positionPopover() {\r\n    const { left, top, height, width } =\r\n      this.summaryElement.getBoundingClientRect();\r\n\r\n    const translateX =\r\n      left > window.innerWidth / 2 ? `calc(-100% - ${width}px)` : '0px';\r\n    const translateY =\r\n      top > window.innerHeight / 2 ? `calc(-100% + ${height}px)` : '0px';\r\n    const transformValue = `translateX(${translateX}) translateY(${translateY})`;\r\n\r\n    this.style.setProperty('--popover-transform', transformValue);\r\n    this.style.setProperty('--popover-left', `${left + width}px`);\r\n    this.style.setProperty('--popover-top', `${top}px`);\r\n  }\r\n\r\n  handleClick() {\r\n    this.positionPopover();\r\n  }\r\n\r\n  handleKeydown(event: Event) {\r\n    if (!(event instanceof KeyboardEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (!this.detailsElement.open) {\r\n      if ([' ', 'Enter'].includes(event.key)) {\r\n        this.positionPopover();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (event.key === 'Escape') {\r\n      this.summaryElement.focus();\r\n      this.detailsElement.open = false;\r\n    }\r\n\r\n    const menuItemElement = event.composedPath().find((element) => {\r\n      return (\r\n        element instanceof HTMLElement && element.matches('[role=\"menuitem\"]')\r\n      );\r\n    });\r\n\r\n    if (!(menuItemElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const summaryElement = event.composedPath().find((element) => {\r\n      return element instanceof HTMLElement && element.closest('summary');\r\n    });\r\n\r\n    if (summaryElement) {\r\n      return;\r\n    }\r\n\r\n    if (event.key === 'ArrowUp') {\r\n      event.preventDefault();\r\n      this.handleArrowUp(menuItemElement);\r\n    } else if (event.key === 'ArrowDown') {\r\n      event.preventDefault();\r\n      this.handleArrowDown(menuItemElement);\r\n    }\r\n  }\r\n\r\n  handleArrowUp(menuItemElement: HTMLElement) {\r\n    const menuItemElementIndex = this.menuItemElements.indexOf(menuItemElement);\r\n\r\n    if (menuItemElementIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    const previousMenuItemElement =\r\n      this.menuItemElements[menuItemElementIndex - 1] ||\r\n      this.menuItemElements[this.menuItemElements.length - 1];\r\n\r\n    if (!(previousMenuItemElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    previousMenuItemElement.focus();\r\n  }\r\n\r\n  handleArrowDown(menuItemElement: HTMLElement) {\r\n    const menuItemElementIndex = this.menuItemElements.indexOf(menuItemElement);\r\n    const nextMenuItemElement =\r\n      this.menuItemElements[menuItemElementIndex + 1] ||\r\n      this.menuItemElements[0];\r\n\r\n    if (!(nextMenuItemElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    nextMenuItemElement.focus();\r\n  }\r\n\r\n  handleToggle() {\r\n    if (this.detailsElement.open) {\r\n      const [firstMenuItem] = this.menuItemElements;\r\n\r\n      if (!(firstMenuItem instanceof HTMLElement)) {\r\n        return;\r\n      }\r\n\r\n      firstMenuItem.focus();\r\n    }\r\n  }\r\n}\r\n\r\nwindow.customElements.define('flyout-menu', FlyoutMenuElement);\r\n","import {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  isHtmlElement,\r\n  INPUT_SELECTOR,\r\n} from './constants';\r\nimport { SelectionMixinBaseClass } from './SelectionMixinBaseClass';\r\nimport { DragSelectionMixin } from './DragSelectionMixin';\r\nimport { KeyboardSelectionMixin } from './KeyboardSelectionMixin';\r\n\r\n@DragSelectionMixin()\r\n@KeyboardSelectionMixin()\r\nexport class ViewContainerElement extends SelectionMixinBaseClass {\r\n  private boundHandleAutoSaveTextSave = this.handleAutoSaveTextSave.bind(this);\r\n  private boundClearCellsHandler = this.handleClearCells.bind(this);\r\n  private boundHandleAutoSaveTextToggleEditMode =\r\n    this.handleAutoSaveTextToggleEditMode.bind(this);\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\r\n      'view-container:clear-cells',\r\n      this.boundClearCellsHandler,\r\n      {\r\n        capture: true,\r\n      },\r\n    );\r\n\r\n    this.addEventListener(\r\n      'auto-save-text:save',\r\n      this.boundHandleAutoSaveTextSave,\r\n    );\r\n\r\n    this.addEventListener(\r\n      'auto-save-text:toggle-edit-mode',\r\n      this.boundHandleAutoSaveTextToggleEditMode,\r\n    );\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.removeEventListener(\r\n      'view-container:clear-cells',\r\n      this.boundClearCellsHandler,\r\n      {\r\n        capture: true,\r\n      },\r\n    );\r\n    this.removeEventListener(\r\n      'auto-save-text:save',\r\n      this.boundHandleAutoSaveTextSave,\r\n    );\r\n\r\n    this.removeEventListener(\r\n      'auto-save-text:toggle-edit-mode',\r\n      this.boundHandleAutoSaveTextToggleEditMode,\r\n    );\r\n  }\r\n\r\n  handleAutoSaveTextSave(event: Event) {\r\n    if (!(event instanceof CustomEvent)) {\r\n      return;\r\n    }\r\n\r\n    const { target } = event;\r\n\r\n    if (!(target instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const rowElement = target.closest('[role=\"row\"]');\r\n\r\n    if (!(rowElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const gridRows = Array.from(\r\n      this.gridElement.querySelectorAll('[role=\"row\"]'),\r\n    );\r\n\r\n    const rowIndex = gridRows.indexOf(rowElement);\r\n\r\n    if (Number(rowIndex) !== gridRows.length - 1) {\r\n      return;\r\n    }\r\n\r\n    const addRowButtonElement = this.querySelector('#add-new-row-button');\r\n\r\n    if (!(addRowButtonElement instanceof HTMLButtonElement)) {\r\n      throw new Error('Could not find add new row button element');\r\n    }\r\n\r\n    const addRowFormElement = addRowButtonElement.form;\r\n\r\n    if (!(addRowFormElement instanceof HTMLFormElement)) {\r\n      throw new Error('Could not find add new row form element');\r\n    }\r\n\r\n    addRowFormElement.submit();\r\n  }\r\n\r\n  handleClearCells(event: Event) {\r\n    if (!(event instanceof CustomEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(event.detail)) {\r\n      return;\r\n    }\r\n\r\n    const cellElements = event.detail.filter(isHtmlElement);\r\n\r\n    for (const cellElement of cellElements) {\r\n      const autoSaveTextElement = cellElement.querySelector(INPUT_SELECTOR);\r\n\r\n      if (!(autoSaveTextElement instanceof HTMLInputElement)) {\r\n        continue;\r\n      }\r\n\r\n      autoSaveTextElement.value = '';\r\n    }\r\n\r\n    const clearCellsButtonElement = this.querySelector('#clear-cells-button');\r\n\r\n    if (!(clearCellsButtonElement instanceof HTMLButtonElement)) {\r\n      throw new Error('Could not find clear cells button element');\r\n    }\r\n\r\n    const clearCellsFormElement = clearCellsButtonElement.form;\r\n\r\n    if (!(clearCellsFormElement instanceof HTMLFormElement)) {\r\n      throw new Error('Could not find add new row form element');\r\n    }\r\n\r\n    const hiddenInputElement = clearCellsFormElement.querySelector(\r\n      'input[type=\"hidden\"][name=\"cell[]\"]',\r\n    );\r\n\r\n    if (!(hiddenInputElement instanceof HTMLInputElement)) {\r\n      throw new Error('Could not find hidden input element');\r\n    }\r\n\r\n    const cellsValue = cellElements\r\n      .map((cellElement) => {\r\n        const rowId = cellElement.getAttribute('data-row-id');\r\n\r\n        if (!rowId) {\r\n          throw new Error('Could not find id attribute');\r\n        }\r\n\r\n        const propertyId = cellElement.getAttribute('data-property-id');\r\n\r\n        if (!propertyId) {\r\n          throw new Error('Could not find id attribute');\r\n        }\r\n\r\n        return rowId + ':' + propertyId;\r\n      })\r\n      .join(',');\r\n\r\n    hiddenInputElement.setAttribute('value', cellsValue);\r\n\r\n    fetch(clearCellsFormElement.action, {\r\n      method: clearCellsFormElement.method,\r\n      body: new FormData(clearCellsFormElement),\r\n    });\r\n  }\r\n\r\n  handleAutoSaveTextToggleEditMode(event: Event) {\r\n    if (!(event instanceof CustomEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (!(event.target instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const cellElement = event.target.closest(SELECTABLE_CELL_ELEMENT_SELECTOR);\r\n\r\n    if (!(cellElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const rowElement = cellElement.closest('[role=\"row\"]');\r\n\r\n    if (!(rowElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\r\n\r\n    const nextRowElement = rowElement.nextElementSibling;\r\n\r\n    if (!(nextRowElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const nextCellElement = nextRowElement.children[cellIndex];\r\n\r\n    if (!(nextCellElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    nextCellElement.focus();\r\n  }\r\n}\r\n\r\nwindow.customElements.define('view-container', ViewContainerElement);\r\n","export const ANY_CELL_ELEMENT_SELECTOR =\r\n  '[role=\"gridcell\"], [role=\"columnheader\"], [role=\"rowheader\"]';\r\n\r\nexport const SELECTABLE_CELL_ELEMENT_SELECTOR = `[data-selectable]:is(${ANY_CELL_ELEMENT_SELECTOR})`;\r\n\r\nexport const INPUT_SELECTOR =\r\n  ':is(:is(auto-save-search, auto-save-text) input, input[type=\"checkbox\"])';\r\n\r\nexport const FLYOUT_MENU_SELECTOR = 'flyout-menu [role=\"menu\"]';\r\n\r\nexport function isInFlyoutMenu(element: Element | HTMLElement | EventTarget) {\r\n  if (!(element instanceof Element)) {\r\n    return false;\r\n  }\r\n\r\n  const flyoutMenuElement = element.closest(FLYOUT_MENU_SELECTOR);\r\n\r\n  return flyoutMenuElement instanceof HTMLElement;\r\n}\r\n\r\nexport function isHtmlElement(element: unknown): element is HTMLElement {\r\n  return element instanceof HTMLElement;\r\n}\r\n","import {\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  isHtmlElement,\r\n} from './constants';\r\n\r\nexport class SelectionMixinBaseClass extends HTMLElement {\r\n  gridElement: HTMLElement;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const gridElement = this.querySelector('[role=\"grid\"]');\r\n\r\n    if (!(gridElement instanceof HTMLElement)) {\r\n      throw new Error('Could not find grid element');\r\n    }\r\n\r\n    this.gridElement = gridElement;\r\n  }\r\n\r\n  getClosestCellElementFromPoint(event: Event) {\r\n    if (event instanceof PointerEvent) {\r\n      let closestCellElement: HTMLElement | null = null;\r\n\r\n      const touchTarget = window.document.elementFromPoint(\r\n        event.clientX,\r\n        event.clientY,\r\n      );\r\n\r\n      if (touchTarget instanceof HTMLElement) {\r\n        closestCellElement = touchTarget.closest(ANY_CELL_ELEMENT_SELECTOR);\r\n      }\r\n\r\n      return closestCellElement;\r\n    } else {\r\n      return this.getClosestCellElementFromComposedPath(event);\r\n    }\r\n  }\r\n\r\n  getClosestCellElementFromComposedPath(event: Event) {\r\n    const composedPath = event.composedPath();\r\n\r\n    const closestCellElement = composedPath.find((element) => {\r\n      if (!(element instanceof HTMLElement)) {\r\n        return false;\r\n      }\r\n\r\n      return element.matches(ANY_CELL_ELEMENT_SELECTOR);\r\n    });\r\n\r\n    if (!(closestCellElement instanceof HTMLElement)) {\r\n      return null;\r\n    }\r\n\r\n    return closestCellElement;\r\n  }\r\n\r\n  updateHighlightElement(\r\n    highlightElement: HTMLElement | null,\r\n    cellElement: HTMLElement,\r\n    draggedCellElement: HTMLElement,\r\n  ) {\r\n    if (!highlightElement) {\r\n      return;\r\n    }\r\n\r\n    const closestRowElement = cellElement.closest('[role=\"row\"]');\r\n\r\n    if (!(closestRowElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const draggedRow = draggedCellElement.closest('[role=\"row\"]');\r\n\r\n    if (!(draggedRow instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const closestCellColumnIndex = Array.from(\r\n      closestRowElement.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n    ).indexOf(cellElement);\r\n    const draggedCellColumnIndex = Array.from(\r\n      draggedRow.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n    ).indexOf(draggedCellElement);\r\n\r\n    const closestCellLeft = cellElement.getBoundingClientRect().left;\r\n    const closestCellRight = cellElement.getBoundingClientRect().right;\r\n\r\n    const draggedCellLeft = draggedCellElement.getBoundingClientRect().left;\r\n    const draggedCellRight = draggedCellElement.getBoundingClientRect().right;\r\n\r\n    const closestCellTop = cellElement.getBoundingClientRect().top;\r\n    const closestCellBottom = cellElement.getBoundingClientRect().bottom;\r\n\r\n    const draggedCellTop = draggedCellElement.getBoundingClientRect().top;\r\n    const draggedCellBottom = draggedCellElement.getBoundingClientRect().bottom;\r\n\r\n    const isSameCell = cellElement === draggedCellElement;\r\n    const isDraggedCellBeforeClosestCell =\r\n      draggedCellColumnIndex < closestCellColumnIndex && !isSameCell;\r\n    const isDraggedCellAfterClosestCell =\r\n      draggedCellColumnIndex > closestCellColumnIndex && !isSameCell;\r\n    const isDraggedCellAboveClosestCell =\r\n      draggedCellTop < closestCellTop && !isSameCell;\r\n    const isDraggedCellBelowClosestCell =\r\n      draggedCellBottom > closestCellBottom && !isSameCell;\r\n\r\n    const left = isSameCell\r\n      ? draggedCellLeft\r\n      : isDraggedCellBeforeClosestCell\r\n        ? draggedCellLeft\r\n        : closestCellLeft;\r\n\r\n    const right = isSameCell\r\n      ? draggedCellRight\r\n      : isDraggedCellAfterClosestCell\r\n        ? draggedCellRight\r\n        : closestCellRight;\r\n\r\n    const top = isSameCell\r\n      ? draggedCellTop\r\n      : isDraggedCellAboveClosestCell\r\n        ? draggedCellTop\r\n        : closestCellTop;\r\n\r\n    const bottom = isSameCell\r\n      ? draggedCellBottom\r\n      : isDraggedCellBelowClosestCell\r\n        ? draggedCellBottom\r\n        : closestCellBottom;\r\n\r\n    highlightElement.style.left = `${left}px`;\r\n    highlightElement.style.top = `${top}px`;\r\n    highlightElement.style.width = `${right - left}px`;\r\n    highlightElement.style.height = `${bottom - top}px`;\r\n\r\n    if (right - left === 0 || bottom - top === 0) {\r\n      console.log('zero width or height', {\r\n        draggedCellElement,\r\n        cellElement,\r\n      });\r\n    }\r\n\r\n    highlightElement.style.border = '3px solid var(--swatch-interactive)';\r\n  }\r\n\r\n  initializeHighlightElement(\r\n    highlightElement: HTMLElement | null,\r\n    cellElement: HTMLElement,\r\n  ) {\r\n    if (highlightElement) {\r\n      return null;\r\n    }\r\n\r\n    highlightElement = window.document.createElement('div');\r\n    highlightElement.classList.add('highlight');\r\n    const { left, top } = cellElement.getBoundingClientRect();\r\n    highlightElement.style.top = `${top}px`;\r\n    highlightElement.style.left = `${left}px`;\r\n\r\n    this.appendChild(highlightElement);\r\n\r\n    return highlightElement;\r\n  }\r\n\r\n  updateSelectedCells(\r\n    highlightElement: HTMLElement | null,\r\n    isInvertingSelection: boolean,\r\n    isShiftKeyPressed: boolean,\r\n  ) {\r\n    if (!highlightElement) {\r\n      return;\r\n    }\r\n\r\n    const { top, left, bottom, right } =\r\n      highlightElement.getBoundingClientRect();\r\n\r\n    const allCellElements = Array.from(\r\n      this.gridElement.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n    ).filter(isHtmlElement);\r\n\r\n    const markCellSelected = (cellElement: HTMLElement) => {\r\n      cellElement.setAttribute('aria-selected', 'true');\r\n    };\r\n\r\n    const markCellUnselected = (cellElement: HTMLElement) => {\r\n      cellElement.removeAttribute('aria-selected');\r\n    };\r\n\r\n    for (const cellElement of allCellElements) {\r\n      const cellBounds = cellElement.getBoundingClientRect();\r\n      const isTopWithinBounds = Math.ceil(cellBounds.top) >= Math.ceil(top);\r\n      const isBottomWithinBounds =\r\n        Math.ceil(cellBounds.bottom) <= Math.ceil(bottom);\r\n      const isLeftWithinBounds = Math.ceil(cellBounds.left) >= Math.ceil(left);\r\n      const isRightWithinBounds =\r\n        Math.ceil(cellBounds.right) <= Math.ceil(right);\r\n      const isWithinBounds =\r\n        isTopWithinBounds &&\r\n        isBottomWithinBounds &&\r\n        isLeftWithinBounds &&\r\n        isRightWithinBounds;\r\n\r\n      if (isInvertingSelection) {\r\n        if (isWithinBounds) {\r\n          markCellUnselected(cellElement);\r\n        } else if (cellElement.hasAttribute('data-selected')) {\r\n          markCellSelected(cellElement);\r\n        }\r\n      } else if (isShiftKeyPressed) {\r\n        if (isWithinBounds || cellElement.hasAttribute('data-selected')) {\r\n          markCellSelected(cellElement);\r\n        } else {\r\n          markCellUnselected(cellElement);\r\n        }\r\n      } else {\r\n        if (isWithinBounds) {\r\n          markCellSelected(cellElement);\r\n        } else {\r\n          markCellUnselected(cellElement);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport type Constructor = { new (...args: any[]): SelectionMixinBaseClass };\r\n","import {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n  INPUT_SELECTOR,\r\n  isInFlyoutMenu,\r\n} from './constants';\r\nimport { Constructor } from './SelectionMixinBaseClass';\r\n\r\nexport function KeyboardSelectionMixin() {\r\n  return function <T extends Constructor>(constructor: T) {\r\n    return class extends constructor {\r\n      isKeyboardShiftKeyPressed = false;\r\n      isInvertingKeyboardSelection = false;\r\n      boundKeydownHandler = this.handleKeydown.bind(this);\r\n      boundKeyupHandler = this.handleKeyup.bind(this);\r\n      keyboardOriginCellElement: HTMLElement | null = null;\r\n      keyboardHighlightElement: HTMLElement | null = null;\r\n\r\n      connectedCallback() {\r\n        if (constructor.prototype.connectedCallback) {\r\n          constructor.prototype.connectedCallback.call(this);\r\n        }\r\n\r\n        this.addEventListener('keydown', this.boundKeydownHandler, {\r\n          capture: true,\r\n        });\r\n        this.addEventListener('keyup', this.boundKeyupHandler);\r\n      }\r\n\r\n      disconnectedCallback() {\r\n        if (constructor.prototype.disconnectedCallback) {\r\n          constructor.prototype.disconnectedCallback.call(this);\r\n        }\r\n\r\n        this.removeEventListener('keydown', this.boundKeydownHandler, {\r\n          capture: true,\r\n        });\r\n        this.removeEventListener('keyup', this.boundKeyupHandler);\r\n      }\r\n\r\n      handleHome(cellElement: HTMLElement) {\r\n        const gridElement = cellElement.closest('[role=\"grid\"]');\r\n\r\n        if (!(gridElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        const rowElements = Array.from(\r\n          gridElement.querySelectorAll('[role=\"row\"]'),\r\n        );\r\n\r\n        const targetRowElement = rowElements[0];\r\n\r\n        if (!(targetRowElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        const targetRowElementCells = Array.from(targetRowElement.children);\r\n\r\n        const targetCellElement = targetRowElementCells[0];\r\n\r\n        if (!(targetCellElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        this.focusElement(targetCellElement);\r\n      }\r\n\r\n      handleEnd(cellElement: HTMLElement) {\r\n        const gridElement = cellElement.closest('[role=\"grid\"]');\r\n\r\n        if (!(gridElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        const rowElements = Array.from(\r\n          gridElement.querySelectorAll('[role=\"row\"]'),\r\n        );\r\n\r\n        const targetRowElement = rowElements[rowElements.length - 1];\r\n\r\n        if (!(targetRowElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        const targetRowElementCells = Array.from(targetRowElement.children);\r\n\r\n        const targetCellElement =\r\n          targetRowElementCells[targetRowElementCells.length - 1];\r\n\r\n        if (!(targetCellElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        this.focusElement(targetCellElement);\r\n      }\r\n\r\n      handleArrowUp(cellElement: HTMLElement) {\r\n        const rowElement = cellElement.closest('[role=\"row\"]');\r\n\r\n        if (!rowElement) {\r\n          return;\r\n        }\r\n\r\n        const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\r\n\r\n        const gridElement = rowElement.closest('[role=\"grid\"]');\r\n\r\n        if (!(gridElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        const rowElements = Array.from(\r\n          gridElement.querySelectorAll('[role=\"row\"]'),\r\n        );\r\n\r\n        const rowIndex = rowElements.indexOf(rowElement);\r\n\r\n        const targetRowElement = rowElements[rowIndex - 1];\r\n\r\n        if (!(targetRowElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        const targetRowElementCells = Array.from(targetRowElement.children);\r\n\r\n        const targetCellElement =\r\n          targetRowElementCells[\r\n            Math.min(targetRowElementCells.length - 1, cellIndex)\r\n          ];\r\n\r\n        if (!(targetCellElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          this.isKeyboardShiftKeyPressed &&\r\n          !targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        this.focusElement(targetCellElement);\r\n\r\n        if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n          return;\r\n        }\r\n\r\n        if (this.isKeyboardShiftKeyPressed) {\r\n          if (!this.keyboardHighlightElement) {\r\n            this.isInvertingKeyboardSelection =\r\n              cellElement.hasAttribute('aria-selected');\r\n            this.keyboardHighlightElement = this.initializeHighlightElement(\r\n              this.keyboardHighlightElement,\r\n              cellElement,\r\n            );\r\n            this.keyboardOriginCellElement = cellElement;\r\n          }\r\n          this.updateHighlightElement(\r\n            this.keyboardHighlightElement,\r\n            targetCellElement,\r\n            this.keyboardOriginCellElement || cellElement,\r\n          );\r\n          this.updateSelectedCells(\r\n            this.keyboardHighlightElement,\r\n            this.isInvertingKeyboardSelection,\r\n            this.isKeyboardShiftKeyPressed,\r\n          );\r\n        }\r\n      }\r\n\r\n      handleArrowDown(cellElement: HTMLElement) {\r\n        const rowElement = cellElement.closest('[role=\"row\"]');\r\n\r\n        if (!rowElement) {\r\n          return;\r\n        }\r\n\r\n        const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\r\n\r\n        const gridElement = rowElement.closest('[role=\"grid\"]');\r\n\r\n        if (!(gridElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        const rowElements = Array.from(\r\n          gridElement.querySelectorAll('[role=\"row\"]'),\r\n        );\r\n\r\n        const rowIndex = rowElements.indexOf(rowElement);\r\n\r\n        const targetRowElement = rowElements[rowIndex + 1];\r\n\r\n        if (!(targetRowElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        const targetRowElementCells = Array.from(targetRowElement.children);\r\n\r\n        const targetCellElement =\r\n          targetRowElementCells[\r\n            Math.min(targetRowElementCells.length - 1, cellIndex)\r\n          ];\r\n\r\n        if (!(targetCellElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          this.isKeyboardShiftKeyPressed &&\r\n          !targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        this.focusElement(targetCellElement);\r\n\r\n        if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n          return;\r\n        }\r\n\r\n        if (this.isKeyboardShiftKeyPressed) {\r\n          if (!this.keyboardHighlightElement) {\r\n            this.isInvertingKeyboardSelection =\r\n              cellElement.hasAttribute('aria-selected');\r\n            this.keyboardHighlightElement = this.initializeHighlightElement(\r\n              this.keyboardHighlightElement,\r\n              cellElement,\r\n            );\r\n\r\n            this.keyboardOriginCellElement = cellElement;\r\n          }\r\n          this.updateHighlightElement(\r\n            this.keyboardHighlightElement,\r\n            targetCellElement,\r\n            this.keyboardOriginCellElement || cellElement,\r\n          );\r\n          this.updateSelectedCells(\r\n            this.keyboardHighlightElement,\r\n            this.isInvertingKeyboardSelection,\r\n            this.isKeyboardShiftKeyPressed,\r\n          );\r\n        }\r\n      }\r\n\r\n      handleArrowLeft(cellElement: HTMLElement) {\r\n        const previousCellElement = cellElement.previousElementSibling;\r\n\r\n        if (!(previousCellElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          this.isKeyboardShiftKeyPressed &&\r\n          !previousCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        this.focusElement(previousCellElement);\r\n\r\n        if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n          return;\r\n        }\r\n\r\n        if (this.isKeyboardShiftKeyPressed) {\r\n          if (!this.keyboardHighlightElement) {\r\n            this.isInvertingKeyboardSelection =\r\n              cellElement.hasAttribute('aria-selected');\r\n            this.keyboardHighlightElement = this.initializeHighlightElement(\r\n              this.keyboardHighlightElement,\r\n              cellElement,\r\n            );\r\n\r\n            this.keyboardOriginCellElement = cellElement;\r\n          }\r\n          this.updateHighlightElement(\r\n            this.keyboardHighlightElement,\r\n            previousCellElement,\r\n            this.keyboardOriginCellElement || cellElement,\r\n          );\r\n          this.updateSelectedCells(\r\n            this.keyboardHighlightElement,\r\n            this.isInvertingKeyboardSelection,\r\n            this.isKeyboardShiftKeyPressed,\r\n          );\r\n        }\r\n      }\r\n\r\n      handleArrowRight(cellElement: HTMLElement) {\r\n        const nextCellElement = cellElement.nextElementSibling;\r\n\r\n        if (!(nextCellElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          this.isKeyboardShiftKeyPressed &&\r\n          !nextCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        this.focusElement(nextCellElement);\r\n\r\n        if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n          return;\r\n        }\r\n\r\n        if (this.isKeyboardShiftKeyPressed) {\r\n          if (!this.keyboardHighlightElement) {\r\n            this.isInvertingKeyboardSelection =\r\n              cellElement.hasAttribute('aria-selected');\r\n            this.keyboardHighlightElement = this.initializeHighlightElement(\r\n              this.keyboardHighlightElement,\r\n              cellElement,\r\n            );\r\n\r\n            this.keyboardOriginCellElement = cellElement;\r\n          }\r\n          this.updateHighlightElement(\r\n            this.keyboardHighlightElement,\r\n            nextCellElement,\r\n            this.keyboardOriginCellElement || cellElement,\r\n          );\r\n          this.updateSelectedCells(\r\n            this.keyboardHighlightElement,\r\n            this.isInvertingKeyboardSelection,\r\n            this.isKeyboardShiftKeyPressed,\r\n          );\r\n        }\r\n      }\r\n\r\n      focusElement(targetCellElement: HTMLElement) {\r\n        targetCellElement.focus();\r\n      }\r\n\r\n      handleKeyup(event: Event) {\r\n        if (!(event instanceof KeyboardEvent)) {\r\n          return;\r\n        }\r\n\r\n        this.isKeyboardShiftKeyPressed = event.shiftKey;\r\n\r\n        const allCells = Array.from(\r\n          this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n        );\r\n\r\n        // if (this.isDragging) {\r\n        //   for (const cell of allCells) {\r\n        //     if (cell.hasAttribute('aria-selected')) {\r\n        //       cell.setAttribute('data-selected', '');\r\n        //     } else {\r\n        //       cell.removeAttribute('data-selected');\r\n        //     }\r\n        //   }\r\n        // }\r\n\r\n        if (!this.isKeyboardShiftKeyPressed) {\r\n          if (this.keyboardHighlightElement) {\r\n            this.keyboardHighlightElement.remove();\r\n          }\r\n          this.keyboardHighlightElement = null;\r\n          this.keyboardOriginCellElement = null;\r\n          // this.isDragging = false;\r\n\r\n          const selectedCells = Array.from(\r\n            this.gridElement.querySelectorAll(\r\n              `[data-selected]:is(${ANY_CELL_ELEMENT_SELECTOR})`,\r\n            ),\r\n          );\r\n\r\n          for (const selectedCell of selectedCells) {\r\n            selectedCell.removeAttribute('data-selected');\r\n          }\r\n        }\r\n      }\r\n\r\n      handleKeydown(event: Event) {\r\n        if (!(event instanceof KeyboardEvent)) {\r\n          return;\r\n        }\r\n\r\n        if (!this.isKeyboardShiftKeyPressed) {\r\n          this.isKeyboardShiftKeyPressed =\r\n            event.key === 'Shift' || event.shiftKey;\r\n\r\n          if (this.isKeyboardShiftKeyPressed) {\r\n            const allCells = Array.from(\r\n              this.gridElement.querySelectorAll(\r\n                SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n              ),\r\n            );\r\n\r\n            for (const cell of allCells) {\r\n              if (cell.hasAttribute('aria-selected')) {\r\n                cell.setAttribute('data-selected', '');\r\n              } else {\r\n                cell.removeAttribute('data-selected');\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (event.key === 'Escape') {\r\n          const selectedCells = Array.from(\r\n            this.gridElement.querySelectorAll(\r\n              `[aria-selected=\"true\"]:is(${SELECTABLE_CELL_ELEMENT_SELECTOR})`,\r\n            ),\r\n          );\r\n\r\n          for (const selectedCell of selectedCells) {\r\n            selectedCell.removeAttribute('aria-selected');\r\n            selectedCell.removeAttribute('data-selected');\r\n          }\r\n\r\n          if (this.keyboardHighlightElement) {\r\n            this.keyboardHighlightElement.remove();\r\n            this.keyboardHighlightElement = null;\r\n          }\r\n        }\r\n\r\n        const cellElement = event.composedPath().find((element) => {\r\n          return (\r\n            element instanceof HTMLElement &&\r\n            element.matches(ANY_CELL_ELEMENT_SELECTOR)\r\n          );\r\n        });\r\n\r\n        if (!(cellElement instanceof HTMLElement)) {\r\n          return;\r\n        }\r\n\r\n        const editableAutoSaveTextInputElement = cellElement.querySelector(\r\n          'auto-save-text input[type=\"text\"]:not([data-read-only])',\r\n        );\r\n\r\n        if (editableAutoSaveTextInputElement) {\r\n          return;\r\n        }\r\n\r\n        const flyoutMenuElement = event.composedPath().find(isInFlyoutMenu);\r\n\r\n        if (flyoutMenuElement) {\r\n          return;\r\n        }\r\n\r\n        switch (event.key) {\r\n          case 'ArrowUp':\r\n            event.preventDefault();\r\n            this.handleArrowUp(cellElement);\r\n            break;\r\n          case 'ArrowDown':\r\n            event.preventDefault();\r\n            this.handleArrowDown(cellElement);\r\n            break;\r\n          case 'ArrowLeft':\r\n            event.preventDefault();\r\n            this.handleArrowLeft(cellElement);\r\n            break;\r\n          case 'ArrowRight':\r\n            event.preventDefault();\r\n            this.handleArrowRight(cellElement);\r\n            break;\r\n          case 'Home':\r\n            event.preventDefault();\r\n            this.handleHome(cellElement);\r\n            break;\r\n          case 'End':\r\n            event.preventDefault();\r\n            this.handleEnd(cellElement);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        const selectedCellElements = Array.from(\r\n          this.querySelectorAll(\r\n            `[aria-selected=\"true\"]:is(${SELECTABLE_CELL_ELEMENT_SELECTOR})`,\r\n          ),\r\n        );\r\n\r\n        if (event.key === ' ' && this.isKeyboardShiftKeyPressed) {\r\n          const inputElement = cellElement.querySelector(INPUT_SELECTOR);\r\n\r\n          if (!(inputElement instanceof HTMLInputElement)) {\r\n            return;\r\n          }\r\n\r\n          if (!inputElement.hasAttribute('data-read-only')) {\r\n            return;\r\n          }\r\n\r\n          event.preventDefault();\r\n          event.stopImmediatePropagation();\r\n          event.stopPropagation();\r\n\r\n          const allCells = Array.from(\r\n            this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n          );\r\n\r\n          for (const cell of allCells) {\r\n            if (cell.hasAttribute('aria-selected')) {\r\n              cell.setAttribute('data-selected', '');\r\n            } else {\r\n              cell.removeAttribute('data-selected');\r\n            }\r\n          }\r\n\r\n          this.isInvertingKeyboardSelection =\r\n            cellElement.hasAttribute('aria-selected');\r\n\r\n          this.keyboardHighlightElement = this.initializeHighlightElement(\r\n            this.keyboardHighlightElement,\r\n            cellElement,\r\n          );\r\n          this.keyboardOriginCellElement = cellElement;\r\n          this.updateHighlightElement(\r\n            this.keyboardHighlightElement,\r\n            cellElement,\r\n            cellElement,\r\n          );\r\n          this.updateSelectedCells(\r\n            this.keyboardHighlightElement,\r\n            this.isInvertingKeyboardSelection,\r\n            this.isKeyboardShiftKeyPressed,\r\n          );\r\n\r\n          if (this.keyboardHighlightElement) {\r\n            this.keyboardHighlightElement.remove();\r\n          }\r\n          this.keyboardHighlightElement = null;\r\n          this.keyboardOriginCellElement = null;\r\n        }\r\n\r\n        if (selectedCellElements.length) {\r\n          if (['Delete', 'Backspace'].includes(event.key)) {\r\n            event.preventDefault();\r\n            event.stopImmediatePropagation();\r\n            event.stopPropagation();\r\n\r\n            this.dispatchEvent(\r\n              new CustomEvent('view-container:clear-cells', {\r\n                bubbles: true,\r\n                composed: true,\r\n                detail: selectedCellElements,\r\n              }),\r\n            );\r\n          }\r\n        }\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { Constructor } from './SelectionMixinBaseClass';\r\nimport {\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n} from './constants';\r\n\r\nexport function DragSelectionMixin() {\r\n  return function <T extends Constructor>(constructor: T) {\r\n    return class extends constructor {\r\n      isDragShiftKeyPressed = false;\r\n      isInvertingDragSelection = false;\r\n      isPointerDown = false;\r\n      isDragging = false;\r\n      lastSelectedCellElement: HTMLElement | null = null;\r\n      dragOriginCellElement: HTMLElement | null = null;\r\n      dragHighlightElement: HTMLElement | null = null;\r\n      pointerId = 0;\r\n      boundPointerdownHandler = this.handlePointerdown.bind(this);\r\n      boundPointermoveHandler = this.handlePointermove.bind(this);\r\n      boundPointerupHandler = this.handlePointerup.bind(this);\r\n      boundDragKeydownHandler = this.handleDragKeydown.bind(this);\r\n      boundDragKeyupHandler = this.handleDragKeyup.bind(this);\r\n\r\n      handleDragKeydown(event: Event) {\r\n        if (!(event instanceof KeyboardEvent)) {\r\n          return;\r\n        }\r\n\r\n        if (!this.isDragShiftKeyPressed) {\r\n          this.isDragShiftKeyPressed = event.key === 'Shift' || event.shiftKey;\r\n        }\r\n      }\r\n\r\n      handleDragKeyup(event: Event) {\r\n        if (!(event instanceof KeyboardEvent)) {\r\n          return;\r\n        }\r\n\r\n        this.isDragShiftKeyPressed = event.shiftKey;\r\n\r\n        const allCells = Array.from(\r\n          this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n        );\r\n\r\n        for (const cell of allCells) {\r\n          if (cell.hasAttribute('aria-selected')) {\r\n            cell.setAttribute('data-selected', '');\r\n          } else {\r\n            cell.removeAttribute('data-selected');\r\n          }\r\n        }\r\n\r\n        if (!this.isDragShiftKeyPressed) {\r\n          if (this.dragHighlightElement) {\r\n            this.dragHighlightElement.remove();\r\n          }\r\n          this.dragHighlightElement = null;\r\n          this.dragOriginCellElement = null;\r\n          this.isDragging = false;\r\n\r\n          const selectedCells = Array.from(\r\n            this.gridElement.querySelectorAll(\r\n              `[data-selected]:is(${ANY_CELL_ELEMENT_SELECTOR})`,\r\n            ),\r\n          );\r\n\r\n          for (const selectedCell of selectedCells) {\r\n            selectedCell.removeAttribute('data-selected');\r\n          }\r\n        }\r\n      }\r\n\r\n      connectedCallback() {\r\n        if (constructor.prototype.connectedCallback) {\r\n          constructor.prototype.connectedCallback.call(this);\r\n        }\r\n\r\n        this.addEventListener('pointerdown', this.boundPointerdownHandler);\r\n        this.addEventListener('pointermove', this.boundPointermoveHandler);\r\n        this.addEventListener('pointerup', this.boundPointerupHandler, {\r\n          capture: true,\r\n        });\r\n        this.addEventListener('pointercancel', this.boundPointerupHandler, {\r\n          capture: true,\r\n        });\r\n        this.addEventListener('keydown', this.boundDragKeydownHandler);\r\n        this.addEventListener('keyup', this.boundDragKeyupHandler);\r\n      }\r\n\r\n      disconnectedCallback() {\r\n        if (constructor.prototype.disconnectedCallback) {\r\n          constructor.prototype.disconnectedCallback.call(this);\r\n        }\r\n\r\n        this.removeEventListener('pointerdown', this.boundPointerdownHandler);\r\n        this.removeEventListener('pointermove', this.boundPointermoveHandler);\r\n        this.removeEventListener('pointerup', this.boundPointerupHandler, {\r\n          capture: true,\r\n        });\r\n        this.removeEventListener('pointercancel', this.boundPointerupHandler, {\r\n          capture: true,\r\n        });\r\n\r\n        this.removeEventListener('keydown', this.boundDragKeydownHandler);\r\n        this.removeEventListener('keyup', this.boundDragKeyupHandler);\r\n      }\r\n\r\n      handlePointerdown(event: Event) {\r\n        if (!(event instanceof PointerEvent)) {\r\n          return;\r\n        }\r\n\r\n        const closestCellElement =\r\n          this.getClosestCellElementFromComposedPath(event);\r\n\r\n        if (!closestCellElement) {\r\n          return;\r\n        }\r\n\r\n        this.isPointerDown = true;\r\n\r\n        const allCells = Array.from(\r\n          this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n        );\r\n\r\n        for (const cell of allCells) {\r\n          if (cell.hasAttribute('aria-selected')) {\r\n            cell.setAttribute('data-selected', '');\r\n          } else {\r\n            cell.removeAttribute('data-selected');\r\n          }\r\n        }\r\n\r\n        this.isInvertingDragSelection =\r\n          this.isDragShiftKeyPressed &&\r\n          closestCellElement.hasAttribute('aria-selected');\r\n\r\n        window.document.body.classList.add('prevent-scroll');\r\n\r\n        this.dragHighlightElement = this.initializeHighlightElement(\r\n          this.dragHighlightElement,\r\n          closestCellElement,\r\n        );\r\n        this.dragOriginCellElement = closestCellElement;\r\n\r\n        if (!this.isDragShiftKeyPressed) {\r\n          return;\r\n        }\r\n\r\n        this.updateHighlightElement(\r\n          this.dragHighlightElement,\r\n          closestCellElement,\r\n          closestCellElement,\r\n        );\r\n\r\n        this.lastSelectedCellElement = closestCellElement;\r\n\r\n        this.updateSelectedCells(\r\n          this.dragHighlightElement,\r\n          this.isInvertingDragSelection,\r\n          this.isDragShiftKeyPressed,\r\n        );\r\n      }\r\n\r\n      handlePointermove(event: Event) {\r\n        if (!(event instanceof PointerEvent)) {\r\n          return;\r\n        }\r\n\r\n        if (!(event.target instanceof Element)) {\r\n          return;\r\n        }\r\n\r\n        event.target.releasePointerCapture(event.pointerId);\r\n\r\n        if (!this.isPointerDown) {\r\n          return;\r\n        }\r\n\r\n        if (!this.dragOriginCellElement) {\r\n          return;\r\n        }\r\n\r\n        if (!this.dragHighlightElement) {\r\n          return;\r\n        }\r\n\r\n        const closestCellElement = this.getClosestCellElementFromPoint(event);\r\n\r\n        if (\r\n          !closestCellElement ||\r\n          !closestCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n        ) {\r\n          if (!(this.lastSelectedCellElement instanceof HTMLElement)) {\r\n            return;\r\n          }\r\n\r\n          // const allCells = Array.from(\r\n          //   this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n          // );\r\n\r\n          // for (const cell of allCells) {\r\n          //   if (cell.hasAttribute('aria-selected')) {\r\n          //     cell.setAttribute('data-selected', '');\r\n          //   } else {\r\n          //     cell.removeAttribute('data-selected');\r\n          //   }\r\n          // }\r\n\r\n          const lastSelectedRowElement =\r\n            this.lastSelectedCellElement?.closest('[role=\"row\"]');\r\n\r\n          if (!(lastSelectedRowElement instanceof HTMLElement)) {\r\n            return;\r\n          }\r\n\r\n          const gridRect = this.gridElement.getBoundingClientRect();\r\n\r\n          const isAboveGrid = event.clientY < gridRect.top;\r\n          const isBelowGrid = event.clientY > gridRect.bottom;\r\n          const isOutOfGridYBounds = isAboveGrid || isBelowGrid;\r\n\r\n          const isLeftOfGrid = event.clientX < gridRect.left;\r\n          const isRightOfGrid = event.clientX > gridRect.right;\r\n          const isOutOfGridXBounds = isLeftOfGrid || isRightOfGrid;\r\n\r\n          const lastSelectedCellRect =\r\n            this.lastSelectedCellElement.getBoundingClientRect();\r\n          const isAboveCell = event.clientY < lastSelectedCellRect.top;\r\n          const isBelowCell = event.clientY > lastSelectedCellRect.bottom;\r\n          const isOutOfCellYBounds = isAboveCell || isBelowCell;\r\n\r\n          const isLeftOfCell = event.clientX < lastSelectedCellRect.left;\r\n          const isRightOfCell = event.clientX > lastSelectedCellRect.right;\r\n          const isOutOfCellXBounds = isLeftOfCell || isRightOfCell;\r\n\r\n          const lastSelectedColumnIndex = Array.from(\r\n            lastSelectedRowElement.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n          ).indexOf(this.lastSelectedCellElement);\r\n\r\n          const rowElements = Array.from(\r\n            this.gridElement.querySelectorAll(\r\n              `[role=\"row\"]:has(${SELECTABLE_CELL_ELEMENT_SELECTOR})`,\r\n            ),\r\n          );\r\n\r\n          const selectedCellRowElement =\r\n            this.lastSelectedCellElement.closest('[role=\"row\"]');\r\n\r\n          if (!(selectedCellRowElement instanceof HTMLElement)) {\r\n            return;\r\n          }\r\n\r\n          const selectedCellRowIndex = rowElements.indexOf(\r\n            selectedCellRowElement,\r\n          );\r\n\r\n          const targetRowIndex = isOutOfGridXBounds\r\n            ? isAboveGrid\r\n              ? 0\r\n              : rowElements.length - 1\r\n            : selectedCellRowIndex;\r\n\r\n          const targetRowElement = rowElements[targetRowIndex];\r\n\r\n          const targetColumnIndex = isOutOfGridYBounds\r\n            ? lastSelectedColumnIndex\r\n            : isLeftOfGrid\r\n              ? 0\r\n              : lastSelectedRowElement.querySelectorAll(\r\n                  ANY_CELL_ELEMENT_SELECTOR,\r\n                ).length - 1;\r\n\r\n          const target = Array.from(\r\n            targetRowElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n          )[targetColumnIndex];\r\n\r\n          if (!(target instanceof HTMLElement)) {\r\n            return;\r\n          }\r\n\r\n          const targetCellElement = target;\r\n\r\n          if (!(targetCellElement instanceof HTMLElement)) {\r\n            return;\r\n          }\r\n\r\n          this.updateHighlightElement(\r\n            this.dragHighlightElement,\r\n            targetCellElement,\r\n            this.dragOriginCellElement || this.lastSelectedCellElement,\r\n          );\r\n\r\n          this.updateSelectedCells(\r\n            this.dragHighlightElement,\r\n            this.isInvertingDragSelection,\r\n            this.isDragShiftKeyPressed,\r\n          );\r\n\r\n          return;\r\n        }\r\n\r\n        this.isDragging = true;\r\n\r\n        this.updateHighlightElement(\r\n          this.dragHighlightElement,\r\n          closestCellElement,\r\n          this.dragOriginCellElement,\r\n        );\r\n\r\n        this.lastSelectedCellElement = closestCellElement;\r\n\r\n        this.updateSelectedCells(\r\n          this.dragHighlightElement,\r\n          this.isInvertingDragSelection,\r\n          this.isDragShiftKeyPressed,\r\n        );\r\n      }\r\n\r\n      handlePointerup(event: Event) {\r\n        if (!(event instanceof PointerEvent)) {\r\n          return;\r\n        }\r\n\r\n        if (!this.dragHighlightElement) {\r\n          return;\r\n        }\r\n\r\n        window.document.body.classList.remove('prevent-scroll');\r\n        this.isPointerDown = false;\r\n\r\n        const closestCellElement = this.getClosestCellElementFromPoint(event);\r\n\r\n        if (!(closestCellElement instanceof HTMLElement)) {\r\n          event.stopImmediatePropagation();\r\n          event.stopPropagation();\r\n\r\n          this.dragHighlightElement.remove();\r\n          this.dragHighlightElement = null;\r\n          this.dragOriginCellElement = null;\r\n          this.lastSelectedCellElement?.focus();\r\n          this.lastSelectedCellElement = null;\r\n          return;\r\n        }\r\n\r\n        const allCells = Array.from(\r\n          this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n        );\r\n\r\n        for (const cell of allCells) {\r\n          if (cell.hasAttribute('aria-selected')) {\r\n            cell.setAttribute('data-selected', '');\r\n          } else {\r\n            cell.removeAttribute('data-selected');\r\n          }\r\n        }\r\n\r\n        if (\r\n          this.isDragShiftKeyPressed ||\r\n          (this.isDragging && this.dragOriginCellElement !== closestCellElement)\r\n        ) {\r\n          event.stopImmediatePropagation();\r\n          event.stopPropagation();\r\n        }\r\n\r\n        this.isDragging = false;\r\n\r\n        if (!this.dragOriginCellElement) {\r\n          return;\r\n        }\r\n\r\n        this.updateHighlightElement(\r\n          this.dragHighlightElement,\r\n          closestCellElement,\r\n          this.dragOriginCellElement,\r\n        );\r\n\r\n        this.lastSelectedCellElement = closestCellElement;\r\n\r\n        this.updateSelectedCells(\r\n          this.dragHighlightElement,\r\n          this.isInvertingDragSelection,\r\n          this.isDragShiftKeyPressed,\r\n        );\r\n\r\n        this.dragHighlightElement.remove();\r\n        this.dragHighlightElement = null;\r\n        this.dragOriginCellElement = null;\r\n        this.lastSelectedCellElement = null;\r\n        closestCellElement.focus();\r\n      }\r\n    };\r\n  };\r\n}\r\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","dsdPolyfill","root","Element","DocumentFragment","Document","HTMLTemplateElement","prototype","hasOwnProperty","shadowRootTemplateElement","Array","from","querySelectorAll","mode","getAttribute","includes","delegatesFocus","hasAttribute","parentNode","shadowRoot","attachShadow","appendChild","content","remove","document","parcelHelpers","defineInteropFlag","export","AutoSaveTextElement","_baseAutoSaveElement","BaseAutoSaveElement","constructor","arguments","boundKeydownHandler","handleKeydown","boundClickHandler","handleClick","boundBlurHandler","handleBlur","connectedCallback","inputElement","addEventListener","boundChangeHandler","disconnectedCallback","removeEventListener","enterEditMode","removeAttribute","exitEditMode","setAttribute","submitData","then","markClean","toggleEditMode","dataset","readOnly","event","KeyboardEvent","key","preventDefault","dispatchEvent","CustomEvent","composed","bubbles","selectionStart","selectionEnd","value","test","formElement","form","markDirty","formAction","FormData","toString","patch","catch","customElements","_getUniqueId","_unloadHandlerElement","HTMLElement","slotElement","querySelector","HTMLSlotElement","assignedNodes","find","node","HTMLInputElement","unloadHandlerElement","inputId","getUniqueId","handleChange","boundInputHandler","handleInput","prev","DIRTY_ELEMENTS_KEY","dirtyElementsArray","split","push","dirtyElementsString","uniqueDirtyElementsArray","Set","join","filter","url","formData","append","fetch","method","body","status","_uuid","concat","Date","now","v4","_v1JsDefault","default","_v3JsDefault","_v4JsDefault","_v5JsDefault","_nilJsDefault","_versionJsDefault","_validateJsDefault","_stringifyJsDefault","_parseJsDefault","_v1Js","interopDefault","_v3Js","_v4Js","_v5Js","_nilJs","_versionJs","_validateJs","_stringifyJs","_parseJs","_nativeJs","_nativeJsDefault","_rngJs","_rngJsDefault","options","buf","offset","randomUUID","rnds","random","rng","unsafeStringify","crypto","a","__esModule","exportAll","source","dest","keys","forEach","enumerable","destName","getRandomValues","rnds8","Uint8Array","byteToHex","slice","arr","uuid","TypeError","_regexJs","_regexJsDefault","UnloadHandlerElement","boundBeforeUnloadHandler","handleBeforeUnload","observedAttributes","attributeChangedCallback","oldValue","newValue","triggerBeforeUnload","removeBeforeUnload","onbeforeunload","returnValue","AutoSaveCheckboxElement","boundMarkClean","isChecked","checked","location","reload","defaultChecked","AutoSaveSearchElement","_debounce","_debounceDefault","debouncedInputHandler","submit","debounce","func","wait","immediate","later","last","timestamp","timeout","setTimeout","result","apply","context","args","debounced","callNow","clear","clearTimeout","flush","ClearSearchElement","buttonElement","HTMLButtonElement","HTMLFormElement","searchInputElement","elements","type","PostFormElement","boundSubmitHandler","handleFormSubmit","unloadHandler","formElements","getElementById","SelectAllCheckboxElement","boundControllableCheckboxChangeHandler","handleControllableCheckboxChange","inputName","checkboxElements","element","checkboxFormElement","isAllChecked","every","ModalDialogElement","dialogElement","HTMLDialogElement","closeDialogFormElement","FlyoutMenuElement","boundToggleHandler","handleToggle","detailsElement","HTMLDetailsElement","summaryElement","menuElement","menuItemElements","positionPopover","left","top","height","width","getBoundingClientRect","translateX","innerWidth","translateY","innerHeight","transformValue","style","setProperty","open","focus","menuItemElement","composedPath","matches","closest","handleArrowUp","handleArrowDown","menuItemElementIndex","indexOf","previousMenuItemElement","nextMenuItemElement","firstMenuItem","ViewContainerElement","_constants","_selectionMixinBaseClass","_dragSelectionMixin","_keyboardSelectionMixin","SelectionMixinBaseClass","boundHandleAutoSaveTextSave","handleAutoSaveTextSave","boundClearCellsHandler","handleClearCells","boundHandleAutoSaveTextToggleEditMode","handleAutoSaveTextToggleEditMode","capture","target","rowElement","gridRows","gridElement","Number","addRowButtonElement","addRowFormElement","isArray","detail","cellElements","isHtmlElement","cellElement","autoSaveTextElement","INPUT_SELECTOR","clearCellsButtonElement","clearCellsFormElement","hiddenInputElement","cellsValue","map","rowId","propertyId","action","SELECTABLE_CELL_ELEMENT_SELECTOR","cellIndex","children","nextRowElement","nextElementSibling","nextCellElement","__decorate","decorators","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","DragSelectionMixin","KeyboardSelectionMixin","ANY_CELL_ELEMENT_SELECTOR","FLYOUT_MENU_SELECTOR","isInFlyoutMenu","flyoutMenuElement","getClosestCellElementFromPoint","PointerEvent","getClosestCellElementFromComposedPath","closestCellElement","touchTarget","elementFromPoint","clientX","clientY","updateHighlightElement","highlightElement","draggedCellElement","closestRowElement","draggedRow","closestCellColumnIndex","draggedCellColumnIndex","closestCellLeft","closestCellRight","right","draggedCellLeft","draggedCellRight","closestCellTop","closestCellBottom","bottom","draggedCellTop","draggedCellBottom","isSameCell","isDraggedCellBeforeClosestCell","isDraggedCellAfterClosestCell","isDraggedCellAboveClosestCell","isDraggedCellBelowClosestCell","console","log","border","initializeHighlightElement","createElement","classList","add","updateSelectedCells","isInvertingSelection","isShiftKeyPressed","allCellElements","markCellSelected","markCellUnselected","cellBounds","isTopWithinBounds","Math","ceil","isBottomWithinBounds","isLeftWithinBounds","isRightWithinBounds","isWithinBounds","isKeyboardShiftKeyPressed","isInvertingKeyboardSelection","boundKeyupHandler","handleKeyup","keyboardOriginCellElement","keyboardHighlightElement","handleHome","targetRowElement","rowElements","targetCellElement","targetRowElementCells","focusElement","handleEnd","rowIndex","min","handleArrowLeft","previousCellElement","previousElementSibling","handleArrowRight","shiftKey","selectedCell","cell","selectedCellElements","stopImmediatePropagation","stopPropagation","isDragShiftKeyPressed","isInvertingDragSelection","isPointerDown","isDragging","lastSelectedCellElement","dragOriginCellElement","dragHighlightElement","pointerId","boundPointerdownHandler","handlePointerdown","boundPointermoveHandler","handlePointermove","boundPointerupHandler","handlePointerup","boundDragKeydownHandler","handleDragKeydown","boundDragKeyupHandler","handleDragKeyup","releasePointerCapture","lastSelectedRowElement","gridRect","isAboveGrid","isBelowGrid","isLeftOfGrid","isRightOfGrid","lastSelectedCellRect","lastSelectedColumnIndex","selectedCellRowElement","selectedCellRowIndex","targetRowIndex","isOutOfGridXBounds","targetColumnIndex","isOutOfGridYBounds"],"version":3,"file":"client.js.map"}