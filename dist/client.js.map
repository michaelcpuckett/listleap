{"mappings":"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","sources":["<anon>","src/client/index.ts","src/client/elements/AutoSaveTextElement.ts","src/client/elements/BaseAutoSaveElement.ts","src/shared/getUniqueId.ts","node_modules/uuid/dist/esm-browser/v4.js","node_modules/uuid/dist/esm-browser/native.js","node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/validate.js","node_modules/uuid/dist/esm-browser/regex.js","src/client/elements/UnloadHandlerElement.ts","src/client/elements/AutoSaveCheckboxElement.ts","src/client/elements/AutoSaveSearchElement.ts","node_modules/debounce/index.js","src/client/elements/ClearSearchElement.ts","src/client/elements/PostFormElement.ts","src/client/elements/SelectAllCheckboxElement.ts","src/client/elements/ModalDialogElement.ts","src/client/elements/FlyoutMenuElement.ts","src/shared/constants.ts","src/client/elements/ViewContainerElement/index.ts","src/client/elements/ViewContainerElement/constants.ts","src/client/elements/ViewContainerElement/SelectionMixinBaseClass.ts","src/client/elements/ViewContainerElement/DragSelectionMixin/index.ts","src/client/elements/ViewContainerElement/DragSelectionMixin/handleDragstart.ts","src/client/elements/ViewContainerElement/DragSelectionMixin/handleKeydown.ts","src/client/elements/ViewContainerElement/DragSelectionMixin/handleKeyup.ts","src/client/elements/ViewContainerElement/DragSelectionMixin/handlePointerdown.ts","src/client/elements/ViewContainerElement/DragSelectionMixin/handlePointermove.ts","src/client/elements/ViewContainerElement/DragSelectionMixin/handlePointerup.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/index.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleArrowDown.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleArrowLeft.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleArrowRight.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleArrowUp.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleDelete.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleEnd.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleEscape.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleHome.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleKeydown.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleKeyup.ts","src/client/elements/ViewContainerElement/KeyboardSelectionMixin/handleSpacebar.ts","src/client/elements/HyperLinkElement.ts","src/client/elements/DisclosureWidgetElement.ts","src/client/elements/ColumnSelectorElement.ts"],"sourcesContent":["(() => {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nconst $b488569ebaeb416e$var$randomUUID = typeof crypto !== \"undefined\" && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar $b488569ebaeb416e$export$2e2bcd8739ae039 = {\n    randomUUID: $b488569ebaeb416e$var$randomUUID\n};\n\n\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet $d0da4566d2fd20fe$var$getRandomValues;\nconst $d0da4566d2fd20fe$var$rnds8 = new Uint8Array(16);\nfunction $d0da4566d2fd20fe$export$2e2bcd8739ae039() {\n    // lazy load so that environments that need to polyfill have a chance to do so\n    if (!$d0da4566d2fd20fe$var$getRandomValues) {\n        // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n        $d0da4566d2fd20fe$var$getRandomValues = typeof crypto !== \"undefined\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n        if (!$d0da4566d2fd20fe$var$getRandomValues) throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n    }\n    return $d0da4566d2fd20fe$var$getRandomValues($d0da4566d2fd20fe$var$rnds8);\n}\n\n\nvar $e8c673fd2604883f$export$2e2bcd8739ae039 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n\n\nfunction $7d240e1718cbe118$var$validate(uuid) {\n    return typeof uuid === \"string\" && (0, $e8c673fd2604883f$export$2e2bcd8739ae039).test(uuid);\n}\nvar $7d240e1718cbe118$export$2e2bcd8739ae039 = $7d240e1718cbe118$var$validate;\n\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */ const $8fb7ad22aed8f433$var$byteToHex = [];\nfor(let i = 0; i < 256; ++i)$8fb7ad22aed8f433$var$byteToHex.push((i + 0x100).toString(16).slice(1));\nfunction $8fb7ad22aed8f433$export$8fb373d660548968(arr, offset = 0) {\n    // Note: Be careful editing this code!  It's been tuned for performance\n    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n    return $8fb7ad22aed8f433$var$byteToHex[arr[offset + 0]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 1]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 2]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 3]] + \"-\" + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 4]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 5]] + \"-\" + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 6]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 7]] + \"-\" + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 8]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 9]] + \"-\" + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 10]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 11]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 12]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 13]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 14]] + $8fb7ad22aed8f433$var$byteToHex[arr[offset + 15]];\n}\nfunction $8fb7ad22aed8f433$var$stringify(arr, offset = 0) {\n    const uuid = $8fb7ad22aed8f433$export$8fb373d660548968(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n    // of the following:\n    // - One or more input array values don't map to a hex octet (leading to\n    // \"undefined\" in the uuid)\n    // - Invalid input values for the RFC `version` or `variant` fields\n    if (!(0, $7d240e1718cbe118$export$2e2bcd8739ae039)(uuid)) throw TypeError(\"Stringified UUID is invalid\");\n    return uuid;\n}\nvar $8fb7ad22aed8f433$export$2e2bcd8739ae039 = $8fb7ad22aed8f433$var$stringify;\n\n\nfunction $27d7069422be255c$var$v4(options, buf, offset) {\n    if ((0, $b488569ebaeb416e$export$2e2bcd8739ae039).randomUUID && !buf && !options) return (0, $b488569ebaeb416e$export$2e2bcd8739ae039).randomUUID();\n    options = options || {};\n    const rnds = options.random || (options.rng || (0, $d0da4566d2fd20fe$export$2e2bcd8739ae039))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n    if (buf) {\n        offset = offset || 0;\n        for(let i = 0; i < 16; ++i)buf[offset + i] = rnds[i];\n        return buf;\n    }\n    return (0, $8fb7ad22aed8f433$export$8fb373d660548968)(rnds);\n}\nvar $27d7069422be255c$export$2e2bcd8739ae039 = $27d7069422be255c$var$v4;\n\n\nfunction $273877a453c33fcf$export$aa1a1894961eafab() {\n    return \"\".concat(Date.now(), \"-\").concat((0, $27d7069422be255c$export$2e2bcd8739ae039)());\n}\n\n\nconst $7546709c975de4a6$export$bb6d302d82cc2621 = \"dirty-elements\";\nclass $7546709c975de4a6$export$802553ba611e108d extends HTMLElement {\n    constructor(){\n        super();\n        this.boundBeforeUnloadHandler = this.handleBeforeUnload.bind(this);\n    }\n    static get observedAttributes() {\n        return [\n            \"dirty-elements\"\n        ];\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"dirty-elements\") {\n            if (newValue) this.triggerBeforeUnload();\n            else this.removeBeforeUnload();\n        }\n    }\n    triggerBeforeUnload() {\n        if (!window.onbeforeunload) window.onbeforeunload = this.boundBeforeUnloadHandler;\n    }\n    removeBeforeUnload() {\n        if (window.onbeforeunload) window.onbeforeunload = null;\n    }\n    handleBeforeUnload(event) {\n        event.preventDefault();\n        event.returnValue = \"\";\n    }\n}\nwindow.customElements.define(\"unload-handler\", $7546709c975de4a6$export$802553ba611e108d);\n\n\nclass $e0d02177ed2e6c33$export$8d0ea09c71f565f8 extends HTMLElement {\n    constructor(){\n        super();\n        if (!this.shadowRoot) throw new Error(\"Declarative shadow root not supported\");\n        const slotElement = this.shadowRoot.querySelector(\"slot\");\n        if (!(slotElement instanceof HTMLSlotElement)) throw new Error(\"No slot element provided\");\n        const assignedNodes = slotElement.assignedNodes();\n        if (!assignedNodes || !assignedNodes.length) throw new Error(\"No content provided\");\n        function guardIsHTMLInputElement(node) {\n            return node instanceof HTMLInputElement;\n        }\n        const inputElement = assignedNodes.find(guardIsHTMLInputElement);\n        if (!inputElement) throw new Error(\"No input element provided\");\n        const unloadHandlerElement = window.document.querySelector(\"unload-handler\");\n        if (!(unloadHandlerElement instanceof HTMLElement)) throw new Error(\"No unload handler element found\");\n        this.inputElement = inputElement;\n        this.inputId = inputElement.id || (0, $273877a453c33fcf$export$aa1a1894961eafab)();\n        this.unloadHandlerElement = unloadHandlerElement;\n        this.boundChangeHandler = this.handleChange.bind(this);\n        this.boundInputHandler = this.handleInput.bind(this);\n    }\n    handleChange() {}\n    handleInput() {}\n    markDirty() {\n        const prev = this.unloadHandlerElement.getAttribute((0, $7546709c975de4a6$export$bb6d302d82cc2621)) || \"\";\n        const dirtyElementsArray = !prev ? [] : prev.split(\",\");\n        dirtyElementsArray.push(this.inputId);\n        const uniqueDirtyElementsArray = Array.from(new Set(dirtyElementsArray));\n        const dirtyElementsString = uniqueDirtyElementsArray.join(\",\");\n        this.unloadHandlerElement.setAttribute((0, $7546709c975de4a6$export$bb6d302d82cc2621), dirtyElementsString);\n        this.inputElement.setAttribute(\"data-dirty\", \"\");\n    }\n    markClean() {\n        const prev = this.unloadHandlerElement.getAttribute((0, $7546709c975de4a6$export$bb6d302d82cc2621)) || \"\";\n        const dirtyElementsArray = !prev ? [] : prev.split(\",\");\n        const dirtyElementsString = dirtyElementsArray.filter((id)=>id !== this.inputId).join(\",\");\n        this.unloadHandlerElement.setAttribute((0, $7546709c975de4a6$export$bb6d302d82cc2621), dirtyElementsString);\n        this.inputElement.removeAttribute(\"data-dirty\");\n        this.inputElement.setAttribute(\"value\", this.inputElement.value);\n    }\n    async patch(url, value) {\n        const formData = new FormData();\n        formData.append(\"_method\", \"PATCH\");\n        formData.append(this.inputElement.name, value);\n        return window.fetch(url, {\n            method: \"POST\",\n            body: formData\n        }).then((res)=>{\n            if (res.status === 404) throw new Error(\"Not found\");\n            return res;\n        });\n    }\n}\n\n\nclass $8f5a765ba5c523f5$export$76b28eea78106d6e extends (0, $e0d02177ed2e6c33$export$8d0ea09c71f565f8) {\n    constructor(){\n        super(...arguments);\n        this.boundKeydownHandler = this.handleKeydown.bind(this);\n        this.boundClickHandler = this.handleClick.bind(this);\n        this.boundBlurHandler = this.handleBlur.bind(this);\n    }\n    connectedCallback() {\n        this.inputElement.addEventListener(\"change\", this.boundChangeHandler);\n        this.inputElement.addEventListener(\"keydown\", this.boundKeydownHandler);\n        this.inputElement.addEventListener(\"blur\", this.boundBlurHandler);\n        this.inputElement.addEventListener(\"pointerup\", this.boundClickHandler);\n    }\n    disconnectedCallback() {\n        this.inputElement.removeEventListener(\"change\", this.boundChangeHandler);\n        this.inputElement.removeEventListener(\"keydown\", this.boundKeydownHandler);\n        this.inputElement.removeEventListener(\"blur\", this.boundBlurHandler);\n        this.inputElement.removeEventListener(\"pointerup\", this.boundClickHandler);\n    }\n    enterEditMode() {\n        this.inputElement.removeAttribute(\"data-read-only\");\n    }\n    exitEditMode() {\n        this.inputElement.setAttribute(\"data-read-only\", \"\");\n        if (this.inputElement.value !== this.inputElement.getAttribute(\"value\")) this.submitData().then(()=>{\n            this.markClean();\n        });\n    }\n    toggleEditMode() {\n        if (this.inputElement.dataset.readOnly === \"\") this.enterEditMode();\n        else this.exitEditMode();\n    }\n    handleClick() {\n        this.enterEditMode();\n    }\n    handleBlur() {\n        this.exitEditMode();\n    }\n    handleKeydown(event) {\n        if (!(event instanceof KeyboardEvent)) return;\n        if (event.key === \"Escape\") {\n            if (this.inputElement.dataset.readOnly !== \"\") this.exitEditMode();\n        }\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n            this.toggleEditMode();\n            if (this.inputElement.dataset.readOnly === \"\") {\n                this.dispatchEvent(new CustomEvent(\"auto-save-text:toggle-edit-mode\", {\n                    composed: true,\n                    bubbles: true\n                }));\n                this.submitData().then(()=>{\n                    this.dispatchEvent(new CustomEvent(\"auto-save-text:save\", {\n                        composed: true,\n                        bubbles: true\n                    }));\n                });\n            } else this.inputElement.selectionStart = this.inputElement.selectionEnd = this.inputElement.value.length;\n        }\n        if (event.key.length === 1 && /[a-zA-Z0-9-_ ]/.test(event.key)) {\n            if (this.inputElement.dataset.readOnly === \"\") {\n                this.toggleEditMode();\n                this.inputElement.value = \"\";\n                this.inputElement.selectionStart = this.inputElement.selectionEnd = this.inputElement.value.length;\n            }\n        }\n    }\n    async submitData() {\n        const value = this.inputElement.value;\n        const formElement = this.inputElement.form;\n        if (!formElement) {\n            this.markDirty();\n            return;\n        }\n        const formAction = formElement.getAttribute(\"action\");\n        if (!formAction) return;\n        const method = new FormData(formElement).get(\"_method\")?.toString() || \"\";\n        if ([\n            \"PUT\",\n            \"PATCH\"\n        ].includes(method)) return this.patch(formAction, value).then(()=>{\n            this.inputElement.setAttribute(\"value\", value);\n            this.markClean();\n        }).catch(()=>{\n            this.markDirty();\n        });\n        else this.markDirty();\n    }\n}\nwindow.customElements.define(\"auto-save-text\", $8f5a765ba5c523f5$export$76b28eea78106d6e);\n\n\n\nclass $de719e1353f643fa$export$4dd1c22138703913 extends (0, $e0d02177ed2e6c33$export$8d0ea09c71f565f8) {\n    constructor(){\n        super();\n        this.boundMarkClean = this.markClean.bind(this);\n        const formElement = this.inputElement.form;\n        if (!formElement) return;\n        this.formElement = formElement;\n    }\n    connectedCallback() {\n        this.inputElement.addEventListener(\"input\", this.boundInputHandler);\n        if (this.formElement) this.formElement.addEventListener(\"submit\", this.boundMarkClean);\n    }\n    disconnectedCallback() {\n        this.inputElement.removeEventListener(\"input\", this.boundInputHandler);\n        if (this.formElement) this.formElement.removeEventListener(\"submit\", this.boundMarkClean);\n    }\n    handleInput() {\n        const isChecked = this.inputElement.checked;\n        const value = isChecked ? this.inputElement.value : \"\";\n        const formElement = this.inputElement.form;\n        if (!formElement) {\n            this.markDirty();\n            return;\n        }\n        const formAction = formElement.getAttribute(\"action\");\n        if (!formAction) return;\n        const method = new FormData(formElement).get(\"_method\")?.toString() || \"\";\n        if ([\n            \"PUT\",\n            \"PATCH\"\n        ].includes(method)) this.patch(formAction, value).then(()=>{\n            window.location.reload();\n        }).catch(()=>{\n            this.markDirty();\n        });\n        else if (this.inputElement.checked !== this.inputElement.defaultChecked) this.markDirty();\n        else this.markClean();\n    }\n}\nwindow.customElements.define(\"auto-save-checkbox\", $de719e1353f643fa$export$4dd1c22138703913);\n\n\nvar $cdd05a6aa3de24f9$exports = {};\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */ function $cdd05a6aa3de24f9$var$debounce(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n    if (null == wait) wait = 100;\n    function later() {\n        var last = Date.now() - timestamp;\n        if (last < wait && last >= 0) timeout = setTimeout(later, wait - last);\n        else {\n            timeout = null;\n            if (!immediate) {\n                result = func.apply(context, args);\n                context = args = null;\n            }\n        }\n    }\n    var debounced = function() {\n        context = this;\n        args = arguments;\n        timestamp = Date.now();\n        var callNow = immediate && !timeout;\n        if (!timeout) timeout = setTimeout(later, wait);\n        if (callNow) {\n            result = func.apply(context, args);\n            context = args = null;\n        }\n        return result;\n    };\n    debounced.clear = function() {\n        if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n        }\n    };\n    debounced.flush = function() {\n        if (timeout) {\n            result = func.apply(context, args);\n            context = args = null;\n            clearTimeout(timeout);\n            timeout = null;\n        }\n    };\n    return debounced;\n}\n// Adds compatibility for ES modules\n$cdd05a6aa3de24f9$var$debounce.debounce = $cdd05a6aa3de24f9$var$debounce;\n$cdd05a6aa3de24f9$exports = $cdd05a6aa3de24f9$var$debounce;\n\n\n\nclass $b48b812597f2b84f$export$f74d6c75842f9413 extends (0, $e0d02177ed2e6c33$export$8d0ea09c71f565f8) {\n    constructor(){\n        super(...arguments);\n        this.debouncedInputHandler = (0, (/*@__PURE__*/$parcel$interopDefault($cdd05a6aa3de24f9$exports)))(this.boundInputHandler, 350);\n    }\n    connectedCallback() {\n        this.inputElement.addEventListener(\"input\", this.debouncedInputHandler);\n    }\n    disconnectedCallback() {\n        this.inputElement.removeEventListener(\"input\", this.debouncedInputHandler);\n    }\n    handleInput() {\n        const formElement = this.inputElement.form;\n        if (!formElement) return;\n        formElement.submit();\n    }\n}\nwindow.customElements.define(\"auto-save-search\", $b48b812597f2b84f$export$f74d6c75842f9413);\n\n\nclass $422fba6c8e95a937$export$490fe6a0b0571059 extends HTMLElement {\n    constructor(){\n        super(...arguments);\n        this.boundClickHandler = this.handleClick.bind(this);\n    }\n    connectedCallback() {\n        const buttonElement = this.querySelector(\"button\");\n        if (!(buttonElement instanceof HTMLButtonElement)) throw new Error(\"No button element provided\");\n        const formElement = buttonElement.form;\n        if (!(formElement instanceof HTMLFormElement)) throw new Error(\"No form element provided\");\n        function guardIsHTMLSearchInputElement(node) {\n            return node instanceof HTMLInputElement && node.type === \"search\";\n        }\n        const searchInputElement = Array.from(formElement.elements).find(guardIsHTMLSearchInputElement);\n        if (!searchInputElement) throw new Error(\"No search input element provided\");\n        this.buttonElement = buttonElement;\n        this.formElement = formElement;\n        this.searchInputElement = searchInputElement;\n        this.buttonElement.addEventListener(\"click\", this.boundClickHandler);\n    }\n    disconnectedCallback() {\n        if (this.buttonElement) this.buttonElement.removeEventListener(\"click\", this.boundClickHandler);\n    }\n    handleClick() {\n        if (!this.searchInputElement) throw new Error(\"No search input element provided\");\n        if (!this.formElement) throw new Error(\"No form element provided\");\n        this.searchInputElement.removeAttribute(\"name\");\n        this.formElement.submit();\n    }\n}\nwindow.customElements.define(\"clear-search\", $422fba6c8e95a937$export$490fe6a0b0571059);\n\n\n\n\nclass $a637d0d7f218ab87$export$73f9a557f7545819 extends HTMLElement {\n    constructor(){\n        super(...arguments);\n        this.boundSubmitHandler = this.handleFormSubmit.bind(this);\n    }\n    connectedCallback() {\n        const formElement = this.querySelector(\"form\");\n        if (!(formElement instanceof HTMLFormElement)) throw new Error(\"PostFormElement must contain a form element\");\n        this.formElement = formElement;\n        this.formElement.addEventListener(\"submit\", this.boundSubmitHandler);\n    }\n    disconnectedCallback() {\n        if (!this.formElement) return;\n        this.formElement.removeEventListener(\"submit\", this.boundSubmitHandler);\n    }\n    handleFormSubmit(event) {\n        event.preventDefault();\n        if (!this.formElement) return;\n        const unloadHandler = window.document.querySelector(\"unload-handler\");\n        if (!unloadHandler) return;\n        const prev = unloadHandler.getAttribute((0, $7546709c975de4a6$export$bb6d302d82cc2621)) || \"\";\n        const dirtyElementsArray = !prev ? [] : prev.split(\",\");\n        const formElements = Array.from(this.formElement.elements);\n        const dirtyElementsString = dirtyElementsArray.filter((id)=>{\n            const formElement = window.document.getElementById(id);\n            return formElement && !formElements.includes(formElement);\n        }).join(\",\");\n        unloadHandler.setAttribute((0, $7546709c975de4a6$export$bb6d302d82cc2621), dirtyElementsString);\n        this.formElement.submit();\n    }\n}\nwindow.customElements.define(\"post-form\", $a637d0d7f218ab87$export$73f9a557f7545819);\n\n\nclass $cd8d668d70d6c005$export$eef32558893c738f extends HTMLElement {\n    constructor(){\n        super();\n        this.boundChangeHandler = this.handleChange.bind(this);\n        this.boundControllableCheckboxChangeHandler = this.handleControllableCheckboxChange.bind(this);\n        if (!this.shadowRoot) throw new Error(\"Declarative shadow root not supported\");\n        const inputElement = this.querySelector(\"input\");\n        if (!(inputElement instanceof HTMLInputElement)) throw new Error(\"No input element provided\");\n        const formElement = inputElement.form;\n        if (!formElement) throw new Error(\"No form element provided\");\n        const inputName = inputElement.getAttribute(\"name\");\n        function isControllableCheckboxElement(element) {\n            return element instanceof HTMLInputElement && element.type === \"checkbox\" && element.name === inputName;\n        }\n        this.checkboxElements = Array.from(formElement.elements).filter(isControllableCheckboxElement);\n        this.inputElement = inputElement;\n        this.formElement = formElement;\n    }\n    connectedCallback() {\n        this.inputElement.addEventListener(\"change\", this.boundChangeHandler);\n        for (const checkboxFormElement of this.checkboxElements)checkboxFormElement.addEventListener(\"change\", this.boundControllableCheckboxChangeHandler);\n    }\n    disconnectedCallback() {\n        this.inputElement.removeEventListener(\"change\", this.boundChangeHandler);\n        for (const checkboxFormElement of this.checkboxElements)checkboxFormElement.removeEventListener(\"change\", this.boundControllableCheckboxChangeHandler);\n    }\n    handleChange() {\n        const isChecked = this.inputElement.checked;\n        for (const checkboxFormElement of this.checkboxElements)checkboxFormElement.checked = isChecked;\n    }\n    handleControllableCheckboxChange() {\n        const isAllChecked = this.checkboxElements.every((checkboxFormElement)=>checkboxFormElement.checked);\n        this.inputElement.checked = isAllChecked;\n    }\n}\nwindow.customElements.define(\"select-all-checkbox\", $cd8d668d70d6c005$export$eef32558893c738f);\n\n\nclass $a1587808b9f6932a$export$c3667d0270320762 extends HTMLElement {\n    constructor(){\n        super();\n        this.boundKeydownHandler = this.handleKeydown.bind(this);\n        const dialogElement = this.querySelector(\"dialog\");\n        if (!(dialogElement instanceof HTMLDialogElement)) throw new Error(\"Could not find dialog element\");\n        this.dialogElement = dialogElement;\n    }\n    connectedCallback() {\n        this.addEventListener(\"keydown\", this.boundKeydownHandler);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"keydown\", this.boundKeydownHandler);\n    }\n    handleKeydown(event) {\n        if (!(event instanceof KeyboardEvent)) return;\n        if (event.key === \"Escape\") {\n            const closeDialogButtonElement = this.dialogElement.querySelector(\"#close-dialog-button\");\n            if (!(closeDialogButtonElement instanceof HTMLElement)) return;\n            closeDialogButtonElement.click();\n        }\n    }\n}\nwindow.customElements.define(\"modal-dialog\", $a1587808b9f6932a$export$c3667d0270320762);\n\n\nvar $735bd98e66362881$export$3ef567a9849880c2 = ':is(button, summary, [href], input, select, textarea, [tabindex]):not([tabindex=\"-1\"]):not([type=\"hidden\"]):not([disabled]):not([readonly])';\n\n\nclass $085f3be498b52031$export$979768f00416c2f3 extends HTMLElement {\n    constructor(){\n        super();\n        this.boundKeydownHandler = this.handleKeydown.bind(this);\n        this.boundToggleHandler = this.handleToggle.bind(this);\n        this.boundFocusoutHandler = this.handleFocusout.bind(this);\n        const detailsElement = this.querySelector(\"details\");\n        if (!(detailsElement instanceof HTMLDetailsElement)) throw new Error(\"Could not find details element\");\n        this.detailsElement = detailsElement;\n        const summaryElement = this.querySelector(\"summary\");\n        if (!(summaryElement instanceof HTMLElement)) throw new Error(\"Could not find summary element\");\n        this.summaryElement = summaryElement;\n        const menuElement = this.querySelector('[role=\"menu\"]');\n        if (!(menuElement instanceof HTMLElement)) throw new Error(\"Could not find menu element\");\n        function isHtmlElement(element) {\n            return element instanceof HTMLElement;\n        }\n        const menuItemElements = Array.from(menuElement.querySelectorAll('[role=\"menuitem\"]')).filter(isHtmlElement);\n        this.menuItemElements = menuItemElements;\n    }\n    connectedCallback() {\n        this.addEventListener(\"keydown\", this.boundKeydownHandler);\n        this.addEventListener(\"focusout\", this.boundFocusoutHandler);\n        this.detailsElement.addEventListener(\"toggle\", this.boundToggleHandler);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"keydown\", this.boundKeydownHandler);\n        this.removeEventListener(\"focusout\", this.boundFocusoutHandler);\n        this.detailsElement.removeEventListener(\"toggle\", this.boundToggleHandler);\n    }\n    positionPopover() {\n        const { left: left, top: top, height: height, width: width } = this.summaryElement.getBoundingClientRect();\n        const translateX = left > window.innerWidth / 2 ? `calc(-100% - ${width}px)` : \"0px\";\n        const translateY = top > window.innerHeight / 2 ? `calc(-100% + ${height}px)` : \"0px\";\n        const transformValue = `translateX(${translateX}) translateY(${translateY})`;\n        this.style.setProperty(\"--popover-transform\", transformValue);\n        this.style.setProperty(\"--popover-left\", `${left + width}px`);\n        this.style.setProperty(\"--popover-top\", `${top}px`);\n    }\n    handleKeydown(event) {\n        if (!(event instanceof KeyboardEvent)) return;\n        if (!this.detailsElement.open) {\n            if ([\n                \" \",\n                \"Enter\"\n            ].includes(event.key)) this.positionPopover();\n            return;\n        }\n        if (event.key === \"Escape\") {\n            this.summaryElement.focus();\n            this.detailsElement.open = false;\n        }\n        const menuItemElement = event.composedPath().find((element)=>{\n            return element instanceof HTMLElement && element.matches('[role=\"menuitem\"]');\n        });\n        if (!(menuItemElement instanceof HTMLElement)) return;\n        const summaryElement = event.composedPath().find((element)=>{\n            return element instanceof HTMLElement && element.closest(\"summary\");\n        });\n        if (summaryElement) return;\n        if (event.key === \"ArrowUp\") {\n            event.preventDefault();\n            this.handleArrowUp(menuItemElement);\n        } else if (event.key === \"ArrowDown\") {\n            event.preventDefault();\n            this.handleArrowDown(menuItemElement);\n        }\n    }\n    handleArrowUp(menuItemElement) {\n        const menuItemElementIndex = this.menuItemElements.indexOf(menuItemElement);\n        if (menuItemElementIndex === -1) return;\n        const previousMenuItemElement = this.menuItemElements[menuItemElementIndex - 1] || this.menuItemElements[this.menuItemElements.length - 1];\n        if (!(previousMenuItemElement instanceof HTMLElement)) return;\n        this.focusElement(previousMenuItemElement);\n    }\n    handleArrowDown(menuItemElement) {\n        const menuItemElementIndex = this.menuItemElements.indexOf(menuItemElement);\n        const nextMenuItemElement = this.menuItemElements[menuItemElementIndex + 1] || this.menuItemElements[0];\n        if (!(nextMenuItemElement instanceof HTMLElement)) return;\n        this.focusElement(nextMenuItemElement);\n    }\n    handleToggle() {\n        if (this.detailsElement.open) this.positionPopover();\n    }\n    focusElement(element) {\n        element.focus();\n        if (!element.contains(window.document.activeElement)) {\n            const focusableElement = element.querySelector((0, $735bd98e66362881$export$3ef567a9849880c2));\n            if (focusableElement instanceof HTMLElement) focusableElement.focus();\n        }\n    }\n    handleFocusout(event) {\n        if (!(event instanceof FocusEvent)) return;\n        if (!this.detailsElement.open) return;\n        const { relatedTarget: relatedTarget } = event;\n        if (!(relatedTarget instanceof HTMLElement)) return;\n        if (this === relatedTarget || this.contains(relatedTarget)) return;\n        this.detailsElement.open = false;\n    }\n}\nwindow.customElements.define(\"flyout-menu\", $085f3be498b52031$export$979768f00416c2f3);\n\n\nconst $46b8a5f9dbdf2b36$export$b02966d201c4b770 = '[role=\"gridcell\"], [role=\"columnheader\"], [role=\"rowheader\"]';\nconst $46b8a5f9dbdf2b36$export$6d51e1b593672f77 = `[data-selectable]:is(${$46b8a5f9dbdf2b36$export$b02966d201c4b770})`;\nconst $46b8a5f9dbdf2b36$export$553fc5313bf47924 = ':is(:is(auto-save-search, auto-save-text) input, input[type=\"checkbox\"])';\nconst $46b8a5f9dbdf2b36$export$fa77d9661506f409 = 'flyout-menu [role=\"menu\"]';\nfunction $46b8a5f9dbdf2b36$export$cd96f2fd0e308444(element) {\n    if (!(element instanceof Element)) return false;\n    const flyoutMenuElement = element.closest($46b8a5f9dbdf2b36$export$fa77d9661506f409);\n    return flyoutMenuElement instanceof HTMLElement;\n}\nfunction $46b8a5f9dbdf2b36$export$211442cb55fb93(element) {\n    return element instanceof HTMLElement;\n}\nconst $46b8a5f9dbdf2b36$export$3ef567a9849880c2 = ':is(a, button, summary, [href], input, select, textarea, [tabindex]):not([tabindex=\"-1\"]):not([type=\"hidden\"]):not([disabled]):not([readonly])';\n\n\n\nclass $a6dc55993fa449ed$export$83aba40036977c4e extends HTMLElement {\n    constructor(){\n        super();\n        const gridElement = this.querySelector('[role=\"grid\"]');\n        if (!(gridElement instanceof HTMLElement)) throw new Error(\"Could not find grid element\");\n        this.gridElement = gridElement;\n    }\n    getClosestCellElementFromPoint(event) {\n        if (event instanceof PointerEvent) {\n            let closestCellElement = null;\n            const touchTarget = window.document.elementFromPoint(event.clientX, event.clientY);\n            if (touchTarget instanceof HTMLElement) closestCellElement = touchTarget.closest((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770));\n            return closestCellElement;\n        } else return this.getClosestCellElementFromComposedPath(event);\n    }\n    getClosestCellElementFromComposedPath(event) {\n        const composedPath = event.composedPath();\n        const closestCellElement = composedPath.find((element)=>{\n            if (!(element instanceof HTMLElement)) return false;\n            return element.matches((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770));\n        });\n        if (!(closestCellElement instanceof HTMLElement)) return null;\n        return closestCellElement;\n    }\n    updateHighlightElement(highlightElement, cellElement, originCellElement) {\n        if (!highlightElement) return;\n        const closestRowElement = cellElement.closest('[role=\"row\"]');\n        if (!(closestRowElement instanceof HTMLElement)) return;\n        const draggedRow = originCellElement.closest('[role=\"row\"]');\n        if (!(draggedRow instanceof HTMLElement)) return;\n        const closestCellColumnIndex = Array.from(closestRowElement.querySelectorAll((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770))).indexOf(cellElement);\n        const originCellColumnIndex = Array.from(draggedRow.querySelectorAll((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770))).indexOf(originCellElement);\n        const closestCellLeft = cellElement.getBoundingClientRect().left;\n        const closestCellRight = cellElement.getBoundingClientRect().right;\n        const originCellLeft = originCellElement.getBoundingClientRect().left;\n        const originCellRight = originCellElement.getBoundingClientRect().right;\n        const closestCellTop = cellElement.getBoundingClientRect().top;\n        const closestCellBottom = cellElement.getBoundingClientRect().bottom;\n        const originCellTop = originCellElement.getBoundingClientRect().top;\n        const originCellBottom = originCellElement.getBoundingClientRect().bottom;\n        const isSameCell = cellElement === originCellElement;\n        const isoriginCellBeforeClosestCell = originCellColumnIndex < closestCellColumnIndex && !isSameCell;\n        const isoriginCellAfterClosestCell = originCellColumnIndex > closestCellColumnIndex && !isSameCell;\n        const isoriginCellAboveClosestCell = originCellTop < closestCellTop && !isSameCell;\n        const isoriginCellBelowClosestCell = originCellBottom > closestCellBottom && !isSameCell;\n        const left = isSameCell ? originCellLeft : isoriginCellBeforeClosestCell ? originCellLeft : closestCellLeft;\n        const right = isSameCell ? originCellRight : isoriginCellAfterClosestCell ? originCellRight : closestCellRight;\n        const top = isSameCell ? originCellTop : isoriginCellAboveClosestCell ? originCellTop : closestCellTop;\n        const bottom = isSameCell ? originCellBottom : isoriginCellBelowClosestCell ? originCellBottom : closestCellBottom;\n        highlightElement.style.left = `${left}px`;\n        highlightElement.style.top = `${top}px`;\n        highlightElement.style.width = `${right - left}px`;\n        highlightElement.style.height = `${bottom - top}px`;\n        highlightElement.style.border = \"3px solid var(--swatch-interactive)\";\n    }\n    initializeHighlightElement(highlightElement, cellElement) {\n        if (highlightElement) return null;\n        highlightElement = window.document.createElement(\"div\");\n        highlightElement.classList.add(\"highlight\");\n        const { left: left, top: top } = cellElement.getBoundingClientRect();\n        highlightElement.style.top = `${top}px`;\n        highlightElement.style.left = `${left}px`;\n        this.appendChild(highlightElement);\n        return highlightElement;\n    }\n    updateSelectedCells(highlightElement) {\n        if (!highlightElement) return;\n        const { top: top, left: left, bottom: bottom, right: right } = highlightElement.getBoundingClientRect();\n        const allCellElements = Array.from(this.gridElement.querySelectorAll((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770))).filter((0, $46b8a5f9dbdf2b36$export$211442cb55fb93));\n        const markCellSelected = (cellElement)=>{\n            cellElement.setAttribute(\"aria-selected\", \"true\");\n        };\n        const markCellUnselected = (cellElement)=>{\n            cellElement.removeAttribute(\"aria-selected\");\n        };\n        for (const cellElement of allCellElements){\n            const cellBounds = cellElement.getBoundingClientRect();\n            const isTopWithinBounds = Math.ceil(cellBounds.top) >= Math.ceil(top);\n            const isBottomWithinBounds = Math.ceil(cellBounds.bottom) <= Math.ceil(bottom);\n            const isLeftWithinBounds = Math.ceil(cellBounds.left) >= Math.ceil(left);\n            const isRightWithinBounds = Math.ceil(cellBounds.right) <= Math.ceil(right);\n            const isWithinBounds = isTopWithinBounds && isBottomWithinBounds && isLeftWithinBounds && isRightWithinBounds;\n            if (isWithinBounds) markCellSelected(cellElement);\n            else markCellUnselected(cellElement);\n        }\n    }\n    selectCellElement(options) {\n        const { relativeCellElement: relativeCellElement, targetCellElement: targetCellElement, originCellElement: originCellElement, highlightElement: highlightElement } = options;\n        let newHighlightElement = highlightElement;\n        let newOriginCellElement = originCellElement;\n        if (!highlightElement) {\n            newHighlightElement = this.initializeHighlightElement(highlightElement, relativeCellElement);\n            newOriginCellElement = relativeCellElement;\n        }\n        this.updateHighlightElement(newHighlightElement, targetCellElement, newOriginCellElement || relativeCellElement);\n        this.updateSelectedCells(newHighlightElement);\n        return {\n            highlightElement: newHighlightElement,\n            originCellElement: newOriginCellElement\n        };\n    }\n    focusCellElement(cellElement) {\n        cellElement.focus();\n        if (!cellElement.contains(window.document.activeElement)) {\n            const focusableElement = cellElement.querySelector((0, $46b8a5f9dbdf2b36$export$3ef567a9849880c2));\n            if (focusableElement instanceof HTMLElement) focusableElement.focus();\n        }\n    }\n    removeHighlightElement(highlightElement, originCellElement) {\n        const allCellElements = Array.from(this.gridElement.querySelectorAll((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77)));\n        for (const cellElement of allCellElements){\n            cellElement.removeAttribute(\"aria-selected\");\n            cellElement.removeAttribute(\"data-selected\");\n        }\n        if (!highlightElement || !originCellElement) return;\n        this.updateHighlightElement(highlightElement, originCellElement, originCellElement);\n        this.updateSelectedCells(highlightElement);\n        highlightElement.remove();\n        return {\n            highlightElement: null,\n            originCellElement: null,\n            lastSelectedCellElement: null\n        };\n    }\n    clearCellSelection() {\n        if (\"dragHighlightElement\" in this && \"dragOriginCellElement\" in this) {\n            if (((0, $46b8a5f9dbdf2b36$export$211442cb55fb93)(this.dragHighlightElement) || this.dragHighlightElement === null) && ((0, $46b8a5f9dbdf2b36$export$211442cb55fb93)(this.dragOriginCellElement) || this.dragOriginCellElement === null)) {\n                const result = this.removeHighlightElement(this.dragHighlightElement, this.dragOriginCellElement);\n                Object.assign(this, result);\n            }\n        }\n        if (\"keyboardHighlightElement\" in this && \"keyboardOriginCellElement\" in this) {\n            if (((0, $46b8a5f9dbdf2b36$export$211442cb55fb93)(this.keyboardHighlightElement) || this.keyboardHighlightElement === null) && ((0, $46b8a5f9dbdf2b36$export$211442cb55fb93)(this.keyboardOriginCellElement) || this.keyboardOriginCellElement === null)) {\n                const result = this.removeHighlightElement(this.keyboardHighlightElement, this.keyboardOriginCellElement);\n                Object.assign(this, result);\n            }\n        }\n    }\n    clearRowSelection() {\n        const selectMultipleRowsCheckbox = this.querySelector('select-all-checkbox input[type=\"checkbox\"]');\n        if (!(selectMultipleRowsCheckbox instanceof HTMLInputElement)) return;\n        const selectMultipleRowsForm = selectMultipleRowsCheckbox.form;\n        if (!(selectMultipleRowsForm instanceof HTMLFormElement)) return;\n        const rawRowSelectionFormData = new FormData(selectMultipleRowsForm);\n        const rowSelectionFormData = Object.fromEntries(rawRowSelectionFormData.entries());\n        if (rowSelectionFormData[\"row[]\"] !== undefined) {\n            const formElements = Array.from(selectMultipleRowsForm.elements);\n            function isRowSelectionCheckbox(formElement) {\n                return formElement instanceof HTMLInputElement && formElement.type === \"checkbox\" && formElement.name === \"row[]\";\n            }\n            const rowCheckboxElements = formElements.filter(isRowSelectionCheckbox);\n            for (const rowCheckboxElement of rowCheckboxElements)rowCheckboxElement.checked = false;\n        }\n    }\n    selectAllRows() {\n        const selectMultipleRowsCheckbox = this.querySelector('select-all-checkbox input[type=\"checkbox\"]');\n        if (!(selectMultipleRowsCheckbox instanceof HTMLInputElement)) return;\n        const selectMultipleRowsForm = selectMultipleRowsCheckbox.form;\n        if (!(selectMultipleRowsForm instanceof HTMLFormElement)) return;\n        const rowCheckboxElements = Array.from(selectMultipleRowsForm.elements).filter((formElement)=>formElement instanceof HTMLInputElement && formElement.type === \"checkbox\" && formElement.name === \"row[]\");\n        for (const rowCheckboxElement of rowCheckboxElements)rowCheckboxElement.checked = true;\n    }\n    selectAllCells() {\n        const allCellElements = Array.from(this.gridElement.querySelectorAll((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77)));\n        for (const cellElement of allCellElements){\n            cellElement.setAttribute(\"aria-selected\", \"true\");\n            cellElement.setAttribute(\"data-selected\", \"\");\n        }\n    }\n}\n\n\nfunction $7aa7c6f5843fc5b7$export$8428588be83868fa(event) {\n    event.preventDefault();\n}\n\n\nfunction $602e89375ac1c529$export$b70eff784f2f99b(event) {\n    if (!(event instanceof KeyboardEvent)) return;\n    if (!this.isDragShiftKeyPressed) this.isDragShiftKeyPressed = event.key === \"Shift\" || event.shiftKey;\n}\n\n\n\nfunction $b7d8a294780e2f44$export$a9b1da924122fb14(event) {\n    if (!(event instanceof KeyboardEvent)) return;\n    this.isDragShiftKeyPressed = event.shiftKey;\n    const allCells = Array.from(this.gridElement.querySelectorAll((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77)));\n    for (const cell of allCells)if (cell.hasAttribute(\"aria-selected\")) cell.setAttribute(\"data-selected\", \"\");\n    else cell.removeAttribute(\"data-selected\");\n    if (!this.isDragShiftKeyPressed) {\n        if (this.dragHighlightElement) this.dragHighlightElement.remove();\n        this.dragHighlightElement = null;\n        this.dragOriginCellElement = null;\n        this.isDragging = false;\n        const selectedCells = Array.from(this.gridElement.querySelectorAll(`[data-selected]:is(${(0, $46b8a5f9dbdf2b36$export$b02966d201c4b770)})`));\n        for (const selectedCell of selectedCells)selectedCell.removeAttribute(\"data-selected\");\n    }\n}\n\n\n\nfunction $d947af6bab5cfdbc$export$93771487a17c6e62(event) {\n    if (!(event instanceof PointerEvent)) return;\n    const closestCellElement = this.getClosestCellElementFromComposedPath(event);\n    if (!closestCellElement) return;\n    this.isPointerDown = true;\n    this.focusCellElement(closestCellElement);\n    if (!closestCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.clearRowSelection();\n    const result = this.removeHighlightElement(this.dragHighlightElement, this.dragOriginCellElement);\n    Object.assign(this, result);\n    this.dragHighlightElement = this.initializeHighlightElement(this.dragHighlightElement, closestCellElement);\n    this.dragOriginCellElement = closestCellElement;\n}\n\n\n\nfunction $17acb242306e208c$export$afdb74934b867815(event) {\n    if (!(event instanceof PointerEvent)) return;\n    if (!this.isPointerDown) return;\n    window.document.body.classList.add(\"prevent-scroll\");\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n    const closestCellElement = this.getClosestCellElementFromPoint(event);\n    if (!closestCellElement || !closestCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    if (!(this.dragOriginCellElement instanceof HTMLElement)) return;\n    this.isDragging = true;\n    this.updateHighlightElement(this.dragHighlightElement, closestCellElement, this.dragOriginCellElement);\n    this.lastDragSelectedCellElement = closestCellElement;\n    this.updateSelectedCells(this.dragHighlightElement);\n}\n\n\nfunction $90ceed6536e5aceb$export$98f87c7ed68883bb(event) {\n    if (!(event instanceof PointerEvent)) return;\n    window.document.body.classList.remove(\"prevent-scroll\");\n    this.isPointerDown = false;\n    this.isDragging = false;\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n    const closestCellElement = this.getClosestCellElementFromPoint(event);\n    if (!closestCellElement) return;\n    this.dragHighlightElement?.remove();\n    this.dragHighlightElement = null;\n    this.dragOriginCellElement = null;\n    if (this.lastDragSelectedCellElement && this.lastDragSelectedCellElement !== this.dragOriginCellElement) this.focusCellElement(this.lastDragSelectedCellElement);\n    this.lastDragSelectedCellElement = null;\n}\n\n\nfunction $087a518f56bd37b7$export$e1f27cbade07ee9e(constructor) {\n    return class extends constructor {\n        constructor(){\n            super(...arguments);\n            this.isDragShiftKeyPressed = false;\n            this.isPointerDown = false;\n            this.isDragging = false;\n            this.lastDragSelectedCellElement = null;\n            this.dragOriginCellElement = null;\n            this.dragHighlightElement = null;\n            this.pointerId = 0;\n            this.boundPointerdownHandler = (0, $d947af6bab5cfdbc$export$93771487a17c6e62).bind(this);\n            this.boundPointermoveHandler = (0, $17acb242306e208c$export$afdb74934b867815).bind(this);\n            this.boundPointerupHandler = (0, $90ceed6536e5aceb$export$98f87c7ed68883bb).bind(this);\n            this.boundDragKeydownHandler = (0, $602e89375ac1c529$export$b70eff784f2f99b).bind(this);\n            this.boundDragKeyupHandler = (0, $b7d8a294780e2f44$export$a9b1da924122fb14).bind(this);\n            this.boundDragstartHandler = (0, $7aa7c6f5843fc5b7$export$8428588be83868fa).bind(this);\n        }\n        connectedCallback() {\n            if (constructor.prototype.connectedCallback) constructor.prototype.connectedCallback.call(this);\n            this.addEventListener(\"pointerdown\", this.boundPointerdownHandler);\n            this.addEventListener(\"pointermove\", this.boundPointermoveHandler);\n            this.addEventListener(\"pointerup\", this.boundPointerupHandler, {\n                capture: true\n            });\n            this.addEventListener(\"pointercancel\", this.boundPointerupHandler, {\n                capture: true\n            });\n            this.addEventListener(\"keydown\", this.boundDragKeydownHandler);\n            this.addEventListener(\"keyup\", this.boundDragKeyupHandler);\n            this.addEventListener(\"dragstart\", this.boundDragstartHandler);\n        }\n        disconnectedCallback() {\n            if (constructor.prototype.disconnectedCallback) constructor.prototype.disconnectedCallback.call(this);\n            this.removeEventListener(\"pointerdown\", this.boundPointerdownHandler);\n            this.removeEventListener(\"pointermove\", this.boundPointermoveHandler);\n            this.removeEventListener(\"pointerup\", this.boundPointerupHandler, {\n                capture: true\n            });\n            this.removeEventListener(\"pointercancel\", this.boundPointerupHandler, {\n                capture: true\n            });\n            this.removeEventListener(\"keydown\", this.boundDragKeydownHandler);\n            this.removeEventListener(\"keyup\", this.boundDragKeyupHandler);\n            this.removeEventListener(\"dragstart\", this.boundDragstartHandler);\n        }\n    };\n}\nfunction $087a518f56bd37b7$export$f57b910d0a4217bd() {\n    return $087a518f56bd37b7$export$e1f27cbade07ee9e;\n}\n\n\n\nfunction $fd1f2862c3d3d003$export$8fd17b28079337b1(event, cellElement) {\n    event.preventDefault();\n    const rowElement = cellElement.closest('[role=\"row\"]');\n    if (!rowElement) return;\n    const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\n    const gridElement = rowElement.closest('[role=\"grid\"]');\n    if (!(gridElement instanceof HTMLElement)) return;\n    const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\n    const rowIndex = rowElements.indexOf(rowElement);\n    const targetRowElement = rowElements[rowIndex + 1];\n    if (!(targetRowElement instanceof HTMLElement)) return;\n    const targetRowElementCells = Array.from(targetRowElement.children);\n    const targetCellElement = targetRowElementCells[Math.min(targetRowElementCells.length - 1, cellIndex)];\n    if (!(targetCellElement instanceof HTMLElement)) return;\n    if (this.isKeyboardShiftKeyPressed && !targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.focusCellElement(targetCellElement);\n    if (!this.isKeyboardShiftKeyPressed) return;\n    if (!cellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    if (!targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.clearRowSelection();\n    const selectionResult = this.selectCellElement({\n        targetCellElement: targetCellElement,\n        relativeCellElement: cellElement,\n        originCellElement: this.keyboardOriginCellElement,\n        highlightElement: this.keyboardHighlightElement\n    });\n    if (selectionResult) {\n        this.keyboardHighlightElement = selectionResult.highlightElement;\n        this.keyboardOriginCellElement = selectionResult.originCellElement;\n    }\n}\n\n\n\nfunction $ae8d75c3d232cd02$export$c3ef9c33105e6a98(event, cellElement) {\n    event.preventDefault();\n    const targetCellElement = cellElement.previousElementSibling;\n    if (!(targetCellElement instanceof HTMLElement)) return;\n    if (this.isKeyboardShiftKeyPressed && !targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.focusCellElement(targetCellElement);\n    if (!this.isKeyboardShiftKeyPressed) return;\n    if (!cellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    if (!targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.clearRowSelection();\n    const selectionResult = this.selectCellElement({\n        targetCellElement: targetCellElement,\n        relativeCellElement: cellElement,\n        originCellElement: this.keyboardOriginCellElement,\n        highlightElement: this.keyboardHighlightElement\n    });\n    if (selectionResult) {\n        this.keyboardHighlightElement = selectionResult.highlightElement;\n        this.keyboardOriginCellElement = selectionResult.originCellElement;\n    }\n}\n\n\n\nfunction $4639fecf24f44b91$export$3be183d81a4d5ed0(event, cellElement) {\n    event.preventDefault();\n    const targetCellElement = cellElement.nextElementSibling;\n    if (!(targetCellElement instanceof HTMLElement)) return;\n    if (this.isKeyboardShiftKeyPressed && !targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.focusCellElement(targetCellElement);\n    if (!this.isKeyboardShiftKeyPressed) return;\n    if (!cellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    if (!targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.clearRowSelection();\n    const selectionResult = this.selectCellElement({\n        targetCellElement: targetCellElement,\n        relativeCellElement: cellElement,\n        originCellElement: this.keyboardOriginCellElement,\n        highlightElement: this.keyboardHighlightElement\n    });\n    if (selectionResult) {\n        this.keyboardHighlightElement = selectionResult.highlightElement;\n        this.keyboardOriginCellElement = selectionResult.originCellElement;\n    }\n}\n\n\n\nfunction $ee80b4c0bcdd3ace$export$faaa99bf89cee3fc(event, cellElement) {\n    event.preventDefault();\n    const rowElement = cellElement.closest('[role=\"row\"]');\n    if (!rowElement) return;\n    const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\n    const gridElement = rowElement.closest('[role=\"grid\"]');\n    if (!(gridElement instanceof HTMLElement)) return;\n    const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\n    const rowIndex = rowElements.indexOf(rowElement);\n    const targetRowElement = rowElements[rowIndex - 1];\n    if (!(targetRowElement instanceof HTMLElement)) return;\n    const targetRowElementCells = Array.from(targetRowElement.children);\n    const targetCellElement = targetRowElementCells[Math.min(targetRowElementCells.length - 1, cellIndex)];\n    if (!(targetCellElement instanceof HTMLElement)) return;\n    if (this.isKeyboardShiftKeyPressed && !targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.focusCellElement(targetCellElement);\n    if (!this.isKeyboardShiftKeyPressed) return;\n    if (!cellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    if (!targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.clearRowSelection();\n    const selectionResult = this.selectCellElement({\n        targetCellElement: targetCellElement,\n        relativeCellElement: cellElement,\n        originCellElement: this.keyboardOriginCellElement,\n        highlightElement: this.keyboardHighlightElement\n    });\n    if (selectionResult) {\n        this.keyboardHighlightElement = selectionResult.highlightElement;\n        this.keyboardOriginCellElement = selectionResult.originCellElement;\n    }\n}\n\n\n\nfunction $e1f3152389df549c$export$471c4c6c1d1a0512(event, cellElement) {\n    const selectedCellElements = Array.from(this.querySelectorAll(`[aria-selected=\"true\"]:is(${(0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77)})`));\n    if (selectedCellElements.length) this.dispatchEvent(new CustomEvent(\"view-container:clear-cells\", {\n        bubbles: true,\n        composed: true,\n        detail: selectedCellElements\n    }));\n    const hasCheckedSelectMultipleRowsCheckbox = this.matches(':has(input[type=\"checkbox\"][name=\"row[]\"]:checked)');\n    if (hasCheckedSelectMultipleRowsCheckbox) this.dispatchEvent(new CustomEvent(\"view-container:delete-rows\", {\n        bubbles: true,\n        composed: true\n    }));\n}\n\n\n\nfunction $e77160b986f599e1$export$cfa07126723ce987(event, cellElement) {\n    event.preventDefault();\n    const gridElement = cellElement.closest('[role=\"grid\"]');\n    if (!(gridElement instanceof HTMLElement)) return;\n    const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\n    const targetRowElement = rowElements[rowElements.length - 1];\n    if (!(targetRowElement instanceof HTMLElement)) return;\n    const targetRowElementCells = Array.from(targetRowElement.children);\n    const targetCellElement = targetRowElementCells[targetRowElementCells.length - 1];\n    if (!(targetCellElement instanceof HTMLElement)) return;\n    this.focusCellElement(targetCellElement);\n    if (!this.isKeyboardShiftKeyPressed) return;\n    if (!cellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    if (!targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.clearRowSelection();\n    const selectionResult = this.selectCellElement({\n        targetCellElement: targetCellElement,\n        relativeCellElement: cellElement,\n        originCellElement: this.keyboardOriginCellElement,\n        highlightElement: this.keyboardHighlightElement\n    });\n    if (selectionResult) {\n        this.keyboardHighlightElement = selectionResult.highlightElement;\n        this.keyboardOriginCellElement = selectionResult.originCellElement;\n    }\n}\n\n\nfunction $8a9000db06855e46$export$f2213229c327708f(event) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n    this.clearCellSelection();\n    this.clearRowSelection();\n}\n\n\n\nfunction $aa1984e976d1a729$export$e2f6e3a3a819615b(event, cellElement) {\n    event.preventDefault();\n    const gridElement = cellElement.closest('[role=\"grid\"]');\n    if (!(gridElement instanceof HTMLElement)) return;\n    const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\n    const targetRowElement = rowElements[0];\n    if (!(targetRowElement instanceof HTMLElement)) return;\n    const targetRowElementCells = Array.from(targetRowElement.children);\n    const targetCellElement = targetRowElementCells[0];\n    if (!(targetCellElement instanceof HTMLElement)) return;\n    this.focusCellElement(targetCellElement);\n    if (!this.isKeyboardShiftKeyPressed) return;\n    if (!cellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    if (!targetCellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77))) return;\n    this.clearRowSelection();\n    const selectionResult = this.selectCellElement({\n        targetCellElement: targetCellElement,\n        relativeCellElement: cellElement,\n        originCellElement: this.keyboardOriginCellElement,\n        highlightElement: this.keyboardHighlightElement\n    });\n    if (selectionResult) {\n        this.keyboardHighlightElement = selectionResult.highlightElement;\n        this.keyboardOriginCellElement = selectionResult.originCellElement;\n    }\n}\n\n\n\nfunction $6021fa1311fc9072$export$b70eff784f2f99b(event) {\n    if (!(event instanceof KeyboardEvent)) return;\n    const isInFlyoutMenuElement = !!event.composedPath().find((0, $46b8a5f9dbdf2b36$export$cd96f2fd0e308444));\n    if (isInFlyoutMenuElement) return;\n    this.isKeyboardShiftKeyPressed = event.key === \"Shift\" || event.shiftKey;\n    const cellElement = event.composedPath().find((element)=>{\n        return element instanceof HTMLElement && element.matches((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770));\n    });\n    if (!(cellElement instanceof HTMLElement)) return;\n    const isEditingCellElement = cellElement.matches(':has(auto-save-text input[type=\"text\"]:not([data-read-only]))');\n    if (isEditingCellElement) {\n        this.clearCellSelection();\n        this.clearRowSelection();\n        return;\n    }\n    switch(event.key){\n        case \"Escape\":\n            this.handleEscape(event);\n            break;\n        case \"ArrowUp\":\n            this.handleArrowUp(event, cellElement);\n            break;\n        case \"ArrowDown\":\n            this.handleArrowDown(event, cellElement);\n            break;\n        case \"ArrowLeft\":\n            this.handleArrowLeft(event, cellElement);\n            break;\n        case \"ArrowRight\":\n            this.handleArrowRight(event, cellElement);\n            break;\n        case \"Home\":\n            this.handleHome(event, cellElement);\n            break;\n        case \"End\":\n            this.handleEnd(event, cellElement);\n            break;\n        case \"a\":\n            if (event.ctrlKey) {\n                if (cellElement.matches((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77)) && !isEditingCellElement) {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                    event.stopPropagation();\n                    this.selectAllCells();\n                }\n                if (cellElement.matches(':has([name=\"row[]\"])')) {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                    event.stopPropagation();\n                    this.selectAllRows();\n                }\n            }\n            break;\n        case \" \":\n            this.handleSpacebar(event, cellElement);\n            break;\n        case \"Delete\":\n        case \"Backspace\":\n            this.handleDelete(event, cellElement);\n        default:\n            break;\n    }\n}\n\n\nfunction $fff5c83593fc307c$export$a9b1da924122fb14(event) {\n    if (!(event instanceof KeyboardEvent)) return;\n    this.isKeyboardShiftKeyPressed = event.shiftKey;\n    if (!this.isKeyboardShiftKeyPressed) {\n        this.clearKeyboardHighlight();\n        this.sealKeyboardSelectedCells();\n    }\n}\n\n\n\nfunction $107972eed587d074$export$e906ed8736143ffc(event, cellElement) {\n    if (!this.isKeyboardShiftKeyPressed) return;\n    const inputElement = cellElement.querySelector((0, $46b8a5f9dbdf2b36$export$553fc5313bf47924));\n    if (!(inputElement instanceof HTMLInputElement)) return;\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n    this.sealKeyboardSelectedCells();\n    const selectionResult = this.selectCellElement({\n        targetCellElement: cellElement,\n        relativeCellElement: cellElement,\n        originCellElement: this.keyboardOriginCellElement,\n        highlightElement: this.keyboardHighlightElement\n    });\n    if (selectionResult) {\n        this.keyboardHighlightElement = selectionResult.highlightElement;\n        this.keyboardOriginCellElement = selectionResult.originCellElement;\n    }\n    this.clearKeyboardHighlight();\n}\n\n\n\nfunction $a2976fc1faaea066$var$KeyboardSelectionMixinFactory(constructor) {\n    return class extends constructor {\n        constructor(){\n            super(...arguments);\n            this.isKeyboardShiftKeyPressed = false;\n            this.keyboardOriginCellElement = null;\n            this.keyboardHighlightElement = null;\n            this.handleKeydown = (0, $6021fa1311fc9072$export$b70eff784f2f99b).bind(this);\n            this.handleKeyup = (0, $fff5c83593fc307c$export$a9b1da924122fb14).bind(this);\n            this.handleArrowUp = (0, $ee80b4c0bcdd3ace$export$faaa99bf89cee3fc).bind(this);\n            this.handleArrowDown = (0, $fd1f2862c3d3d003$export$8fd17b28079337b1).bind(this);\n            this.handleArrowLeft = (0, $ae8d75c3d232cd02$export$c3ef9c33105e6a98).bind(this);\n            this.handleArrowRight = (0, $4639fecf24f44b91$export$3be183d81a4d5ed0).bind(this);\n            this.handleHome = (0, $aa1984e976d1a729$export$e2f6e3a3a819615b).bind(this);\n            this.handleEnd = (0, $e77160b986f599e1$export$cfa07126723ce987).bind(this);\n            this.handleEscape = (0, $8a9000db06855e46$export$f2213229c327708f).bind(this);\n            this.handleSpacebar = (0, $107972eed587d074$export$e906ed8736143ffc).bind(this);\n            this.handleDelete = (0, $e1f3152389df549c$export$471c4c6c1d1a0512).bind(this);\n        }\n        connectedCallback() {\n            if (constructor.prototype.connectedCallback) constructor.prototype.connectedCallback.call(this);\n            this.addEventListener(\"keydown\", this.handleKeydown, {\n                capture: true\n            });\n            this.addEventListener(\"keyup\", this.handleKeyup);\n        }\n        disconnectedCallback() {\n            if (constructor.prototype.disconnectedCallback) constructor.prototype.disconnectedCallback.call(this);\n            this.removeEventListener(\"keydown\", this.handleKeydown, {\n                capture: true\n            });\n            this.removeEventListener(\"keyup\", this.handleKeyup);\n        }\n        sealKeyboardSelectedCells() {\n            const allCells = Array.from(this.gridElement.querySelectorAll((0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77)));\n            for (const cell of allCells)if (cell.hasAttribute(\"aria-selected\")) cell.setAttribute(\"data-selected\", \"\");\n            else cell.removeAttribute(\"data-selected\");\n        }\n        clearKeyboardHighlight() {\n            if (this.keyboardHighlightElement) this.keyboardHighlightElement.remove();\n            this.keyboardHighlightElement = null;\n            this.keyboardOriginCellElement = null;\n        }\n    };\n}\nfunction $a2976fc1faaea066$export$2512246716c6cb8c() {\n    return $a2976fc1faaea066$var$KeyboardSelectionMixinFactory;\n}\n\n\nvar $02d20b857b62d350$var$__decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet $02d20b857b62d350$export$7cd474321d18c0af = class ViewContainerElement extends (0, $a6dc55993fa449ed$export$83aba40036977c4e) {\n    constructor(){\n        super(...arguments);\n        this.boundHandleAutoSaveTextSave = this.handleAutoSaveTextSave.bind(this);\n        this.boundClearCellsHandler = this.handleClearCells.bind(this);\n        this.boundHandleAutoSaveTextToggleEditMode = this.handleAutoSaveTextToggleEditMode.bind(this);\n        this.boundHandleDeleteRows = this.handleDeleteRows.bind(this);\n        this.boundChangeHandler = this.handleChange.bind(this);\n    }\n    connectedCallback() {\n        this.addEventListener(\"view-container:clear-cells\", this.boundClearCellsHandler, {\n            capture: true\n        });\n        this.addEventListener(\"auto-save-text:save\", this.boundHandleAutoSaveTextSave);\n        this.addEventListener(\"auto-save-text:toggle-edit-mode\", this.boundHandleAutoSaveTextToggleEditMode);\n        this.addEventListener(\"view-container:delete-rows\", this.boundHandleDeleteRows);\n        this.addEventListener(\"change\", this.boundChangeHandler);\n        this.addEventListener(\"column-selector:select\", (event)=>{\n            if (!(event instanceof CustomEvent)) return;\n            const { detail: propertyName } = event;\n            if (!propertyName) return;\n            const closestCellElement = this.getClosestCellElementFromComposedPath(event);\n            if (!(closestCellElement instanceof HTMLElement)) return;\n            const closestRowElement = closestCellElement.closest('[role=\"row\"]');\n            if (!(closestRowElement instanceof HTMLElement)) return;\n            const columnIndex = Array.from(closestRowElement.querySelectorAll((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770))).indexOf(closestCellElement);\n            const rowElements = Array.from(this.querySelectorAll('[role=\"row\"]:not(:has([role=\"columnheader\"]))')).filter((0, $46b8a5f9dbdf2b36$export$211442cb55fb93));\n            const firstRowElement = rowElements[0];\n            const lastRowElement = rowElements[rowElements.length - 1];\n            const firstRowTargetCellElement = Array.from(firstRowElement.querySelectorAll((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770)))[columnIndex];\n            if (!(firstRowTargetCellElement instanceof HTMLElement)) return;\n            const lastRowTargetCellElement = Array.from(lastRowElement.querySelectorAll((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770)))[columnIndex];\n            if (!(lastRowTargetCellElement instanceof HTMLElement)) return;\n            const currentlySelectedCells = Array.from(this.querySelectorAll(`[aria-selected]:is(${(0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77)})`)).filter((0, $46b8a5f9dbdf2b36$export$211442cb55fb93));\n            this.clearRowSelection();\n            this.clearCellSelection();\n            if (\"keyboardHighlightElement\" in this && \"keyboardOriginCellElement\" in this) {\n                const selectionResult = this.selectCellElement({\n                    targetCellElement: lastRowTargetCellElement,\n                    relativeCellElement: firstRowTargetCellElement,\n                    originCellElement: firstRowTargetCellElement,\n                    highlightElement: null\n                });\n                this.keyboardOriginCellElement = firstRowTargetCellElement;\n                if (selectionResult) {\n                    this.keyboardHighlightElement = selectionResult.highlightElement;\n                    this.keyboardOriginCellElement = selectionResult.originCellElement;\n                }\n                const newlySelectedCells = Array.from(this.querySelectorAll(`[aria-selected]:is(${(0, $46b8a5f9dbdf2b36$export$6d51e1b593672f77)})`)).filter((0, $46b8a5f9dbdf2b36$export$211442cb55fb93));\n                if ((0, $46b8a5f9dbdf2b36$export$211442cb55fb93)(this.keyboardHighlightElement) && (0, $46b8a5f9dbdf2b36$export$211442cb55fb93)(this.keyboardOriginCellElement)) this.removeHighlightElement(this.keyboardHighlightElement, this.keyboardOriginCellElement);\n                for (const cellElement of [\n                    ...currentlySelectedCells,\n                    ...newlySelectedCells\n                ])cellElement.setAttribute(\"aria-selected\", \"true\");\n            }\n        });\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"view-container:clear-cells\", this.boundClearCellsHandler, {\n            capture: true\n        });\n        this.removeEventListener(\"auto-save-text:save\", this.boundHandleAutoSaveTextSave);\n        this.removeEventListener(\"auto-save-text:toggle-edit-mode\", this.boundHandleAutoSaveTextToggleEditMode);\n        this.removeEventListener(\"view-container:delete-rows\", this.boundHandleDeleteRows);\n        this.removeEventListener(\"change\", this.boundChangeHandler);\n    }\n    handleAutoSaveTextSave(event) {\n        if (!(event instanceof CustomEvent)) return;\n        const { target: target } = event;\n        if (!(target instanceof HTMLElement)) return;\n        const inputElement = target.querySelector((0, $46b8a5f9dbdf2b36$export$553fc5313bf47924));\n        if (!(inputElement instanceof HTMLInputElement)) return;\n        const rowElement = target.closest('[role=\"row\"]');\n        if (!(rowElement instanceof HTMLElement)) return;\n        const gridRows = Array.from(this.gridElement.querySelectorAll('[role=\"row\"]'));\n        const rowIndex = gridRows.indexOf(rowElement);\n        if (Number(rowIndex) !== gridRows.length - 1) return;\n        const addRowButtonElement = this.querySelector(\"#add-new-row-button\");\n        if (!(addRowButtonElement instanceof HTMLButtonElement)) throw new Error(\"Could not find add new row button element\");\n        const addRowFormElement = addRowButtonElement.form;\n        if (!(addRowFormElement instanceof HTMLFormElement)) throw new Error(\"Could not find add new row form element\");\n        const hiddenInputElement = document.createElement(\"input\");\n        hiddenInputElement.setAttribute(\"type\", \"hidden\");\n        hiddenInputElement.setAttribute(\"name\", \"_autofocus\");\n        hiddenInputElement.setAttribute(\"value\", inputElement.id);\n        addRowFormElement.append(hiddenInputElement);\n        addRowFormElement.submit();\n        hiddenInputElement.remove();\n    }\n    handleClearCells(event) {\n        if (!(event instanceof CustomEvent)) return;\n        if (!Array.isArray(event.detail)) return;\n        const cellElements = event.detail.filter((0, $46b8a5f9dbdf2b36$export$211442cb55fb93));\n        for (const cellElement of cellElements){\n            const autoSaveTextElement = cellElement.querySelector((0, $46b8a5f9dbdf2b36$export$553fc5313bf47924));\n            if (!(autoSaveTextElement instanceof HTMLInputElement)) continue;\n            autoSaveTextElement.value = \"\";\n        }\n        const clearCellsButtonElement = this.querySelector(\"#clear-cells-button\");\n        if (!(clearCellsButtonElement instanceof HTMLButtonElement)) throw new Error(\"Could not find clear cells button element\");\n        const clearCellsFormElement = clearCellsButtonElement.form;\n        if (!(clearCellsFormElement instanceof HTMLFormElement)) throw new Error(\"Could not find add new row form element\");\n        const hiddenInputElement = clearCellsFormElement.querySelector('input[type=\"hidden\"][name=\"cell[]\"]');\n        if (!(hiddenInputElement instanceof HTMLInputElement)) throw new Error(\"Could not find hidden input element\");\n        const cellsValue = cellElements.map((cellElement)=>{\n            const rowId = cellElement.getAttribute(\"data-row-id\");\n            if (!rowId) throw new Error(\"Could not find id attribute\");\n            const propertyId = cellElement.getAttribute(\"data-property-id\");\n            if (!propertyId) throw new Error(\"Could not find id attribute\");\n            return rowId + \":\" + propertyId;\n        }).join(\",\");\n        hiddenInputElement.setAttribute(\"value\", cellsValue);\n        fetch(clearCellsFormElement.action, {\n            method: clearCellsFormElement.method,\n            body: new FormData(clearCellsFormElement)\n        });\n    }\n    handleAutoSaveTextToggleEditMode(event) {\n        if (!(event instanceof CustomEvent)) return;\n        if (!(event.target instanceof HTMLElement)) return;\n        const cellElement = event.target.closest((0, $46b8a5f9dbdf2b36$export$b02966d201c4b770));\n        if (!(cellElement instanceof HTMLElement)) return;\n        const rowElement = cellElement.closest('[role=\"row\"]');\n        if (!(rowElement instanceof HTMLElement)) return;\n        const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\n        const rowElements = Array.from(this.gridElement.querySelectorAll('[role=\"row\"]'));\n        const rowIndex = rowElements.indexOf(rowElement);\n        const nextRowElement = rowElements[rowIndex + 1];\n        if (!(nextRowElement instanceof HTMLElement)) return;\n        const nextCellElement = nextRowElement.children[cellIndex];\n        if (!(nextCellElement instanceof HTMLElement)) return;\n        this.focusCellElement(nextCellElement);\n    }\n    handleDeleteRows() {\n        const selectMultipleRowsCheckbox = this.querySelector('select-all-checkbox input[type=\"checkbox\"]');\n        if (!(selectMultipleRowsCheckbox instanceof HTMLInputElement)) return;\n        const selectMultipleRowsForm = selectMultipleRowsCheckbox.form;\n        if (!(selectMultipleRowsForm instanceof HTMLFormElement)) return;\n        const rawRowSelectionFormData = new FormData(selectMultipleRowsForm);\n        const rowSelectionFormData = Object.fromEntries(rawRowSelectionFormData.entries());\n        if (rowSelectionFormData[\"row[]\"] === undefined) return;\n        const bulkActionsFormElement = this.querySelector(\"#select-multiple-rows-form\");\n        if (!(bulkActionsFormElement instanceof HTMLFormElement)) return;\n        const bulkActionSelectElement = bulkActionsFormElement.querySelector('[name=\"bulkAction\"]');\n        if (!(bulkActionSelectElement instanceof HTMLSelectElement)) return;\n        bulkActionSelectElement.value = \"DELETE\";\n        bulkActionsFormElement.submit();\n    }\n    handleChange(event) {\n        const cellElement = this.getClosestCellElementFromComposedPath(event);\n        if (!(cellElement instanceof HTMLElement)) return;\n        const hasRowSelctionCheckbox = cellElement.matches(':has(input[name=\"row[]\"])');\n        if (!hasRowSelctionCheckbox) return;\n        const rowSelectionCheckbox = cellElement.querySelector('input[name=\"row[]\"]');\n        if (!(rowSelectionCheckbox instanceof HTMLInputElement)) return;\n        this.clearCellSelection();\n    }\n};\n$02d20b857b62d350$export$7cd474321d18c0af = $02d20b857b62d350$var$__decorate([\n    (0, $087a518f56bd37b7$export$f57b910d0a4217bd)(),\n    (0, $a2976fc1faaea066$export$2512246716c6cb8c)()\n], $02d20b857b62d350$export$7cd474321d18c0af);\nwindow.customElements.define(\"view-container\", $02d20b857b62d350$export$7cd474321d18c0af);\n\n\nclass $7c25fa2a1ae2dfff$export$619d445163882427 extends HTMLElement {\n    constructor(){\n        super(...arguments);\n        this.boundClickHandler = this.handleClick.bind(this);\n        this.boundKeydownHandler = this.handleKeydown.bind(this);\n    }\n    connectedCallback() {\n        this.addEventListener(\"click\", this.boundClickHandler);\n        this.addEventListener(\"keydown\", this.boundKeydownHandler);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"click\", this.boundClickHandler);\n        this.removeEventListener(\"keydown\", this.boundKeydownHandler);\n    }\n    handleClick() {\n        const href = this.getAttribute(\"data-href\");\n        if (href === null) return;\n        window.location.href = href;\n    }\n    handleKeydown(event) {\n        if (!(event instanceof KeyboardEvent)) return;\n        if (event.key !== \"Enter\") return;\n        event.preventDefault();\n        this.handleClick();\n    }\n}\nwindow.customElements.define(\"hyper-link\", $7c25fa2a1ae2dfff$export$619d445163882427);\n\n\nconst $7a267d45199642fc$var$FOCUSABLE_ELEMENT_SELECTOR = ':is(button, [href], input, select, textarea):not([type=\"hidden\"]):not([disabled]):not([readonly])';\nclass $7a267d45199642fc$export$551c9975c7ac7be extends HTMLElement {\n    constructor(){\n        super();\n        this.boundToggleHandler = this.handleToggle.bind(this);\n        const detailsElement = this.querySelector(\"details\");\n        if (!(detailsElement instanceof HTMLDetailsElement)) throw new Error(\"Could not find details element\");\n        this.detailsElement = detailsElement;\n    }\n    connectedCallback() {\n        this.detailsElement.addEventListener(\"toggle\", this.boundToggleHandler);\n    }\n    disconnectedCallback() {\n        this.detailsElement.removeEventListener(\"toggle\", this.boundToggleHandler);\n    }\n    handleToggle() {\n        const focusableElements = Array.from(new Set([\n            ...Array.from(this.detailsElement.querySelectorAll(\"*:not(summary)\")).filter((element)=>{\n                return element.shadowRoot && element.shadowRoot.delegatesFocus;\n            }),\n            ...Array.from(this.detailsElement.querySelectorAll($7a267d45199642fc$var$FOCUSABLE_ELEMENT_SELECTOR))\n        ]));\n        if (this.detailsElement.open) {\n            for (const foucsableElement of focusableElements)foucsableElement.removeAttribute(\"tabindex\");\n            const [firstFocusableItem] = focusableElements;\n            if (!(firstFocusableItem instanceof HTMLElement)) return;\n            this.focusElement(firstFocusableItem);\n        } else for (const focusableElement of focusableElements)focusableElement.setAttribute(\"tabindex\", \"-1\");\n    }\n    focusElement(element) {\n        element.focus();\n        if (!element.contains(window.document.activeElement)) {\n            const focusableElement = element.querySelector($7a267d45199642fc$var$FOCUSABLE_ELEMENT_SELECTOR);\n            if (focusableElement instanceof HTMLElement) focusableElement.focus();\n        }\n    }\n}\nwindow.customElements.define(\"disclosure-widget\", $7a267d45199642fc$export$551c9975c7ac7be);\n\n\nclass $3c96a2f9447f3c76$export$57886f95182653a1 extends HTMLElement {\n    constructor(){\n        super();\n        this.boundClickHandler = this.handleClick.bind(this);\n        const buttonElement = this.querySelector(\"button\");\n        if (!(buttonElement instanceof HTMLElement)) throw new Error(\"No button element provided\");\n        this.buttonElement = buttonElement;\n    }\n    connectedCallback() {\n        this.buttonElement.addEventListener(\"click\", this.boundClickHandler);\n    }\n    disconnectedCallback() {\n        this.buttonElement.removeEventListener(\"click\", this.boundClickHandler);\n    }\n    handleClick() {\n        const propertyName = this.getAttribute(\"data-property\");\n        if (!propertyName) return;\n        this.dispatchEvent(new CustomEvent(\"column-selector:select\", {\n            bubbles: true,\n            composed: true,\n            detail: propertyName\n        }));\n        this.dispatchEvent(new KeyboardEvent(\"keydown\", {\n            bubbles: true,\n            composed: true,\n            key: \"Escape\"\n        }));\n    }\n}\nwindow.customElements.define(\"column-selector\", $3c96a2f9447f3c76$export$57886f95182653a1);\n\n\n\n})();\n//# sourceMappingURL=client.js.map\n","import 'elements/AutoSaveTextElement';\r\nimport 'elements/AutoSaveCheckboxElement';\r\nimport 'elements/AutoSaveSearchElement';\r\nimport 'elements/ClearSearchElement';\r\nimport 'elements/UnloadHandlerElement';\r\nimport 'elements/PostFormElement';\r\nimport 'elements/SelectAllCheckboxElement';\r\nimport 'elements/ModalDialogElement';\r\nimport 'elements/FlyoutMenuElement';\r\nimport 'elements/ViewContainerElement';\r\nimport 'elements/HyperLinkElement';\r\nimport 'elements/DisclosureWidgetElement';\r\nimport 'elements/ColumnSelectorElement';\r\n","import { BaseAutoSaveElement } from 'elements/BaseAutoSaveElement';\r\n\r\nexport class AutoSaveTextElement extends BaseAutoSaveElement {\r\n  private boundKeydownHandler = this.handleKeydown.bind(this);\r\n  private boundClickHandler = this.handleClick.bind(this);\r\n  private boundBlurHandler = this.handleBlur.bind(this);\r\n\r\n  connectedCallback() {\r\n    this.inputElement.addEventListener('change', this.boundChangeHandler);\r\n    this.inputElement.addEventListener('keydown', this.boundKeydownHandler);\r\n    this.inputElement.addEventListener('blur', this.boundBlurHandler);\r\n    this.inputElement.addEventListener('pointerup', this.boundClickHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.inputElement.removeEventListener('change', this.boundChangeHandler);\r\n    this.inputElement.removeEventListener('keydown', this.boundKeydownHandler);\r\n    this.inputElement.removeEventListener('blur', this.boundBlurHandler);\r\n    this.inputElement.removeEventListener('pointerup', this.boundClickHandler);\r\n  }\r\n\r\n  enterEditMode() {\r\n    this.inputElement.removeAttribute('data-read-only');\r\n  }\r\n\r\n  exitEditMode() {\r\n    this.inputElement.setAttribute('data-read-only', '');\r\n\r\n    if (this.inputElement.value !== this.inputElement.getAttribute('value')) {\r\n      this.submitData().then(() => {\r\n        this.markClean();\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleEditMode() {\r\n    if (this.inputElement.dataset.readOnly === '') {\r\n      this.enterEditMode();\r\n    } else {\r\n      this.exitEditMode();\r\n    }\r\n  }\r\n\r\n  handleClick() {\r\n    this.enterEditMode();\r\n  }\r\n\r\n  handleBlur() {\r\n    this.exitEditMode();\r\n  }\r\n\r\n  handleKeydown(event: Event) {\r\n    if (!(event instanceof KeyboardEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (event.key === 'Escape') {\r\n      if (this.inputElement.dataset.readOnly !== '') {\r\n        this.exitEditMode();\r\n      }\r\n    }\r\n\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.toggleEditMode();\r\n\r\n      if (this.inputElement.dataset.readOnly === '') {\r\n        this.dispatchEvent(\r\n          new CustomEvent('auto-save-text:toggle-edit-mode', {\r\n            composed: true,\r\n            bubbles: true,\r\n          }),\r\n        );\r\n\r\n        this.submitData().then(() => {\r\n          this.dispatchEvent(\r\n            new CustomEvent('auto-save-text:save', {\r\n              composed: true,\r\n              bubbles: true,\r\n            }),\r\n          );\r\n        });\r\n      } else {\r\n        this.inputElement.selectionStart = this.inputElement.selectionEnd =\r\n          this.inputElement.value.length;\r\n      }\r\n    }\r\n\r\n    if (event.key.length === 1 && /[a-zA-Z0-9-_ ]/.test(event.key)) {\r\n      if (this.inputElement.dataset.readOnly === '') {\r\n        this.toggleEditMode();\r\n        this.inputElement.value = '';\r\n        this.inputElement.selectionStart = this.inputElement.selectionEnd =\r\n          this.inputElement.value.length;\r\n      }\r\n    }\r\n  }\r\n\r\n  async submitData() {\r\n    const value = this.inputElement.value;\r\n    const formElement = this.inputElement.form;\r\n\r\n    if (!formElement) {\r\n      this.markDirty();\r\n      return;\r\n    }\r\n\r\n    const formAction = formElement.getAttribute('action');\r\n\r\n    if (!formAction) {\r\n      return;\r\n    }\r\n\r\n    const method = new FormData(formElement).get('_method')?.toString() || '';\r\n\r\n    if (['PUT', 'PATCH'].includes(method)) {\r\n      return this.patch(formAction, value)\r\n        .then(() => {\r\n          this.inputElement.setAttribute('value', value);\r\n          this.markClean();\r\n        })\r\n        .catch(() => {\r\n          this.markDirty();\r\n        });\r\n    } else {\r\n      this.markDirty();\r\n    }\r\n  }\r\n}\r\n\r\nwindow.customElements.define('auto-save-text', AutoSaveTextElement);\r\n","import { getUniqueId } from 'shared/getUniqueId';\r\nimport { DIRTY_ELEMENTS_KEY } from 'elements/UnloadHandlerElement';\r\n\r\nexport class BaseAutoSaveElement extends HTMLElement {\r\n  protected inputElement: HTMLInputElement;\r\n  protected inputId: string;\r\n  protected unloadHandlerElement: HTMLElement;\r\n  protected boundChangeHandler: (event: Event) => void;\r\n  protected boundInputHandler: (event: Event) => void;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    if (!this.shadowRoot) {\r\n      throw new Error('Declarative shadow root not supported');\r\n    }\r\n\r\n    const slotElement = this.shadowRoot.querySelector('slot');\r\n\r\n    if (!(slotElement instanceof HTMLSlotElement)) {\r\n      throw new Error('No slot element provided');\r\n    }\r\n\r\n    const assignedNodes = slotElement.assignedNodes();\r\n\r\n    if (!assignedNodes || !assignedNodes.length) {\r\n      throw new Error('No content provided');\r\n    }\r\n\r\n    function guardIsHTMLInputElement(node: Node): node is HTMLInputElement {\r\n      return node instanceof HTMLInputElement;\r\n    }\r\n\r\n    const inputElement = assignedNodes.find(guardIsHTMLInputElement);\r\n\r\n    if (!inputElement) {\r\n      throw new Error('No input element provided');\r\n    }\r\n\r\n    const unloadHandlerElement =\r\n      window.document.querySelector('unload-handler');\r\n\r\n    if (!(unloadHandlerElement instanceof HTMLElement)) {\r\n      throw new Error('No unload handler element found');\r\n    }\r\n\r\n    this.inputElement = inputElement;\r\n    this.inputId = inputElement.id || getUniqueId();\r\n    this.unloadHandlerElement = unloadHandlerElement;\r\n    this.boundChangeHandler = this.handleChange.bind(this);\r\n    this.boundInputHandler = this.handleInput.bind(this);\r\n  }\r\n\r\n  protected handleChange() {}\r\n\r\n  protected handleInput() {}\r\n\r\n  protected markDirty() {\r\n    const prev =\r\n      this.unloadHandlerElement.getAttribute(DIRTY_ELEMENTS_KEY) || '';\r\n    const dirtyElementsArray = !prev ? [] : prev.split(',');\r\n    dirtyElementsArray.push(this.inputId);\r\n    const uniqueDirtyElementsArray = Array.from(new Set(dirtyElementsArray));\r\n    const dirtyElementsString = uniqueDirtyElementsArray.join(',');\r\n    this.unloadHandlerElement.setAttribute(\r\n      DIRTY_ELEMENTS_KEY,\r\n      dirtyElementsString,\r\n    );\r\n    this.inputElement.setAttribute('data-dirty', '');\r\n  }\r\n\r\n  protected markClean() {\r\n    const prev =\r\n      this.unloadHandlerElement.getAttribute(DIRTY_ELEMENTS_KEY) || '';\r\n    const dirtyElementsArray = !prev ? [] : prev.split(',');\r\n    const dirtyElementsString = dirtyElementsArray\r\n      .filter((id) => id !== this.inputId)\r\n      .join(',');\r\n    this.unloadHandlerElement.setAttribute(\r\n      DIRTY_ELEMENTS_KEY,\r\n      dirtyElementsString,\r\n    );\r\n    this.inputElement.removeAttribute('data-dirty');\r\n    this.inputElement.setAttribute('value', this.inputElement.value);\r\n  }\r\n\r\n  protected async patch(url: string, value: string) {\r\n    const formData = new FormData();\r\n    formData.append('_method', 'PATCH');\r\n    formData.append(this.inputElement.name, value);\r\n\r\n    return window\r\n      .fetch(url, {\r\n        method: 'POST',\r\n        body: formData,\r\n      })\r\n      .then((res) => {\r\n        if (res.status === 404) {\r\n          throw new Error('Not found');\r\n        }\r\n\r\n        return res;\r\n      });\r\n  }\r\n}\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nexport function getUniqueId() {\r\n  return `${Date.now()}-${uuid()}`;\r\n}\r\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","export const DIRTY_ELEMENTS_KEY = 'dirty-elements';\r\n\r\nexport class UnloadHandlerElement extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  static get observedAttributes() {\r\n    return ['dirty-elements'];\r\n  }\r\n\r\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\r\n    if (name === 'dirty-elements') {\r\n      if (newValue) {\r\n        this.triggerBeforeUnload();\r\n      } else {\r\n        this.removeBeforeUnload();\r\n      }\r\n    }\r\n  }\r\n\r\n  triggerBeforeUnload() {\r\n    if (!window.onbeforeunload) {\r\n      window.onbeforeunload = this.boundBeforeUnloadHandler;\r\n    }\r\n  }\r\n\r\n  removeBeforeUnload() {\r\n    if (window.onbeforeunload) {\r\n      window.onbeforeunload = null;\r\n    }\r\n  }\r\n\r\n  handleBeforeUnload(event: BeforeUnloadEvent) {\r\n    event.preventDefault();\r\n    event.returnValue = '';\r\n  }\r\n\r\n  private boundBeforeUnloadHandler = this.handleBeforeUnload.bind(this);\r\n}\r\n\r\nwindow.customElements.define('unload-handler', UnloadHandlerElement);\r\n","import escapeStringRegexp from 'escape-string-regexp';\r\nimport { BaseAutoSaveElement } from 'elements/BaseAutoSaveElement';\r\n\r\nexport class AutoSaveCheckboxElement extends BaseAutoSaveElement {\r\n  private formElement: HTMLFormElement | undefined;\r\n  private boundMarkClean = this.markClean.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const formElement = this.inputElement.form;\r\n\r\n    if (!formElement) {\r\n      return;\r\n    }\r\n\r\n    this.formElement = formElement;\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.inputElement.addEventListener('input', this.boundInputHandler);\r\n\r\n    if (this.formElement) {\r\n      this.formElement.addEventListener('submit', this.boundMarkClean);\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.inputElement.removeEventListener('input', this.boundInputHandler);\r\n\r\n    if (this.formElement) {\r\n      this.formElement.removeEventListener('submit', this.boundMarkClean);\r\n    }\r\n  }\r\n\r\n  override handleInput() {\r\n    const isChecked = this.inputElement.checked;\r\n    const value = isChecked ? this.inputElement.value : '';\r\n    const formElement = this.inputElement.form;\r\n\r\n    if (!formElement) {\r\n      this.markDirty();\r\n      return;\r\n    }\r\n\r\n    const formAction = formElement.getAttribute('action');\r\n\r\n    if (!formAction) {\r\n      return;\r\n    }\r\n\r\n    const method = new FormData(formElement).get('_method')?.toString() || '';\r\n\r\n    if (['PUT', 'PATCH'].includes(method)) {\r\n      this.patch(formAction, value)\r\n        .then(() => {\r\n          window.location.reload();\r\n        })\r\n        .catch(() => {\r\n          this.markDirty();\r\n        });\r\n    } else {\r\n      if (this.inputElement.checked !== this.inputElement.defaultChecked) {\r\n        this.markDirty();\r\n      } else {\r\n        this.markClean();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nwindow.customElements.define('auto-save-checkbox', AutoSaveCheckboxElement);\r\n","import debounce from 'debounce';\r\nimport { BaseAutoSaveElement } from 'elements/BaseAutoSaveElement';\r\n\r\nexport class AutoSaveSearchElement extends BaseAutoSaveElement {\r\n  private debouncedInputHandler = debounce(this.boundInputHandler, 350);\r\n\r\n  connectedCallback() {\r\n    this.inputElement.addEventListener('input', this.debouncedInputHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.inputElement.removeEventListener('input', this.debouncedInputHandler);\r\n  }\r\n\r\n  override handleInput() {\r\n    const formElement = this.inputElement.form;\r\n\r\n    if (!formElement) {\r\n      return;\r\n    }\r\n\r\n    formElement.submit();\r\n  }\r\n}\r\n\r\nwindow.customElements.define('auto-save-search', AutoSaveSearchElement);\r\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","export class ClearSearchElement extends HTMLElement {\r\n  private buttonElement?: HTMLButtonElement;\r\n  private formElement?: HTMLFormElement;\r\n  private searchInputElement?: HTMLInputElement & {\r\n    type: 'search';\r\n  };\r\n  private boundClickHandler = this.handleClick.bind(this);\r\n\r\n  connectedCallback() {\r\n    const buttonElement = this.querySelector('button');\r\n\r\n    if (!(buttonElement instanceof HTMLButtonElement)) {\r\n      throw new Error('No button element provided');\r\n    }\r\n\r\n    const formElement = buttonElement.form;\r\n\r\n    if (!(formElement instanceof HTMLFormElement)) {\r\n      throw new Error('No form element provided');\r\n    }\r\n\r\n    function guardIsHTMLSearchInputElement(\r\n      node: Node,\r\n    ): node is HTMLInputElement & {\r\n      type: 'search';\r\n    } {\r\n      return node instanceof HTMLInputElement && node.type === 'search';\r\n    }\r\n\r\n    const searchInputElement = Array.from(formElement.elements).find(\r\n      guardIsHTMLSearchInputElement,\r\n    );\r\n\r\n    if (!searchInputElement) {\r\n      throw new Error('No search input element provided');\r\n    }\r\n\r\n    this.buttonElement = buttonElement;\r\n    this.formElement = formElement;\r\n    this.searchInputElement = searchInputElement;\r\n\r\n    this.buttonElement.addEventListener('click', this.boundClickHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.buttonElement) {\r\n      this.buttonElement.removeEventListener('click', this.boundClickHandler);\r\n    }\r\n  }\r\n\r\n  handleClick() {\r\n    if (!this.searchInputElement) {\r\n      throw new Error('No search input element provided');\r\n    }\r\n\r\n    if (!this.formElement) {\r\n      throw new Error('No form element provided');\r\n    }\r\n\r\n    this.searchInputElement.removeAttribute('name');\r\n    this.formElement.submit();\r\n  }\r\n}\r\n\r\nwindow.customElements.define('clear-search', ClearSearchElement);\r\n","import { DIRTY_ELEMENTS_KEY } from 'elements/UnloadHandlerElement';\r\n\r\nexport class PostFormElement extends HTMLElement {\r\n  private formElement?: HTMLFormElement;\r\n  private boundSubmitHandler = this.handleFormSubmit.bind(this);\r\n\r\n  connectedCallback() {\r\n    const formElement = this.querySelector('form');\r\n\r\n    if (!(formElement instanceof HTMLFormElement)) {\r\n      throw new Error('PostFormElement must contain a form element');\r\n    }\r\n\r\n    this.formElement = formElement;\r\n    this.formElement.addEventListener('submit', this.boundSubmitHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (!this.formElement) {\r\n      return;\r\n    }\r\n\r\n    this.formElement.removeEventListener('submit', this.boundSubmitHandler);\r\n  }\r\n\r\n  handleFormSubmit(event: Event) {\r\n    event.preventDefault();\r\n\r\n    if (!this.formElement) {\r\n      return;\r\n    }\r\n\r\n    const unloadHandler = window.document.querySelector('unload-handler');\r\n\r\n    if (!unloadHandler) {\r\n      return;\r\n    }\r\n\r\n    const prev = unloadHandler.getAttribute(DIRTY_ELEMENTS_KEY) || '';\r\n    const dirtyElementsArray = !prev ? [] : prev.split(',');\r\n\r\n    const formElements = Array.from(this.formElement.elements);\r\n\r\n    const dirtyElementsString = dirtyElementsArray\r\n      .filter((id) => {\r\n        const formElement = window.document.getElementById(id);\r\n        return formElement && !formElements.includes(formElement);\r\n      })\r\n      .join(',');\r\n\r\n    unloadHandler.setAttribute(DIRTY_ELEMENTS_KEY, dirtyElementsString);\r\n\r\n    this.formElement.submit();\r\n  }\r\n}\r\n\r\nwindow.customElements.define('post-form', PostFormElement);\r\n","export class SelectAllCheckboxElement extends HTMLElement {\r\n  private inputElement: HTMLInputElement;\r\n  private formElement: HTMLFormElement;\r\n  private checkboxElements: HTMLInputElement[];\r\n  private boundChangeHandler = this.handleChange.bind(this);\r\n  private boundControllableCheckboxChangeHandler =\r\n    this.handleControllableCheckboxChange.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    if (!this.shadowRoot) {\r\n      throw new Error('Declarative shadow root not supported');\r\n    }\r\n\r\n    const inputElement = this.querySelector('input');\r\n\r\n    if (!(inputElement instanceof HTMLInputElement)) {\r\n      throw new Error('No input element provided');\r\n    }\r\n\r\n    const formElement = inputElement.form;\r\n\r\n    if (!formElement) {\r\n      throw new Error('No form element provided');\r\n    }\r\n\r\n    const inputName = inputElement.getAttribute('name');\r\n\r\n    function isControllableCheckboxElement(\r\n      element: unknown,\r\n    ): element is HTMLInputElement {\r\n      return (\r\n        element instanceof HTMLInputElement &&\r\n        element.type === 'checkbox' &&\r\n        element.name === inputName\r\n      );\r\n    }\r\n\r\n    this.checkboxElements = Array.from(formElement.elements).filter(\r\n      isControllableCheckboxElement,\r\n    );\r\n\r\n    this.inputElement = inputElement;\r\n    this.formElement = formElement;\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.inputElement.addEventListener('change', this.boundChangeHandler);\r\n\r\n    for (const checkboxFormElement of this.checkboxElements) {\r\n      checkboxFormElement.addEventListener(\r\n        'change',\r\n        this.boundControllableCheckboxChangeHandler,\r\n      );\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.inputElement.removeEventListener('change', this.boundChangeHandler);\r\n\r\n    for (const checkboxFormElement of this.checkboxElements) {\r\n      checkboxFormElement.removeEventListener(\r\n        'change',\r\n        this.boundControllableCheckboxChangeHandler,\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange() {\r\n    const isChecked = this.inputElement.checked;\r\n\r\n    for (const checkboxFormElement of this.checkboxElements) {\r\n      checkboxFormElement.checked = isChecked;\r\n    }\r\n  }\r\n\r\n  handleControllableCheckboxChange() {\r\n    const isAllChecked = this.checkboxElements.every(\r\n      (checkboxFormElement) => checkboxFormElement.checked,\r\n    );\r\n\r\n    this.inputElement.checked = isAllChecked;\r\n  }\r\n}\r\n\r\nwindow.customElements.define('select-all-checkbox', SelectAllCheckboxElement);\r\n","export class ModalDialogElement extends HTMLElement {\r\n  private boundKeydownHandler = this.handleKeydown.bind(this);\r\n  private dialogElement: HTMLDialogElement;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const dialogElement = this.querySelector('dialog');\r\n\r\n    if (!(dialogElement instanceof HTMLDialogElement)) {\r\n      throw new Error('Could not find dialog element');\r\n    }\r\n\r\n    this.dialogElement = dialogElement;\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener('keydown', this.boundKeydownHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.removeEventListener('keydown', this.boundKeydownHandler);\r\n  }\r\n\r\n  handleKeydown(event: Event) {\r\n    if (!(event instanceof KeyboardEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (event.key === 'Escape') {\r\n      const closeDialogButtonElement = this.dialogElement.querySelector(\r\n        '#close-dialog-button',\r\n      );\r\n\r\n      if (!(closeDialogButtonElement instanceof HTMLElement)) {\r\n        return;\r\n      }\r\n\r\n      closeDialogButtonElement.click();\r\n    }\r\n  }\r\n}\r\n\r\nwindow.customElements.define('modal-dialog', ModalDialogElement);\r\n","import { FOCUSABLE_ELEMENT_SELECTOR } from 'shared/constants';\r\n\r\nexport class FlyoutMenuElement extends HTMLElement {\r\n  private detailsElement: HTMLDetailsElement;\r\n  private summaryElement: HTMLElement;\r\n  private menuItemElements: HTMLElement[];\r\n  private boundKeydownHandler = this.handleKeydown.bind(this);\r\n  private boundToggleHandler = this.handleToggle.bind(this);\r\n  private boundFocusoutHandler = this.handleFocusout.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const detailsElement = this.querySelector('details');\r\n\r\n    if (!(detailsElement instanceof HTMLDetailsElement)) {\r\n      throw new Error('Could not find details element');\r\n    }\r\n\r\n    this.detailsElement = detailsElement;\r\n\r\n    const summaryElement = this.querySelector('summary');\r\n\r\n    if (!(summaryElement instanceof HTMLElement)) {\r\n      throw new Error('Could not find summary element');\r\n    }\r\n\r\n    this.summaryElement = summaryElement;\r\n\r\n    const menuElement = this.querySelector('[role=\"menu\"]');\r\n\r\n    if (!(menuElement instanceof HTMLElement)) {\r\n      throw new Error('Could not find menu element');\r\n    }\r\n\r\n    function isHtmlElement(\r\n      element: Element | HTMLElement,\r\n    ): element is HTMLElement {\r\n      return element instanceof HTMLElement;\r\n    }\r\n\r\n    const menuItemElements = Array.from(\r\n      menuElement.querySelectorAll('[role=\"menuitem\"]'),\r\n    ).filter(isHtmlElement);\r\n\r\n    this.menuItemElements = menuItemElements;\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener('keydown', this.boundKeydownHandler);\r\n    this.addEventListener('focusout', this.boundFocusoutHandler);\r\n    this.detailsElement.addEventListener('toggle', this.boundToggleHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.removeEventListener('keydown', this.boundKeydownHandler);\r\n    this.removeEventListener('focusout', this.boundFocusoutHandler);\r\n    this.detailsElement.removeEventListener('toggle', this.boundToggleHandler);\r\n  }\r\n\r\n  positionPopover() {\r\n    const { left, top, height, width } =\r\n      this.summaryElement.getBoundingClientRect();\r\n\r\n    const translateX =\r\n      left > window.innerWidth / 2 ? `calc(-100% - ${width}px)` : '0px';\r\n    const translateY =\r\n      top > window.innerHeight / 2 ? `calc(-100% + ${height}px)` : '0px';\r\n    const transformValue = `translateX(${translateX}) translateY(${translateY})`;\r\n\r\n    this.style.setProperty('--popover-transform', transformValue);\r\n    this.style.setProperty('--popover-left', `${left + width}px`);\r\n    this.style.setProperty('--popover-top', `${top}px`);\r\n  }\r\n\r\n  handleKeydown(event: Event) {\r\n    if (!(event instanceof KeyboardEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (!this.detailsElement.open) {\r\n      if ([' ', 'Enter'].includes(event.key)) {\r\n        this.positionPopover();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (event.key === 'Escape') {\r\n      this.summaryElement.focus();\r\n      this.detailsElement.open = false;\r\n    }\r\n\r\n    const menuItemElement = event.composedPath().find((element) => {\r\n      return (\r\n        element instanceof HTMLElement && element.matches('[role=\"menuitem\"]')\r\n      );\r\n    });\r\n\r\n    if (!(menuItemElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const summaryElement = event.composedPath().find((element) => {\r\n      return element instanceof HTMLElement && element.closest('summary');\r\n    });\r\n\r\n    if (summaryElement) {\r\n      return;\r\n    }\r\n\r\n    if (event.key === 'ArrowUp') {\r\n      event.preventDefault();\r\n      this.handleArrowUp(menuItemElement);\r\n    } else if (event.key === 'ArrowDown') {\r\n      event.preventDefault();\r\n      this.handleArrowDown(menuItemElement);\r\n    }\r\n  }\r\n\r\n  handleArrowUp(menuItemElement: HTMLElement) {\r\n    const menuItemElementIndex = this.menuItemElements.indexOf(menuItemElement);\r\n\r\n    if (menuItemElementIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    const previousMenuItemElement =\r\n      this.menuItemElements[menuItemElementIndex - 1] ||\r\n      this.menuItemElements[this.menuItemElements.length - 1];\r\n\r\n    if (!(previousMenuItemElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    this.focusElement(previousMenuItemElement);\r\n  }\r\n\r\n  handleArrowDown(menuItemElement: HTMLElement) {\r\n    const menuItemElementIndex = this.menuItemElements.indexOf(menuItemElement);\r\n    const nextMenuItemElement =\r\n      this.menuItemElements[menuItemElementIndex + 1] ||\r\n      this.menuItemElements[0];\r\n\r\n    if (!(nextMenuItemElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    this.focusElement(nextMenuItemElement);\r\n  }\r\n\r\n  handleToggle() {\r\n    if (this.detailsElement.open) {\r\n      this.positionPopover();\r\n    }\r\n  }\r\n\r\n  focusElement(element: HTMLElement) {\r\n    element.focus();\r\n\r\n    if (!element.contains(window.document.activeElement)) {\r\n      const focusableElement = element.querySelector(\r\n        FOCUSABLE_ELEMENT_SELECTOR,\r\n      );\r\n\r\n      if (focusableElement instanceof HTMLElement) {\r\n        focusableElement.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleFocusout(event: Event) {\r\n    if (!(event instanceof FocusEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (!this.detailsElement.open) {\r\n      return;\r\n    }\r\n\r\n    const { relatedTarget } = event;\r\n\r\n    if (!(relatedTarget instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    if (this === relatedTarget || this.contains(relatedTarget)) {\r\n      return;\r\n    }\r\n\r\n    this.detailsElement.open = false;\r\n  }\r\n}\r\n\r\nwindow.customElements.define('flyout-menu', FlyoutMenuElement);\r\n","export const FOCUSABLE_ELEMENT_SELECTOR =\r\n  ':is(button, summary, [href], input, select, textarea, [tabindex]):not([tabindex=\"-1\"]):not([type=\"hidden\"]):not([disabled]):not([readonly])';\r\n","import {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  isHtmlElement,\r\n  INPUT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n} from './constants';\r\nimport { SelectionMixinBaseClass } from './SelectionMixinBaseClass';\r\nimport { DragSelectionMixin } from './DragSelectionMixin';\r\nimport { KeyboardSelectionMixin } from './KeyboardSelectionMixin';\r\n\r\n@DragSelectionMixin()\r\n@KeyboardSelectionMixin()\r\nexport class ViewContainerElement extends SelectionMixinBaseClass {\r\n  private boundHandleAutoSaveTextSave = this.handleAutoSaveTextSave.bind(this);\r\n  private boundClearCellsHandler = this.handleClearCells.bind(this);\r\n  private boundHandleAutoSaveTextToggleEditMode =\r\n    this.handleAutoSaveTextToggleEditMode.bind(this);\r\n  private boundHandleDeleteRows = this.handleDeleteRows.bind(this);\r\n  private boundChangeHandler = this.handleChange.bind(this);\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\r\n      'view-container:clear-cells',\r\n      this.boundClearCellsHandler,\r\n      {\r\n        capture: true,\r\n      },\r\n    );\r\n\r\n    this.addEventListener(\r\n      'auto-save-text:save',\r\n      this.boundHandleAutoSaveTextSave,\r\n    );\r\n\r\n    this.addEventListener(\r\n      'auto-save-text:toggle-edit-mode',\r\n      this.boundHandleAutoSaveTextToggleEditMode,\r\n    );\r\n\r\n    this.addEventListener(\r\n      'view-container:delete-rows',\r\n      this.boundHandleDeleteRows,\r\n    );\r\n\r\n    this.addEventListener('change', this.boundChangeHandler);\r\n\r\n    this.addEventListener('column-selector:select', (event: Event) => {\r\n      if (!(event instanceof CustomEvent)) {\r\n        return;\r\n      }\r\n\r\n      const { detail: propertyName } = event;\r\n\r\n      if (!propertyName) {\r\n        return;\r\n      }\r\n\r\n      const closestCellElement =\r\n        this.getClosestCellElementFromComposedPath(event);\r\n\r\n      if (!(closestCellElement instanceof HTMLElement)) {\r\n        return;\r\n      }\r\n\r\n      const closestRowElement = closestCellElement.closest('[role=\"row\"]');\r\n\r\n      if (!(closestRowElement instanceof HTMLElement)) {\r\n        return;\r\n      }\r\n\r\n      const columnIndex = Array.from(\r\n        closestRowElement.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n      ).indexOf(closestCellElement);\r\n\r\n      const rowElements = Array.from(\r\n        this.querySelectorAll('[role=\"row\"]:not(:has([role=\"columnheader\"]))'),\r\n      ).filter(isHtmlElement);\r\n\r\n      const firstRowElement = rowElements[0];\r\n      const lastRowElement = rowElements[rowElements.length - 1];\r\n\r\n      const firstRowTargetCellElement = Array.from(\r\n        firstRowElement.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n      )[columnIndex];\r\n\r\n      if (!(firstRowTargetCellElement instanceof HTMLElement)) {\r\n        return;\r\n      }\r\n\r\n      const lastRowTargetCellElement = Array.from(\r\n        lastRowElement.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n      )[columnIndex];\r\n\r\n      if (!(lastRowTargetCellElement instanceof HTMLElement)) {\r\n        return;\r\n      }\r\n\r\n      const currentlySelectedCells = Array.from(\r\n        this.querySelectorAll(\r\n          `[aria-selected]:is(${SELECTABLE_CELL_ELEMENT_SELECTOR})`,\r\n        ),\r\n      ).filter(isHtmlElement);\r\n\r\n      this.clearRowSelection();\r\n      this.clearCellSelection();\r\n\r\n      if (\r\n        'keyboardHighlightElement' in this &&\r\n        'keyboardOriginCellElement' in this\r\n      ) {\r\n        const selectionResult = this.selectCellElement({\r\n          targetCellElement: lastRowTargetCellElement,\r\n          relativeCellElement: firstRowTargetCellElement,\r\n          originCellElement: firstRowTargetCellElement,\r\n          highlightElement: null,\r\n        });\r\n\r\n        this.keyboardOriginCellElement = firstRowTargetCellElement;\r\n\r\n        if (selectionResult) {\r\n          this.keyboardHighlightElement = selectionResult.highlightElement;\r\n          this.keyboardOriginCellElement = selectionResult.originCellElement;\r\n        }\r\n\r\n        const newlySelectedCells = Array.from(\r\n          this.querySelectorAll(\r\n            `[aria-selected]:is(${SELECTABLE_CELL_ELEMENT_SELECTOR})`,\r\n          ),\r\n        ).filter(isHtmlElement);\r\n\r\n        if (\r\n          isHtmlElement(this.keyboardHighlightElement) &&\r\n          isHtmlElement(this.keyboardOriginCellElement)\r\n        ) {\r\n          this.removeHighlightElement(\r\n            this.keyboardHighlightElement,\r\n            this.keyboardOriginCellElement,\r\n          );\r\n        }\r\n\r\n        for (const cellElement of [\r\n          ...currentlySelectedCells,\r\n          ...newlySelectedCells,\r\n        ]) {\r\n          cellElement.setAttribute('aria-selected', 'true');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.removeEventListener(\r\n      'view-container:clear-cells',\r\n      this.boundClearCellsHandler,\r\n      {\r\n        capture: true,\r\n      },\r\n    );\r\n\r\n    this.removeEventListener(\r\n      'auto-save-text:save',\r\n      this.boundHandleAutoSaveTextSave,\r\n    );\r\n\r\n    this.removeEventListener(\r\n      'auto-save-text:toggle-edit-mode',\r\n      this.boundHandleAutoSaveTextToggleEditMode,\r\n    );\r\n\r\n    this.removeEventListener(\r\n      'view-container:delete-rows',\r\n      this.boundHandleDeleteRows,\r\n    );\r\n\r\n    this.removeEventListener('change', this.boundChangeHandler);\r\n  }\r\n\r\n  handleAutoSaveTextSave(event: Event) {\r\n    if (!(event instanceof CustomEvent)) {\r\n      return;\r\n    }\r\n\r\n    const { target } = event;\r\n\r\n    if (!(target instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const inputElement = target.querySelector(INPUT_SELECTOR);\r\n\r\n    if (!(inputElement instanceof HTMLInputElement)) {\r\n      return;\r\n    }\r\n\r\n    const rowElement = target.closest('[role=\"row\"]');\r\n\r\n    if (!(rowElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const gridRows = Array.from(\r\n      this.gridElement.querySelectorAll('[role=\"row\"]'),\r\n    );\r\n\r\n    const rowIndex = gridRows.indexOf(rowElement);\r\n\r\n    if (Number(rowIndex) !== gridRows.length - 1) {\r\n      return;\r\n    }\r\n\r\n    const addRowButtonElement = this.querySelector('#add-new-row-button');\r\n\r\n    if (!(addRowButtonElement instanceof HTMLButtonElement)) {\r\n      throw new Error('Could not find add new row button element');\r\n    }\r\n\r\n    const addRowFormElement = addRowButtonElement.form;\r\n\r\n    if (!(addRowFormElement instanceof HTMLFormElement)) {\r\n      throw new Error('Could not find add new row form element');\r\n    }\r\n\r\n    const hiddenInputElement = document.createElement('input');\r\n    hiddenInputElement.setAttribute('type', 'hidden');\r\n    hiddenInputElement.setAttribute('name', '_autofocus');\r\n    hiddenInputElement.setAttribute('value', inputElement.id);\r\n\r\n    addRowFormElement.append(hiddenInputElement);\r\n\r\n    addRowFormElement.submit();\r\n\r\n    hiddenInputElement.remove();\r\n  }\r\n\r\n  handleClearCells(event: Event) {\r\n    if (!(event instanceof CustomEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(event.detail)) {\r\n      return;\r\n    }\r\n\r\n    const cellElements = event.detail.filter(isHtmlElement);\r\n\r\n    for (const cellElement of cellElements) {\r\n      const autoSaveTextElement = cellElement.querySelector(INPUT_SELECTOR);\r\n\r\n      if (!(autoSaveTextElement instanceof HTMLInputElement)) {\r\n        continue;\r\n      }\r\n\r\n      autoSaveTextElement.value = '';\r\n    }\r\n\r\n    const clearCellsButtonElement = this.querySelector('#clear-cells-button');\r\n\r\n    if (!(clearCellsButtonElement instanceof HTMLButtonElement)) {\r\n      throw new Error('Could not find clear cells button element');\r\n    }\r\n\r\n    const clearCellsFormElement = clearCellsButtonElement.form;\r\n\r\n    if (!(clearCellsFormElement instanceof HTMLFormElement)) {\r\n      throw new Error('Could not find add new row form element');\r\n    }\r\n\r\n    const hiddenInputElement = clearCellsFormElement.querySelector(\r\n      'input[type=\"hidden\"][name=\"cell[]\"]',\r\n    );\r\n\r\n    if (!(hiddenInputElement instanceof HTMLInputElement)) {\r\n      throw new Error('Could not find hidden input element');\r\n    }\r\n\r\n    const cellsValue = cellElements\r\n      .map((cellElement) => {\r\n        const rowId = cellElement.getAttribute('data-row-id');\r\n\r\n        if (!rowId) {\r\n          throw new Error('Could not find id attribute');\r\n        }\r\n\r\n        const propertyId = cellElement.getAttribute('data-property-id');\r\n\r\n        if (!propertyId) {\r\n          throw new Error('Could not find id attribute');\r\n        }\r\n\r\n        return rowId + ':' + propertyId;\r\n      })\r\n      .join(',');\r\n\r\n    hiddenInputElement.setAttribute('value', cellsValue);\r\n\r\n    fetch(clearCellsFormElement.action, {\r\n      method: clearCellsFormElement.method,\r\n      body: new FormData(clearCellsFormElement),\r\n    });\r\n  }\r\n\r\n  handleAutoSaveTextToggleEditMode(event: Event) {\r\n    if (!(event instanceof CustomEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (!(event.target instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const cellElement = event.target.closest(ANY_CELL_ELEMENT_SELECTOR);\r\n\r\n    if (!(cellElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const rowElement = cellElement.closest('[role=\"row\"]');\r\n\r\n    if (!(rowElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\r\n\r\n    const rowElements = Array.from(\r\n      this.gridElement.querySelectorAll('[role=\"row\"]'),\r\n    );\r\n\r\n    const rowIndex = rowElements.indexOf(rowElement);\r\n\r\n    const nextRowElement = rowElements[rowIndex + 1];\r\n\r\n    if (!(nextRowElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const nextCellElement = nextRowElement.children[cellIndex];\r\n\r\n    if (!(nextCellElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    this.focusCellElement(nextCellElement);\r\n  }\r\n\r\n  handleDeleteRows() {\r\n    const selectMultipleRowsCheckbox = this.querySelector(\r\n      'select-all-checkbox input[type=\"checkbox\"]',\r\n    );\r\n\r\n    if (!(selectMultipleRowsCheckbox instanceof HTMLInputElement)) {\r\n      return;\r\n    }\r\n\r\n    const selectMultipleRowsForm = selectMultipleRowsCheckbox.form;\r\n\r\n    if (!(selectMultipleRowsForm instanceof HTMLFormElement)) {\r\n      return;\r\n    }\r\n\r\n    const rawRowSelectionFormData = new FormData(selectMultipleRowsForm);\r\n    const rowSelectionFormData = Object.fromEntries(\r\n      rawRowSelectionFormData.entries(),\r\n    );\r\n\r\n    if (rowSelectionFormData['row[]'] === undefined) {\r\n      return;\r\n    }\r\n\r\n    const bulkActionsFormElement = this.querySelector(\r\n      '#select-multiple-rows-form',\r\n    );\r\n\r\n    if (!(bulkActionsFormElement instanceof HTMLFormElement)) {\r\n      return;\r\n    }\r\n\r\n    const bulkActionSelectElement = bulkActionsFormElement.querySelector(\r\n      '[name=\"bulkAction\"]',\r\n    );\r\n\r\n    if (!(bulkActionSelectElement instanceof HTMLSelectElement)) {\r\n      return;\r\n    }\r\n\r\n    bulkActionSelectElement.value = 'DELETE';\r\n\r\n    bulkActionsFormElement.submit();\r\n  }\r\n\r\n  handleChange(event: Event) {\r\n    const cellElement = this.getClosestCellElementFromComposedPath(event);\r\n\r\n    if (!(cellElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const hasRowSelctionCheckbox = cellElement.matches(\r\n      ':has(input[name=\"row[]\"])',\r\n    );\r\n\r\n    if (!hasRowSelctionCheckbox) {\r\n      return;\r\n    }\r\n\r\n    const rowSelectionCheckbox = cellElement.querySelector(\r\n      'input[name=\"row[]\"]',\r\n    );\r\n\r\n    if (!(rowSelectionCheckbox instanceof HTMLInputElement)) {\r\n      return;\r\n    }\r\n\r\n    this.clearCellSelection();\r\n  }\r\n}\r\n\r\nwindow.customElements.define('view-container', ViewContainerElement);\r\n","export const ANY_CELL_ELEMENT_SELECTOR =\r\n  '[role=\"gridcell\"], [role=\"columnheader\"], [role=\"rowheader\"]';\r\n\r\nexport const SELECTABLE_CELL_ELEMENT_SELECTOR = `[data-selectable]:is(${ANY_CELL_ELEMENT_SELECTOR})`;\r\n\r\nexport const INPUT_SELECTOR =\r\n  ':is(:is(auto-save-search, auto-save-text) input, input[type=\"checkbox\"])';\r\n\r\nexport const FLYOUT_MENU_SELECTOR = 'flyout-menu [role=\"menu\"]';\r\n\r\nexport function isInFlyoutMenu(element: Element | HTMLElement | EventTarget) {\r\n  if (!(element instanceof Element)) {\r\n    return false;\r\n  }\r\n\r\n  const flyoutMenuElement = element.closest(FLYOUT_MENU_SELECTOR);\r\n\r\n  return flyoutMenuElement instanceof HTMLElement;\r\n}\r\n\r\nexport function isHtmlElement(element: unknown): element is HTMLElement {\r\n  return element instanceof HTMLElement;\r\n}\r\n\r\nexport const FOCUSABLE_ELEMENT_SELECTOR =\r\n  ':is(a, button, summary, [href], input, select, textarea, [tabindex]):not([tabindex=\"-1\"]):not([type=\"hidden\"]):not([disabled]):not([readonly])';\r\n","import {\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n  FOCUSABLE_ELEMENT_SELECTOR,\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  isHtmlElement,\r\n} from './constants';\r\n\r\nexport class SelectionMixinBaseClass extends HTMLElement {\r\n  gridElement: HTMLElement;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const gridElement = this.querySelector('[role=\"grid\"]');\r\n\r\n    if (!(gridElement instanceof HTMLElement)) {\r\n      throw new Error('Could not find grid element');\r\n    }\r\n\r\n    this.gridElement = gridElement;\r\n  }\r\n\r\n  getClosestCellElementFromPoint(event: Event) {\r\n    if (event instanceof PointerEvent) {\r\n      let closestCellElement: HTMLElement | null = null;\r\n\r\n      const touchTarget = window.document.elementFromPoint(\r\n        event.clientX,\r\n        event.clientY,\r\n      );\r\n\r\n      if (touchTarget instanceof HTMLElement) {\r\n        closestCellElement = touchTarget.closest(ANY_CELL_ELEMENT_SELECTOR);\r\n      }\r\n\r\n      return closestCellElement;\r\n    } else {\r\n      return this.getClosestCellElementFromComposedPath(event);\r\n    }\r\n  }\r\n\r\n  getClosestCellElementFromComposedPath(event: Event) {\r\n    const composedPath = event.composedPath();\r\n\r\n    const closestCellElement = composedPath.find((element) => {\r\n      if (!(element instanceof HTMLElement)) {\r\n        return false;\r\n      }\r\n\r\n      return element.matches(ANY_CELL_ELEMENT_SELECTOR);\r\n    });\r\n\r\n    if (!(closestCellElement instanceof HTMLElement)) {\r\n      return null;\r\n    }\r\n\r\n    return closestCellElement;\r\n  }\r\n\r\n  updateHighlightElement(\r\n    highlightElement: HTMLElement | null,\r\n    cellElement: HTMLElement,\r\n    originCellElement: HTMLElement,\r\n  ) {\r\n    if (!highlightElement) {\r\n      return;\r\n    }\r\n\r\n    const closestRowElement = cellElement.closest('[role=\"row\"]');\r\n\r\n    if (!(closestRowElement instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const draggedRow = originCellElement.closest('[role=\"row\"]');\r\n\r\n    if (!(draggedRow instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n\r\n    const closestCellColumnIndex = Array.from(\r\n      closestRowElement.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n    ).indexOf(cellElement);\r\n    const originCellColumnIndex = Array.from(\r\n      draggedRow.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n    ).indexOf(originCellElement);\r\n\r\n    const closestCellLeft = cellElement.getBoundingClientRect().left;\r\n    const closestCellRight = cellElement.getBoundingClientRect().right;\r\n\r\n    const originCellLeft = originCellElement.getBoundingClientRect().left;\r\n    const originCellRight = originCellElement.getBoundingClientRect().right;\r\n\r\n    const closestCellTop = cellElement.getBoundingClientRect().top;\r\n    const closestCellBottom = cellElement.getBoundingClientRect().bottom;\r\n\r\n    const originCellTop = originCellElement.getBoundingClientRect().top;\r\n    const originCellBottom = originCellElement.getBoundingClientRect().bottom;\r\n\r\n    const isSameCell = cellElement === originCellElement;\r\n    const isoriginCellBeforeClosestCell =\r\n      originCellColumnIndex < closestCellColumnIndex && !isSameCell;\r\n    const isoriginCellAfterClosestCell =\r\n      originCellColumnIndex > closestCellColumnIndex && !isSameCell;\r\n    const isoriginCellAboveClosestCell =\r\n      originCellTop < closestCellTop && !isSameCell;\r\n    const isoriginCellBelowClosestCell =\r\n      originCellBottom > closestCellBottom && !isSameCell;\r\n\r\n    const left = isSameCell\r\n      ? originCellLeft\r\n      : isoriginCellBeforeClosestCell\r\n        ? originCellLeft\r\n        : closestCellLeft;\r\n\r\n    const right = isSameCell\r\n      ? originCellRight\r\n      : isoriginCellAfterClosestCell\r\n        ? originCellRight\r\n        : closestCellRight;\r\n\r\n    const top = isSameCell\r\n      ? originCellTop\r\n      : isoriginCellAboveClosestCell\r\n        ? originCellTop\r\n        : closestCellTop;\r\n\r\n    const bottom = isSameCell\r\n      ? originCellBottom\r\n      : isoriginCellBelowClosestCell\r\n        ? originCellBottom\r\n        : closestCellBottom;\r\n\r\n    highlightElement.style.left = `${left}px`;\r\n    highlightElement.style.top = `${top}px`;\r\n    highlightElement.style.width = `${right - left}px`;\r\n    highlightElement.style.height = `${bottom - top}px`;\r\n    highlightElement.style.border = '3px solid var(--swatch-interactive)';\r\n  }\r\n\r\n  initializeHighlightElement(\r\n    highlightElement: HTMLElement | null,\r\n    cellElement: HTMLElement,\r\n  ) {\r\n    if (highlightElement) {\r\n      return null;\r\n    }\r\n\r\n    highlightElement = window.document.createElement('div');\r\n    highlightElement.classList.add('highlight');\r\n    const { left, top } = cellElement.getBoundingClientRect();\r\n    highlightElement.style.top = `${top}px`;\r\n    highlightElement.style.left = `${left}px`;\r\n\r\n    this.appendChild(highlightElement);\r\n\r\n    return highlightElement;\r\n  }\r\n\r\n  updateSelectedCells(highlightElement: HTMLElement | null) {\r\n    if (!highlightElement) {\r\n      return;\r\n    }\r\n\r\n    const { top, left, bottom, right } =\r\n      highlightElement.getBoundingClientRect();\r\n\r\n    const allCellElements = Array.from(\r\n      this.gridElement.querySelectorAll(ANY_CELL_ELEMENT_SELECTOR),\r\n    ).filter(isHtmlElement);\r\n\r\n    const markCellSelected = (cellElement: HTMLElement) => {\r\n      cellElement.setAttribute('aria-selected', 'true');\r\n    };\r\n\r\n    const markCellUnselected = (cellElement: HTMLElement) => {\r\n      cellElement.removeAttribute('aria-selected');\r\n    };\r\n\r\n    for (const cellElement of allCellElements) {\r\n      const cellBounds = cellElement.getBoundingClientRect();\r\n      const isTopWithinBounds = Math.ceil(cellBounds.top) >= Math.ceil(top);\r\n      const isBottomWithinBounds =\r\n        Math.ceil(cellBounds.bottom) <= Math.ceil(bottom);\r\n      const isLeftWithinBounds = Math.ceil(cellBounds.left) >= Math.ceil(left);\r\n      const isRightWithinBounds =\r\n        Math.ceil(cellBounds.right) <= Math.ceil(right);\r\n      const isWithinBounds =\r\n        isTopWithinBounds &&\r\n        isBottomWithinBounds &&\r\n        isLeftWithinBounds &&\r\n        isRightWithinBounds;\r\n\r\n      if (isWithinBounds) {\r\n        markCellSelected(cellElement);\r\n      } else {\r\n        markCellUnselected(cellElement);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectCellElement(options: {\r\n    relativeCellElement: HTMLElement;\r\n    targetCellElement: HTMLElement;\r\n    originCellElement: HTMLElement | null;\r\n    highlightElement: HTMLElement | null;\r\n  }) {\r\n    const {\r\n      relativeCellElement,\r\n      targetCellElement,\r\n      originCellElement,\r\n      highlightElement,\r\n    } = options;\r\n\r\n    let newHighlightElement = highlightElement;\r\n    let newOriginCellElement = originCellElement;\r\n\r\n    if (!highlightElement) {\r\n      newHighlightElement = this.initializeHighlightElement(\r\n        highlightElement,\r\n        relativeCellElement,\r\n      );\r\n      newOriginCellElement = relativeCellElement;\r\n    }\r\n\r\n    this.updateHighlightElement(\r\n      newHighlightElement,\r\n      targetCellElement,\r\n      newOriginCellElement || relativeCellElement,\r\n    );\r\n\r\n    this.updateSelectedCells(newHighlightElement);\r\n\r\n    return {\r\n      highlightElement: newHighlightElement,\r\n      originCellElement: newOriginCellElement,\r\n    };\r\n  }\r\n\r\n  focusCellElement(cellElement: HTMLElement) {\r\n    cellElement.focus();\r\n\r\n    if (!cellElement.contains(window.document.activeElement)) {\r\n      const focusableElement = cellElement.querySelector(\r\n        FOCUSABLE_ELEMENT_SELECTOR,\r\n      );\r\n\r\n      if (focusableElement instanceof HTMLElement) {\r\n        focusableElement.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  removeHighlightElement(\r\n    highlightElement: HTMLElement | null,\r\n    originCellElement: HTMLElement | null,\r\n  ) {\r\n    const allCellElements = Array.from(\r\n      this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n    );\r\n\r\n    for (const cellElement of allCellElements) {\r\n      cellElement.removeAttribute('aria-selected');\r\n      cellElement.removeAttribute('data-selected');\r\n    }\r\n\r\n    if (!highlightElement || !originCellElement) {\r\n      return;\r\n    }\r\n\r\n    this.updateHighlightElement(\r\n      highlightElement,\r\n      originCellElement,\r\n      originCellElement,\r\n    );\r\n\r\n    this.updateSelectedCells(highlightElement);\r\n\r\n    highlightElement.remove();\r\n\r\n    return {\r\n      highlightElement: null,\r\n      originCellElement: null,\r\n      lastSelectedCellElement: null,\r\n    };\r\n  }\r\n\r\n  clearCellSelection() {\r\n    if ('dragHighlightElement' in this && 'dragOriginCellElement' in this) {\r\n      if (\r\n        (isHtmlElement(this.dragHighlightElement) ||\r\n          this.dragHighlightElement === null) &&\r\n        (isHtmlElement(this.dragOriginCellElement) ||\r\n          this.dragOriginCellElement === null)\r\n      ) {\r\n        const result = this.removeHighlightElement(\r\n          this.dragHighlightElement,\r\n          this.dragOriginCellElement,\r\n        );\r\n        Object.assign(this, result);\r\n      }\r\n    }\r\n\r\n    if (\r\n      'keyboardHighlightElement' in this &&\r\n      'keyboardOriginCellElement' in this\r\n    ) {\r\n      if (\r\n        (isHtmlElement(this.keyboardHighlightElement) ||\r\n          this.keyboardHighlightElement === null) &&\r\n        (isHtmlElement(this.keyboardOriginCellElement) ||\r\n          this.keyboardOriginCellElement === null)\r\n      ) {\r\n        const result = this.removeHighlightElement(\r\n          this.keyboardHighlightElement,\r\n          this.keyboardOriginCellElement,\r\n        );\r\n        Object.assign(this, result);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearRowSelection() {\r\n    const selectMultipleRowsCheckbox = this.querySelector(\r\n      'select-all-checkbox input[type=\"checkbox\"]',\r\n    );\r\n\r\n    if (!(selectMultipleRowsCheckbox instanceof HTMLInputElement)) {\r\n      return;\r\n    }\r\n\r\n    const selectMultipleRowsForm = selectMultipleRowsCheckbox.form;\r\n\r\n    if (!(selectMultipleRowsForm instanceof HTMLFormElement)) {\r\n      return;\r\n    }\r\n\r\n    const rawRowSelectionFormData = new FormData(selectMultipleRowsForm);\r\n    const rowSelectionFormData = Object.fromEntries(\r\n      rawRowSelectionFormData.entries(),\r\n    );\r\n\r\n    if (rowSelectionFormData['row[]'] !== undefined) {\r\n      const formElements = Array.from(selectMultipleRowsForm.elements);\r\n\r\n      function isRowSelectionCheckbox(\r\n        formElement: Element,\r\n      ): formElement is HTMLInputElement {\r\n        return (\r\n          formElement instanceof HTMLInputElement &&\r\n          formElement.type === 'checkbox' &&\r\n          formElement.name === 'row[]'\r\n        );\r\n      }\r\n\r\n      const rowCheckboxElements = formElements.filter(isRowSelectionCheckbox);\r\n\r\n      for (const rowCheckboxElement of rowCheckboxElements) {\r\n        rowCheckboxElement.checked = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectAllRows() {\r\n    const selectMultipleRowsCheckbox = this.querySelector(\r\n      'select-all-checkbox input[type=\"checkbox\"]',\r\n    );\r\n\r\n    if (!(selectMultipleRowsCheckbox instanceof HTMLInputElement)) {\r\n      return;\r\n    }\r\n\r\n    const selectMultipleRowsForm = selectMultipleRowsCheckbox.form;\r\n\r\n    if (!(selectMultipleRowsForm instanceof HTMLFormElement)) {\r\n      return;\r\n    }\r\n\r\n    const rowCheckboxElements = Array.from(\r\n      selectMultipleRowsForm.elements,\r\n    ).filter(\r\n      (formElement): formElement is HTMLInputElement =>\r\n        formElement instanceof HTMLInputElement &&\r\n        formElement.type === 'checkbox' &&\r\n        formElement.name === 'row[]',\r\n    );\r\n\r\n    for (const rowCheckboxElement of rowCheckboxElements) {\r\n      rowCheckboxElement.checked = true;\r\n    }\r\n  }\r\n\r\n  selectAllCells() {\r\n    const allCellElements = Array.from(\r\n      this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n    );\r\n\r\n    for (const cellElement of allCellElements) {\r\n      cellElement.setAttribute('aria-selected', 'true');\r\n      cellElement.setAttribute('data-selected', '');\r\n    }\r\n  }\r\n}\r\n\r\nexport type Constructor = { new (...args: any[]): SelectionMixinBaseClass };\r\n","import {\r\n  Constructor,\r\n  SelectionMixinBaseClass,\r\n} from '../SelectionMixinBaseClass';\r\nimport { handleDragstart } from './handleDragstart';\r\nimport { handleKeydown } from './handleKeydown';\r\nimport { handleKeyup } from './handleKeyup';\r\nimport { handlePointerdown } from './handlePointerdown';\r\nimport { handlePointermove } from './handlePointermove';\r\nimport { handlePointerup } from './handlePointerup';\r\n\r\nexport interface IDragSelectionMixin extends SelectionMixinBaseClass {\r\n  isDragShiftKeyPressed: boolean;\r\n  isPointerDown: boolean;\r\n  isDragging: boolean;\r\n  lastDragSelectedCellElement: HTMLElement | null;\r\n  dragOriginCellElement: HTMLElement | null;\r\n  dragHighlightElement: HTMLElement | null;\r\n  pointerId: number;\r\n  boundPointerdownHandler: (event: Event) => void;\r\n  boundPointermoveHandler: (event: Event) => void;\r\n  boundPointerupHandler: (event: Event) => void;\r\n  boundDragKeydownHandler: (event: Event) => void;\r\n  boundDragKeyupHandler: (event: Event) => void;\r\n  boundDragstartHandler: (event: Event) => void;\r\n}\r\n\r\nexport function DragSelectionMixinFactory<T extends Constructor>(\r\n  constructor: T,\r\n) {\r\n  return class\r\n    extends constructor\r\n    implements SelectionMixinBaseClass, IDragSelectionMixin\r\n  {\r\n    isDragShiftKeyPressed = false;\r\n    isPointerDown = false;\r\n    isDragging = false;\r\n    lastDragSelectedCellElement: HTMLElement | null = null;\r\n    dragOriginCellElement: HTMLElement | null = null;\r\n    dragHighlightElement: HTMLElement | null = null;\r\n    pointerId = 0;\r\n    boundPointerdownHandler = handlePointerdown.bind(this);\r\n    boundPointermoveHandler = handlePointermove.bind(this);\r\n    boundPointerupHandler = handlePointerup.bind(this);\r\n    boundDragKeydownHandler = handleKeydown.bind(this);\r\n    boundDragKeyupHandler = handleKeyup.bind(this);\r\n    boundDragstartHandler = handleDragstart.bind(this);\r\n\r\n    connectedCallback() {\r\n      if (constructor.prototype.connectedCallback) {\r\n        constructor.prototype.connectedCallback.call(this);\r\n      }\r\n\r\n      this.addEventListener('pointerdown', this.boundPointerdownHandler);\r\n      this.addEventListener('pointermove', this.boundPointermoveHandler);\r\n      this.addEventListener('pointerup', this.boundPointerupHandler, {\r\n        capture: true,\r\n      });\r\n      this.addEventListener('pointercancel', this.boundPointerupHandler, {\r\n        capture: true,\r\n      });\r\n      this.addEventListener('keydown', this.boundDragKeydownHandler);\r\n      this.addEventListener('keyup', this.boundDragKeyupHandler);\r\n      this.addEventListener('dragstart', this.boundDragstartHandler);\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      if (constructor.prototype.disconnectedCallback) {\r\n        constructor.prototype.disconnectedCallback.call(this);\r\n      }\r\n\r\n      this.removeEventListener('pointerdown', this.boundPointerdownHandler);\r\n      this.removeEventListener('pointermove', this.boundPointermoveHandler);\r\n      this.removeEventListener('pointerup', this.boundPointerupHandler, {\r\n        capture: true,\r\n      });\r\n      this.removeEventListener('pointercancel', this.boundPointerupHandler, {\r\n        capture: true,\r\n      });\r\n\r\n      this.removeEventListener('keydown', this.boundDragKeydownHandler);\r\n      this.removeEventListener('keyup', this.boundDragKeyupHandler);\r\n      this.removeEventListener('dragstart', this.boundDragstartHandler);\r\n    }\r\n  };\r\n}\r\n\r\nexport function DragSelectionMixin() {\r\n  return DragSelectionMixinFactory;\r\n}\r\n","import { DragSelectionMixin, IDragSelectionMixin } from '.';\r\nimport { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\n\r\nexport function handleDragstart(\r\n  this: SelectionMixinBaseClass & IDragSelectionMixin,\r\n  event: Event,\r\n) {\r\n  event.preventDefault();\r\n}\r\n","import { IDragSelectionMixin } from '.';\r\nimport { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\n\r\nexport function handleKeydown(\r\n  this: SelectionMixinBaseClass & IDragSelectionMixin,\r\n  event: Event,\r\n) {\r\n  if (!(event instanceof KeyboardEvent)) {\r\n    return;\r\n  }\r\n\r\n  if (!this.isDragShiftKeyPressed) {\r\n    this.isDragShiftKeyPressed = event.key === 'Shift' || event.shiftKey;\r\n  }\r\n}\r\n","import { IDragSelectionMixin } from '.';\r\nimport { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport {\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\n\r\nexport function handleKeyup(\r\n  this: SelectionMixinBaseClass & IDragSelectionMixin,\r\n  event: Event,\r\n) {\r\n  if (!(event instanceof KeyboardEvent)) {\r\n    return;\r\n  }\r\n\r\n  this.isDragShiftKeyPressed = event.shiftKey;\r\n\r\n  const allCells = Array.from(\r\n    this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n  );\r\n\r\n  for (const cell of allCells) {\r\n    if (cell.hasAttribute('aria-selected')) {\r\n      cell.setAttribute('data-selected', '');\r\n    } else {\r\n      cell.removeAttribute('data-selected');\r\n    }\r\n  }\r\n\r\n  if (!this.isDragShiftKeyPressed) {\r\n    if (this.dragHighlightElement) {\r\n      this.dragHighlightElement.remove();\r\n    }\r\n    this.dragHighlightElement = null;\r\n    this.dragOriginCellElement = null;\r\n    this.isDragging = false;\r\n\r\n    const selectedCells = Array.from(\r\n      this.gridElement.querySelectorAll(\r\n        `[data-selected]:is(${ANY_CELL_ELEMENT_SELECTOR})`,\r\n      ),\r\n    );\r\n\r\n    for (const selectedCell of selectedCells) {\r\n      selectedCell.removeAttribute('data-selected');\r\n    }\r\n  }\r\n}\r\n","import { DragSelectionMixin, IDragSelectionMixin } from '.';\r\nimport {\r\n  Constructor,\r\n  SelectionMixinBaseClass,\r\n} from '../SelectionMixinBaseClass';\r\nimport { SELECTABLE_CELL_ELEMENT_SELECTOR } from '../constants';\r\n\r\nexport function handlePointerdown(\r\n  this: SelectionMixinBaseClass & IDragSelectionMixin,\r\n  event: Event,\r\n) {\r\n  if (!(event instanceof PointerEvent)) {\r\n    return;\r\n  }\r\n\r\n  const closestCellElement = this.getClosestCellElementFromComposedPath(event);\r\n\r\n  if (!closestCellElement) {\r\n    return;\r\n  }\r\n\r\n  this.isPointerDown = true;\r\n\r\n  this.focusCellElement(closestCellElement);\r\n\r\n  if (!closestCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  this.clearRowSelection();\r\n\r\n  const result = this.removeHighlightElement(\r\n    this.dragHighlightElement,\r\n    this.dragOriginCellElement,\r\n  );\r\n  Object.assign(this, result);\r\n\r\n  this.dragHighlightElement = this.initializeHighlightElement(\r\n    this.dragHighlightElement,\r\n    closestCellElement,\r\n  );\r\n  this.dragOriginCellElement = closestCellElement;\r\n}\r\n","import { DragSelectionMixin, IDragSelectionMixin } from '.';\r\nimport { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport {\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\n\r\nexport function handlePointermove(\r\n  this: SelectionMixinBaseClass & IDragSelectionMixin,\r\n  event: Event,\r\n) {\r\n  if (!(event instanceof PointerEvent)) {\r\n    return;\r\n  }\r\n\r\n  if (!this.isPointerDown) {\r\n    return;\r\n  }\r\n\r\n  window.document.body.classList.add('prevent-scroll');\r\n  event.preventDefault();\r\n  event.stopImmediatePropagation();\r\n  event.stopPropagation();\r\n\r\n  const closestCellElement = this.getClosestCellElementFromPoint(event);\r\n\r\n  if (\r\n    !closestCellElement ||\r\n    !closestCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (!(this.dragOriginCellElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  this.isDragging = true;\r\n  this.updateHighlightElement(\r\n    this.dragHighlightElement,\r\n    closestCellElement,\r\n    this.dragOriginCellElement,\r\n  );\r\n\r\n  this.lastDragSelectedCellElement = closestCellElement;\r\n\r\n  this.updateSelectedCells(this.dragHighlightElement);\r\n}\r\n","import { DragSelectionMixin, IDragSelectionMixin } from '.';\r\nimport { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { SELECTABLE_CELL_ELEMENT_SELECTOR } from '../constants';\r\n\r\nexport function handlePointerup(\r\n  this: SelectionMixinBaseClass & IDragSelectionMixin,\r\n  event: Event,\r\n) {\r\n  if (!(event instanceof PointerEvent)) {\r\n    return;\r\n  }\r\n\r\n  window.document.body.classList.remove('prevent-scroll');\r\n  this.isPointerDown = false;\r\n  this.isDragging = false;\r\n\r\n  event.stopImmediatePropagation();\r\n  event.stopPropagation();\r\n\r\n  const closestCellElement = this.getClosestCellElementFromPoint(event);\r\n\r\n  if (!closestCellElement) {\r\n    return;\r\n  }\r\n\r\n  this.dragHighlightElement?.remove();\r\n  this.dragHighlightElement = null;\r\n  this.dragOriginCellElement = null;\r\n  if (\r\n    this.lastDragSelectedCellElement &&\r\n    this.lastDragSelectedCellElement !== this.dragOriginCellElement\r\n  ) {\r\n    this.focusCellElement(this.lastDragSelectedCellElement);\r\n  }\r\n  this.lastDragSelectedCellElement = null;\r\n}\r\n","import {\r\n  Constructor,\r\n  SelectionMixinBaseClass,\r\n} from '../SelectionMixinBaseClass';\r\nimport { handleArrowDown } from './handleArrowDown';\r\nimport { handleArrowLeft } from './handleArrowLeft';\r\nimport { handleArrowRight } from './handleArrowRight';\r\nimport { handleArrowUp } from './handleArrowUp';\r\nimport { handleDelete } from './handleDelete';\r\nimport { handleEnd } from './handleEnd';\r\nimport { handleEscape } from './handleEscape';\r\nimport { handleHome } from './handleHome';\r\nimport { handleKeydown } from './handleKeydown';\r\nimport { handleKeyup } from './handleKeyup';\r\nimport { handleSpacebar } from './handleSpacebar';\r\nimport { SELECTABLE_CELL_ELEMENT_SELECTOR } from '../constants';\r\n\r\nexport interface IKeyboardSelectionMixin {\r\n  isKeyboardShiftKeyPressed: boolean;\r\n  keyboardOriginCellElement: HTMLElement | null;\r\n  keyboardHighlightElement: HTMLElement | null;\r\n  handleKeydown: (event: Event) => void;\r\n  handleKeyup: (event: Event) => void;\r\n  handleArrowUp: (event: Event, cellElement: HTMLElement) => void;\r\n  handleArrowDown: (event: Event, cellElement: HTMLElement) => void;\r\n  handleArrowLeft: (event: Event, cellElement: HTMLElement) => void;\r\n  handleArrowRight: (event: Event, cellElement: HTMLElement) => void;\r\n  handleHome: (event: Event, cellElement: HTMLElement) => void;\r\n  handleEnd: (event: Event, cellElement: HTMLElement) => void;\r\n  handleEscape: (event: Event) => void;\r\n  handleSpacebar: (event: KeyboardEvent, cellElement: HTMLElement) => void;\r\n  handleDelete: (event: KeyboardEvent, cellElement: HTMLElement) => void;\r\n  sealKeyboardSelectedCells: () => void;\r\n  clearKeyboardHighlight: () => void;\r\n}\r\n\r\nfunction KeyboardSelectionMixinFactory<T extends Constructor>(constructor: T) {\r\n  return class\r\n    extends constructor\r\n    implements SelectionMixinBaseClass, IKeyboardSelectionMixin\r\n  {\r\n    isKeyboardShiftKeyPressed = false;\r\n    keyboardOriginCellElement: HTMLElement | null = null;\r\n    keyboardHighlightElement: HTMLElement | null = null;\r\n    handleKeydown = handleKeydown.bind(this);\r\n    handleKeyup = handleKeyup.bind(this);\r\n    handleArrowUp = handleArrowUp.bind(this);\r\n    handleArrowDown = handleArrowDown.bind(this);\r\n    handleArrowLeft = handleArrowLeft.bind(this);\r\n    handleArrowRight = handleArrowRight.bind(this);\r\n    handleHome = handleHome.bind(this);\r\n    handleEnd = handleEnd.bind(this);\r\n    handleEscape = handleEscape.bind(this);\r\n    handleSpacebar = handleSpacebar.bind(this);\r\n    handleDelete = handleDelete.bind(this);\r\n\r\n    connectedCallback() {\r\n      if (constructor.prototype.connectedCallback) {\r\n        constructor.prototype.connectedCallback.call(this);\r\n      }\r\n\r\n      this.addEventListener('keydown', this.handleKeydown, {\r\n        capture: true,\r\n      });\r\n      this.addEventListener('keyup', this.handleKeyup);\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      if (constructor.prototype.disconnectedCallback) {\r\n        constructor.prototype.disconnectedCallback.call(this);\r\n      }\r\n\r\n      this.removeEventListener('keydown', this.handleKeydown, {\r\n        capture: true,\r\n      });\r\n      this.removeEventListener('keyup', this.handleKeyup);\r\n    }\r\n\r\n    sealKeyboardSelectedCells() {\r\n      const allCells = Array.from(\r\n        this.gridElement.querySelectorAll(SELECTABLE_CELL_ELEMENT_SELECTOR),\r\n      );\r\n\r\n      for (const cell of allCells) {\r\n        if (cell.hasAttribute('aria-selected')) {\r\n          cell.setAttribute('data-selected', '');\r\n        } else {\r\n          cell.removeAttribute('data-selected');\r\n        }\r\n      }\r\n    }\r\n\r\n    clearKeyboardHighlight() {\r\n      if (this.keyboardHighlightElement) {\r\n        this.keyboardHighlightElement.remove();\r\n      }\r\n\r\n      this.keyboardHighlightElement = null;\r\n      this.keyboardOriginCellElement = null;\r\n    }\r\n  };\r\n}\r\n\r\nexport function KeyboardSelectionMixin() {\r\n  return KeyboardSelectionMixinFactory;\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\n\r\nexport function handleArrowDown(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: KeyboardEvent,\r\n  cellElement: HTMLElement,\r\n) {\r\n  event.preventDefault();\r\n\r\n  const rowElement = cellElement.closest('[role=\"row\"]');\r\n\r\n  if (!rowElement) {\r\n    return;\r\n  }\r\n\r\n  const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\r\n\r\n  const gridElement = rowElement.closest('[role=\"grid\"]');\r\n\r\n  if (!(gridElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\r\n\r\n  const rowIndex = rowElements.indexOf(rowElement);\r\n\r\n  const targetRowElement = rowElements[rowIndex + 1];\r\n\r\n  if (!(targetRowElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  const targetRowElementCells = Array.from(targetRowElement.children);\r\n\r\n  const targetCellElement =\r\n    targetRowElementCells[\r\n      Math.min(targetRowElementCells.length - 1, cellIndex)\r\n    ];\r\n\r\n  if (!(targetCellElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  if (\r\n    this.isKeyboardShiftKeyPressed &&\r\n    !targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  this.focusCellElement(targetCellElement);\r\n\r\n  if (!this.isKeyboardShiftKeyPressed) {\r\n    return;\r\n  }\r\n\r\n  if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  if (!targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  this.clearRowSelection();\r\n\r\n  const selectionResult = this.selectCellElement({\r\n    targetCellElement,\r\n    relativeCellElement: cellElement,\r\n    originCellElement: this.keyboardOriginCellElement,\r\n    highlightElement: this.keyboardHighlightElement,\r\n  });\r\n\r\n  if (selectionResult) {\r\n    this.keyboardHighlightElement = selectionResult.highlightElement;\r\n    this.keyboardOriginCellElement = selectionResult.originCellElement;\r\n  }\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\n\r\nexport function handleArrowLeft(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: KeyboardEvent,\r\n  cellElement: HTMLElement,\r\n) {\r\n  event.preventDefault();\r\n\r\n  const targetCellElement = cellElement.previousElementSibling;\r\n\r\n  if (!(targetCellElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  if (\r\n    this.isKeyboardShiftKeyPressed &&\r\n    !targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  this.focusCellElement(targetCellElement);\r\n\r\n  if (!this.isKeyboardShiftKeyPressed) {\r\n    return;\r\n  }\r\n\r\n  if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  if (!targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  this.clearRowSelection();\r\n\r\n  const selectionResult = this.selectCellElement({\r\n    targetCellElement,\r\n    relativeCellElement: cellElement,\r\n    originCellElement: this.keyboardOriginCellElement,\r\n    highlightElement: this.keyboardHighlightElement,\r\n  });\r\n\r\n  if (selectionResult) {\r\n    this.keyboardHighlightElement = selectionResult.highlightElement;\r\n    this.keyboardOriginCellElement = selectionResult.originCellElement;\r\n  }\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\n\r\nexport function handleArrowRight(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: KeyboardEvent,\r\n  cellElement: HTMLElement,\r\n) {\r\n  event.preventDefault();\r\n\r\n  const targetCellElement = cellElement.nextElementSibling;\r\n\r\n  if (!(targetCellElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  if (\r\n    this.isKeyboardShiftKeyPressed &&\r\n    !targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  this.focusCellElement(targetCellElement);\r\n\r\n  if (!this.isKeyboardShiftKeyPressed) {\r\n    return;\r\n  }\r\n\r\n  if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  if (!targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  this.clearRowSelection();\r\n\r\n  const selectionResult = this.selectCellElement({\r\n    targetCellElement,\r\n    relativeCellElement: cellElement,\r\n    originCellElement: this.keyboardOriginCellElement,\r\n    highlightElement: this.keyboardHighlightElement,\r\n  });\r\n\r\n  if (selectionResult) {\r\n    this.keyboardHighlightElement = selectionResult.highlightElement;\r\n    this.keyboardOriginCellElement = selectionResult.originCellElement;\r\n  }\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\n\r\nexport function handleArrowUp(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: KeyboardEvent,\r\n  cellElement: HTMLElement,\r\n) {\r\n  event.preventDefault();\r\n\r\n  const rowElement = cellElement.closest('[role=\"row\"]');\r\n\r\n  if (!rowElement) {\r\n    return;\r\n  }\r\n\r\n  const cellIndex = Array.from(rowElement.children).indexOf(cellElement);\r\n\r\n  const gridElement = rowElement.closest('[role=\"grid\"]');\r\n\r\n  if (!(gridElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\r\n\r\n  const rowIndex = rowElements.indexOf(rowElement);\r\n\r\n  const targetRowElement = rowElements[rowIndex - 1];\r\n\r\n  if (!(targetRowElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  const targetRowElementCells = Array.from(targetRowElement.children);\r\n\r\n  const targetCellElement =\r\n    targetRowElementCells[\r\n      Math.min(targetRowElementCells.length - 1, cellIndex)\r\n    ];\r\n\r\n  if (!(targetCellElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  if (\r\n    this.isKeyboardShiftKeyPressed &&\r\n    !targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  this.focusCellElement(targetCellElement);\r\n\r\n  if (!this.isKeyboardShiftKeyPressed) {\r\n    return;\r\n  }\r\n\r\n  if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  if (!targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  this.clearRowSelection();\r\n\r\n  const selectionResult = this.selectCellElement({\r\n    targetCellElement,\r\n    relativeCellElement: cellElement,\r\n    originCellElement: this.keyboardOriginCellElement,\r\n    highlightElement: this.keyboardHighlightElement,\r\n  });\r\n\r\n  if (selectionResult) {\r\n    this.keyboardHighlightElement = selectionResult.highlightElement;\r\n    this.keyboardOriginCellElement = selectionResult.originCellElement;\r\n  }\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n  INPUT_SELECTOR,\r\n  isInFlyoutMenu,\r\n} from '../constants';\r\n\r\nexport function handleDelete(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: KeyboardEvent,\r\n  cellElement: HTMLElement,\r\n) {\r\n  const selectedCellElements = Array.from(\r\n    this.querySelectorAll(\r\n      `[aria-selected=\"true\"]:is(${SELECTABLE_CELL_ELEMENT_SELECTOR})`,\r\n    ),\r\n  );\r\n\r\n  if (selectedCellElements.length) {\r\n    this.dispatchEvent(\r\n      new CustomEvent('view-container:clear-cells', {\r\n        bubbles: true,\r\n        composed: true,\r\n        detail: selectedCellElements,\r\n      }),\r\n    );\r\n  }\r\n\r\n  const hasCheckedSelectMultipleRowsCheckbox = this.matches(\r\n    ':has(input[type=\"checkbox\"][name=\"row[]\"]:checked)',\r\n  );\r\n\r\n  if (hasCheckedSelectMultipleRowsCheckbox) {\r\n    this.dispatchEvent(\r\n      new CustomEvent('view-container:delete-rows', {\r\n        bubbles: true,\r\n        composed: true,\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\n\r\nexport function handleEnd(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: KeyboardEvent,\r\n  cellElement: HTMLElement,\r\n) {\r\n  event.preventDefault();\r\n\r\n  const gridElement = cellElement.closest('[role=\"grid\"]');\r\n\r\n  if (!(gridElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\r\n\r\n  const targetRowElement = rowElements[rowElements.length - 1];\r\n\r\n  if (!(targetRowElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  const targetRowElementCells = Array.from(targetRowElement.children);\r\n\r\n  const targetCellElement =\r\n    targetRowElementCells[targetRowElementCells.length - 1];\r\n\r\n  if (!(targetCellElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  this.focusCellElement(targetCellElement);\r\n\r\n  if (!this.isKeyboardShiftKeyPressed) {\r\n    return;\r\n  }\r\n\r\n  if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  if (!targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  this.clearRowSelection();\r\n\r\n  const selectionResult = this.selectCellElement({\r\n    targetCellElement,\r\n    relativeCellElement: cellElement,\r\n    originCellElement: this.keyboardOriginCellElement,\r\n    highlightElement: this.keyboardHighlightElement,\r\n  });\r\n\r\n  if (selectionResult) {\r\n    this.keyboardHighlightElement = selectionResult.highlightElement;\r\n    this.keyboardOriginCellElement = selectionResult.originCellElement;\r\n  }\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\n\r\nexport function handleEscape(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: KeyboardEvent,\r\n) {\r\n  event.preventDefault();\r\n  event.stopImmediatePropagation();\r\n  event.stopPropagation();\r\n\r\n  this.clearCellSelection();\r\n  this.clearRowSelection();\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\n\r\nexport function handleHome(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: KeyboardEvent,\r\n  cellElement: HTMLElement,\r\n) {\r\n  event.preventDefault();\r\n\r\n  const gridElement = cellElement.closest('[role=\"grid\"]');\r\n\r\n  if (!(gridElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  const rowElements = Array.from(gridElement.querySelectorAll('[role=\"row\"]'));\r\n\r\n  const targetRowElement = rowElements[0];\r\n\r\n  if (!(targetRowElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  const targetRowElementCells = Array.from(targetRowElement.children);\r\n\r\n  const targetCellElement = targetRowElementCells[0];\r\n\r\n  if (!(targetCellElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  this.focusCellElement(targetCellElement);\r\n\r\n  if (!this.isKeyboardShiftKeyPressed) {\r\n    return;\r\n  }\r\n\r\n  if (!cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  if (!targetCellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR)) {\r\n    return;\r\n  }\r\n\r\n  this.clearRowSelection();\r\n\r\n  const selectionResult = this.selectCellElement({\r\n    targetCellElement,\r\n    relativeCellElement: cellElement,\r\n    originCellElement: this.keyboardOriginCellElement,\r\n    highlightElement: this.keyboardHighlightElement,\r\n  });\r\n\r\n  if (selectionResult) {\r\n    this.keyboardHighlightElement = selectionResult.highlightElement;\r\n    this.keyboardOriginCellElement = selectionResult.originCellElement;\r\n  }\r\n}\r\n","import { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n  isInFlyoutMenu,\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n} from '../constants';\r\nimport { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\n\r\nexport function handleKeydown(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: Event,\r\n) {\r\n  if (!(event instanceof KeyboardEvent)) {\r\n    return;\r\n  }\r\n\r\n  const isInFlyoutMenuElement = !!event.composedPath().find(isInFlyoutMenu);\r\n\r\n  if (isInFlyoutMenuElement) {\r\n    return;\r\n  }\r\n\r\n  this.isKeyboardShiftKeyPressed = event.key === 'Shift' || event.shiftKey;\r\n\r\n  const cellElement = event.composedPath().find((element) => {\r\n    return (\r\n      element instanceof HTMLElement &&\r\n      element.matches(ANY_CELL_ELEMENT_SELECTOR)\r\n    );\r\n  });\r\n\r\n  if (!(cellElement instanceof HTMLElement)) {\r\n    return;\r\n  }\r\n\r\n  const isEditingCellElement = cellElement.matches(\r\n    ':has(auto-save-text input[type=\"text\"]:not([data-read-only]))',\r\n  );\r\n\r\n  if (isEditingCellElement) {\r\n    this.clearCellSelection();\r\n    this.clearRowSelection();\r\n    return;\r\n  }\r\n\r\n  switch (event.key) {\r\n    case 'Escape': {\r\n      this.handleEscape(event);\r\n      break;\r\n    }\r\n    case 'ArrowUp':\r\n      this.handleArrowUp(event, cellElement);\r\n      break;\r\n    case 'ArrowDown':\r\n      this.handleArrowDown(event, cellElement);\r\n      break;\r\n    case 'ArrowLeft':\r\n      this.handleArrowLeft(event, cellElement);\r\n      break;\r\n    case 'ArrowRight':\r\n      this.handleArrowRight(event, cellElement);\r\n      break;\r\n    case 'Home':\r\n      this.handleHome(event, cellElement);\r\n      break;\r\n    case 'End':\r\n      this.handleEnd(event, cellElement);\r\n      break;\r\n    case 'a':\r\n      if (event.ctrlKey) {\r\n        if (\r\n          cellElement.matches(SELECTABLE_CELL_ELEMENT_SELECTOR) &&\r\n          !isEditingCellElement\r\n        ) {\r\n          event.preventDefault();\r\n          event.stopImmediatePropagation();\r\n          event.stopPropagation();\r\n          this.selectAllCells();\r\n        }\r\n\r\n        if (cellElement.matches(':has([name=\"row[]\"])')) {\r\n          event.preventDefault();\r\n          event.stopImmediatePropagation();\r\n          event.stopPropagation();\r\n          this.selectAllRows();\r\n        }\r\n      }\r\n      break;\r\n    case ' ':\r\n      this.handleSpacebar(event, cellElement);\r\n      break;\r\n    case 'Delete':\r\n    case 'Backspace':\r\n      this.handleDelete(event, cellElement);\r\n    default:\r\n      break;\r\n  }\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\n\r\nexport function handleKeyup(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: Event,\r\n) {\r\n  if (!(event instanceof KeyboardEvent)) {\r\n    return;\r\n  }\r\n\r\n  this.isKeyboardShiftKeyPressed = event.shiftKey;\r\n\r\n  if (!this.isKeyboardShiftKeyPressed) {\r\n    this.clearKeyboardHighlight();\r\n    this.sealKeyboardSelectedCells();\r\n  }\r\n}\r\n","import { SelectionMixinBaseClass } from '../SelectionMixinBaseClass';\r\nimport { IKeyboardSelectionMixin } from '.';\r\nimport {\r\n  SELECTABLE_CELL_ELEMENT_SELECTOR,\r\n  ANY_CELL_ELEMENT_SELECTOR,\r\n  INPUT_SELECTOR,\r\n  isInFlyoutMenu,\r\n} from '../constants';\r\n\r\nexport function handleSpacebar(\r\n  this: SelectionMixinBaseClass & IKeyboardSelectionMixin,\r\n  event: KeyboardEvent,\r\n  cellElement: HTMLElement,\r\n) {\r\n  if (!this.isKeyboardShiftKeyPressed) {\r\n    return;\r\n  }\r\n\r\n  const inputElement = cellElement.querySelector(INPUT_SELECTOR);\r\n\r\n  if (!(inputElement instanceof HTMLInputElement)) {\r\n    return;\r\n  }\r\n\r\n  event.preventDefault();\r\n  event.stopImmediatePropagation();\r\n  event.stopPropagation();\r\n\r\n  this.sealKeyboardSelectedCells();\r\n\r\n  const selectionResult = this.selectCellElement({\r\n    targetCellElement: cellElement,\r\n    relativeCellElement: cellElement,\r\n    originCellElement: this.keyboardOriginCellElement,\r\n    highlightElement: this.keyboardHighlightElement,\r\n  });\r\n\r\n  if (selectionResult) {\r\n    this.keyboardHighlightElement = selectionResult.highlightElement;\r\n    this.keyboardOriginCellElement = selectionResult.originCellElement;\r\n  }\r\n\r\n  this.clearKeyboardHighlight();\r\n}\r\n","export class HyperLinkElement extends HTMLElement {\r\n  private boundClickHandler = this.handleClick.bind(this);\r\n  private boundKeydownHandler = this.handleKeydown.bind(this);\r\n\r\n  connectedCallback() {\r\n    this.addEventListener('click', this.boundClickHandler);\r\n    this.addEventListener('keydown', this.boundKeydownHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.removeEventListener('click', this.boundClickHandler);\r\n    this.removeEventListener('keydown', this.boundKeydownHandler);\r\n  }\r\n\r\n  handleClick() {\r\n    const href = this.getAttribute('data-href');\r\n\r\n    if (href === null) {\r\n      return;\r\n    }\r\n\r\n    window.location.href = href;\r\n  }\r\n\r\n  handleKeydown(event: Event) {\r\n    if (!(event instanceof KeyboardEvent)) {\r\n      return;\r\n    }\r\n\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    this.handleClick();\r\n  }\r\n}\r\n\r\nwindow.customElements.define('hyper-link', HyperLinkElement);\r\n","const FOCUSABLE_ELEMENT_SELECTOR =\r\n  ':is(button, [href], input, select, textarea):not([type=\"hidden\"]):not([disabled]):not([readonly])';\r\n\r\nexport class DisclosureWidgetElement extends HTMLElement {\r\n  private detailsElement: HTMLDetailsElement;\r\n  private boundToggleHandler = this.handleToggle.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const detailsElement = this.querySelector('details');\r\n\r\n    if (!(detailsElement instanceof HTMLDetailsElement)) {\r\n      throw new Error('Could not find details element');\r\n    }\r\n\r\n    this.detailsElement = detailsElement;\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.detailsElement.addEventListener('toggle', this.boundToggleHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.detailsElement.removeEventListener('toggle', this.boundToggleHandler);\r\n  }\r\n\r\n  handleToggle() {\r\n    const focusableElements = Array.from(\r\n      new Set([\r\n        ...Array.from(\r\n          this.detailsElement.querySelectorAll('*:not(summary)'),\r\n        ).filter((element) => {\r\n          return element.shadowRoot && element.shadowRoot.delegatesFocus;\r\n        }),\r\n        ...Array.from(\r\n          this.detailsElement.querySelectorAll(FOCUSABLE_ELEMENT_SELECTOR),\r\n        ),\r\n      ]),\r\n    );\r\n\r\n    if (this.detailsElement.open) {\r\n      for (const foucsableElement of focusableElements) {\r\n        foucsableElement.removeAttribute('tabindex');\r\n      }\r\n\r\n      const [firstFocusableItem] = focusableElements;\r\n\r\n      if (!(firstFocusableItem instanceof HTMLElement)) {\r\n        return;\r\n      }\r\n\r\n      this.focusElement(firstFocusableItem);\r\n    } else {\r\n      for (const focusableElement of focusableElements) {\r\n        focusableElement.setAttribute('tabindex', '-1');\r\n      }\r\n    }\r\n  }\r\n\r\n  focusElement(element: HTMLElement) {\r\n    element.focus();\r\n\r\n    if (!element.contains(window.document.activeElement)) {\r\n      const focusableElement = element.querySelector(\r\n        FOCUSABLE_ELEMENT_SELECTOR,\r\n      );\r\n\r\n      if (focusableElement instanceof HTMLElement) {\r\n        focusableElement.focus();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nwindow.customElements.define('disclosure-widget', DisclosureWidgetElement);\r\n","export class ColumnSelectorElement extends HTMLElement {\r\n  private buttonElement: HTMLElement;\r\n  private boundClickHandler = this.handleClick.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const buttonElement = this.querySelector('button');\r\n\r\n    if (!(buttonElement instanceof HTMLElement)) {\r\n      throw new Error('No button element provided');\r\n    }\r\n\r\n    this.buttonElement = buttonElement;\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.buttonElement.addEventListener('click', this.boundClickHandler);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.buttonElement.removeEventListener('click', this.boundClickHandler);\r\n  }\r\n\r\n  handleClick() {\r\n    const propertyName = this.getAttribute('data-property');\r\n\r\n    if (!propertyName) {\r\n      return;\r\n    }\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent('column-selector:select', {\r\n        bubbles: true,\r\n        composed: true,\r\n        detail: propertyName,\r\n      }),\r\n    );\r\n\r\n    this.dispatchEvent(\r\n      new KeyboardEvent('keydown', {\r\n        bubbles: true,\r\n        composed: true,\r\n        key: 'Escape',\r\n      }),\r\n    );\r\n  }\r\n}\r\n\r\nwindow.customElements.define('column-selector', ColumnSelectorElement);\r\n"],"names":["$d0da4566d2fd20fe$var$getRandomValues","$b488569ebaeb416e$export$2e2bcd8739ae039","randomUUID","crypto","bind","$d0da4566d2fd20fe$var$rnds8","Uint8Array","$8fb7ad22aed8f433$var$byteToHex","i","push","toString","slice","$27d7069422be255c$export$2e2bcd8739ae039","options","buf","offset","rnds","random","rng","getRandomValues","Error","arr","$7546709c975de4a6$export$bb6d302d82cc2621","$7546709c975de4a6$export$802553ba611e108d","HTMLElement","constructor","boundBeforeUnloadHandler","handleBeforeUnload","observedAttributes","attributeChangedCallback","name","oldValue","newValue","triggerBeforeUnload","removeBeforeUnload","window","onbeforeunload","event","preventDefault","returnValue","customElements","define","$e0d02177ed2e6c33$export$8d0ea09c71f565f8","shadowRoot","slotElement","querySelector","HTMLSlotElement","assignedNodes","length","inputElement","find","node","HTMLInputElement","unloadHandlerElement","document","inputId","id","concat","Date","now","boundChangeHandler","handleChange","boundInputHandler","handleInput","markDirty","prev","getAttribute","dirtyElementsArray","split","dirtyElementsString","uniqueDirtyElementsArray","Array","from","Set","join","setAttribute","markClean","filter","removeAttribute","value","patch","url","formData","FormData","append","fetch","method","body","then","res","status","arguments","boundKeydownHandler","handleKeydown","boundClickHandler","handleClick","boundBlurHandler","handleBlur","connectedCallback","addEventListener","disconnectedCallback","removeEventListener","enterEditMode","exitEditMode","submitData","toggleEditMode","dataset","readOnly","KeyboardEvent","key","dispatchEvent","CustomEvent","composed","bubbles","selectionStart","selectionEnd","test","formElement","form","formAction","includes","get","catch","boundMarkClean","isChecked","checked","location","reload","defaultChecked","$cdd05a6aa3de24f9$exports","$cdd05a6aa3de24f9$var$debounce","func","wait","immediate","later","last","timestamp","timeout","setTimeout","result","apply","context","args","debounced","callNow","clear","clearTimeout","flush","debounce","a","debouncedInputHandler","__esModule","default","submit","$422fba6c8e95a937$export$490fe6a0b0571059","buttonElement","HTMLButtonElement","HTMLFormElement","searchInputElement","elements","type","$a637d0d7f218ab87$export$73f9a557f7545819","boundSubmitHandler","handleFormSubmit","unloadHandler","formElements","getElementById","$cd8d668d70d6c005$export$eef32558893c738f","boundControllableCheckboxChangeHandler","handleControllableCheckboxChange","inputName","checkboxElements","element","checkboxFormElement","isAllChecked","every","$a1587808b9f6932a$export$c3667d0270320762","dialogElement","HTMLDialogElement","closeDialogButtonElement","click","$085f3be498b52031$export$979768f00416c2f3","boundToggleHandler","handleToggle","boundFocusoutHandler","handleFocusout","detailsElement","HTMLDetailsElement","summaryElement","menuElement","menuItemElements","querySelectorAll","positionPopover","left","top","height","width","getBoundingClientRect","translateX","innerWidth","translateY","innerHeight","transformValue","style","setProperty","open","focus","menuItemElement","composedPath","matches","closest","handleArrowUp","handleArrowDown","menuItemElementIndex","indexOf","previousMenuItemElement","focusElement","nextMenuItemElement","contains","activeElement","focusableElement","FocusEvent","relatedTarget","$46b8a5f9dbdf2b36$export$b02966d201c4b770","$46b8a5f9dbdf2b36$export$6d51e1b593672f77","$46b8a5f9dbdf2b36$export$553fc5313bf47924","$46b8a5f9dbdf2b36$export$cd96f2fd0e308444","Element","flyoutMenuElement","$46b8a5f9dbdf2b36$export$211442cb55fb93","$a6dc55993fa449ed$export$83aba40036977c4e","gridElement","getClosestCellElementFromPoint","PointerEvent","getClosestCellElementFromComposedPath","closestCellElement","touchTarget","elementFromPoint","clientX","clientY","updateHighlightElement","highlightElement","cellElement","originCellElement","closestRowElement","draggedRow","closestCellColumnIndex","originCellColumnIndex","closestCellLeft","closestCellRight","right","originCellLeft","originCellRight","closestCellTop","closestCellBottom","bottom","originCellTop","originCellBottom","isSameCell","isoriginCellBeforeClosestCell","isoriginCellAboveClosestCell","isoriginCellAfterClosestCell","isoriginCellBelowClosestCell","border","initializeHighlightElement","createElement","classList","add","appendChild","updateSelectedCells","allCellElements","markCellSelected","markCellUnselected","cellBounds","isTopWithinBounds","Math","ceil","isBottomWithinBounds","isLeftWithinBounds","isRightWithinBounds","selectCellElement","relativeCellElement","targetCellElement","newHighlightElement","newOriginCellElement","focusCellElement","removeHighlightElement","remove","lastSelectedCellElement","clearCellSelection","dragHighlightElement","dragOriginCellElement","Object","assign","keyboardHighlightElement","keyboardOriginCellElement","clearRowSelection","selectMultipleRowsCheckbox","selectMultipleRowsForm","rowSelectionFormData","undefined","fromEntries","rawRowSelectionFormData","entries","rowCheckboxElement","selectAllRows","selectAllCells","$7aa7c6f5843fc5b7$export$8428588be83868fa","$602e89375ac1c529$export$b70eff784f2f99b","isDragShiftKeyPressed","shiftKey","$b7d8a294780e2f44$export$a9b1da924122fb14","cell","hasAttribute","selectedCell","isDragging","$d947af6bab5cfdbc$export$93771487a17c6e62","isPointerDown","$17acb242306e208c$export$afdb74934b867815","stopImmediatePropagation","stopPropagation","lastDragSelectedCellElement","$90ceed6536e5aceb$export$98f87c7ed68883bb","$fd1f2862c3d3d003$export$8fd17b28079337b1","rowElement","cellIndex","children","rowElements","rowIndex","targetRowElement","targetRowElementCells","min","isKeyboardShiftKeyPressed","selectionResult","$ae8d75c3d232cd02$export$c3ef9c33105e6a98","previousElementSibling","$4639fecf24f44b91$export$3be183d81a4d5ed0","nextElementSibling","$ee80b4c0bcdd3ace$export$faaa99bf89cee3fc","$e1f3152389df549c$export$471c4c6c1d1a0512","selectedCellElements","detail","$e77160b986f599e1$export$cfa07126723ce987","$8a9000db06855e46$export$f2213229c327708f","$aa1984e976d1a729$export$e2f6e3a3a819615b","$6021fa1311fc9072$export$b70eff784f2f99b","isEditingCellElement","handleEscape","handleArrowLeft","handleArrowRight","handleHome","handleEnd","ctrlKey","handleSpacebar","handleDelete","$fff5c83593fc307c$export$a9b1da924122fb14","clearKeyboardHighlight","sealKeyboardSelectedCells","$107972eed587d074$export$e906ed8736143ffc","$02d20b857b62d350$export$7cd474321d18c0af","boundHandleAutoSaveTextSave","handleAutoSaveTextSave","boundClearCellsHandler","handleClearCells","boundHandleAutoSaveTextToggleEditMode","handleAutoSaveTextToggleEditMode","boundHandleDeleteRows","handleDeleteRows","capture","propertyName","columnIndex","firstRowElement","lastRowElement","firstRowTargetCellElement","lastRowTargetCellElement","currentlySelectedCells","newlySelectedCells","target","gridRows","Number","addRowButtonElement","addRowFormElement","hiddenInputElement","isArray","cellElements","autoSaveTextElement","clearCellsButtonElement","clearCellsFormElement","cellsValue","map","rowId","propertyId","action","nextRowElement","nextCellElement","bulkActionsFormElement","bulkActionSelectElement","HTMLSelectElement","rowSelectionCheckbox","$02d20b857b62d350$var$__decorate","decorators","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","pointerId","boundPointerdownHandler","boundPointermoveHandler","boundPointerupHandler","boundDragKeydownHandler","boundDragKeyupHandler","boundDragstartHandler","prototype","call","handleKeyup","$7c25fa2a1ae2dfff$export$619d445163882427","href","$7a267d45199642fc$var$FOCUSABLE_ELEMENT_SELECTOR","$7a267d45199642fc$export$551c9975c7ac7be","focusableElements","delegatesFocus","foucsableElement","firstFocusableItem","$3c96a2f9447f3c76$export$57886f95182653a1"],"version":3,"file":"client.js.map"}